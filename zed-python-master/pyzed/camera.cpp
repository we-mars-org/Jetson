/* Generated by Cython 0.27.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\Camera.hpp",
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\Core.hpp",
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\Mesh.hpp",
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\defines.hpp",
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\types.hpp",
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include\\numpy\\arrayobject.h",
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include\\numpy\\ufuncobject.h",
            "pyzed\\Utils.cpp"
        ],
        "include_dirs": [
            ".\\pyzed",
            "pyzed",
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include",
            "C:\\Program Files (x86)\\ZED SDK\\include",
            "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0/include"
        ],
        "language": "c++",
        "libraries": [
            "sl_core64",
            "sl_scanning64",
            "sl_zed64"
        ],
        "library_dirs": [
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include",
            "C:\\Program Files (x86)\\ZED SDK\\lib",
            "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0/lib/x64"
        ],
        "name": "pyzed.camera",
        "sources": [
            "pyzed/camera.pyx"
        ]
    },
    "module_name": "pyzed.camera"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_1"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyzed__camera
#define __PYX_HAVE_API__pyzed__camera
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string.h>
#include <string>
#include <vector>
#include "sl/defines.hpp"
#include "sl/types.hpp"
#include "sl/Core.hpp"
#include "Utils.cpp"
#include "sl/Mesh.hpp"
#include "sl/Camera.hpp"
#include <stdio.h>
#include "pythread.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "pyzed\\camera.pyx",
  "stringsource",
  "__init__.pxd",
  "pyzed\\types.pxd",
  "pyzed\\core.pxd",
  "pyzed\\mesh.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/* "pyzed/core.pxd":217
 * 
 * 
 * ctypedef unsigned char uchar1             # <<<<<<<<<<<<<<
 * ctypedef types.Vector2[unsigned char] uchar2
 * ctypedef types.Vector3[unsigned char] uchar3
 */
typedef unsigned char __pyx_t_5pyzed_4core_uchar1;

/* "pyzed/core.pxd":222
 * ctypedef types.Vector4[unsigned char] uchar4
 * 
 * ctypedef float float1             # <<<<<<<<<<<<<<
 * ctypedef types.Vector2[float] float2
 * ctypedef types.Vector3[float] float3
 */
typedef float __pyx_t_5pyzed_4core_float1;

/* "pyzed/mesh.pxd":31
 * 
 * 
 * ctypedef unsigned int uint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "sl/Mesh.hpp" namespace "sl":
 */
typedef unsigned int __pyx_t_5pyzed_4mesh_uint;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":743
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":746
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_5pyzed_5types_PyMatrix3f;
struct __pyx_obj_5pyzed_5types_PyMatrix4f;
struct __pyx_obj_5pyzed_4core_PyMat;
struct __pyx_obj_5pyzed_4core_PyRotation;
struct __pyx_obj_5pyzed_4core_PyTranslation;
struct __pyx_obj_5pyzed_4core_PyOrientation;
struct __pyx_obj_5pyzed_4core_PyTransform;
struct __pyx_obj_5pyzed_4core_PyCameraParameters;
struct __pyx_obj_5pyzed_4core_PyCalibrationParameters;
struct __pyx_obj_5pyzed_4core_PyCameraInformation;
struct __pyx_obj_5pyzed_4mesh_PyTexture;
struct __pyx_obj_5pyzed_4mesh_PyChunk;
struct __pyx_obj_5pyzed_4mesh_PyMesh;
struct __pyx_obj_5pyzed_6camera_PyZEDCamera;
struct __pyx_obj_5pyzed_6camera_PyInitParameters;
struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters;
struct __pyx_obj_5pyzed_6camera_PyTrackingParameters;
struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters;
struct __pyx_obj_5pyzed_6camera_PyPose;

/* "pyzed/core.pxd":218
 * 
 * ctypedef unsigned char uchar1
 * ctypedef types.Vector2[unsigned char] uchar2             # <<<<<<<<<<<<<<
 * ctypedef types.Vector3[unsigned char] uchar3
 * ctypedef types.Vector4[unsigned char] uchar4
 */
typedef sl::Vector2<unsigned char>  __pyx_t_5pyzed_4core_uchar2;

/* "pyzed/core.pxd":219
 * ctypedef unsigned char uchar1
 * ctypedef types.Vector2[unsigned char] uchar2
 * ctypedef types.Vector3[unsigned char] uchar3             # <<<<<<<<<<<<<<
 * ctypedef types.Vector4[unsigned char] uchar4
 * 
 */
typedef sl::Vector3<unsigned char>  __pyx_t_5pyzed_4core_uchar3;

/* "pyzed/core.pxd":220
 * ctypedef types.Vector2[unsigned char] uchar2
 * ctypedef types.Vector3[unsigned char] uchar3
 * ctypedef types.Vector4[unsigned char] uchar4             # <<<<<<<<<<<<<<
 * 
 * ctypedef float float1
 */
typedef sl::Vector4<unsigned char>  __pyx_t_5pyzed_4core_uchar4;

/* "pyzed/core.pxd":223
 * 
 * ctypedef float float1
 * ctypedef types.Vector2[float] float2             # <<<<<<<<<<<<<<
 * ctypedef types.Vector3[float] float3
 * ctypedef types.Vector4[float] float4
 */
typedef sl::Vector2<float>  __pyx_t_5pyzed_4core_float2;

/* "pyzed/core.pxd":224
 * ctypedef float float1
 * ctypedef types.Vector2[float] float2
 * ctypedef types.Vector3[float] float3             # <<<<<<<<<<<<<<
 * ctypedef types.Vector4[float] float4
 * 
 */
typedef sl::Vector3<float>  __pyx_t_5pyzed_4core_float3;

/* "pyzed/core.pxd":225
 * ctypedef types.Vector2[float] float2
 * ctypedef types.Vector3[float] float3
 * ctypedef types.Vector4[float] float4             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef sl::Vector4<float>  __pyx_t_5pyzed_4core_float4;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "pyzed/types.pxd":191
 * 
 * 
 * cdef class PyMatrix3f:             # <<<<<<<<<<<<<<
 *     cdef Matrix3f mat
 * 
 */
struct __pyx_obj_5pyzed_5types_PyMatrix3f {
  PyObject_HEAD
  sl::Matrix3f mat;
};


/* "pyzed/types.pxd":195
 * 
 * 
 * cdef class PyMatrix4f:             # <<<<<<<<<<<<<<
 *     cdef Matrix4f mat
 */
struct __pyx_obj_5pyzed_5types_PyMatrix4f {
  PyObject_HEAD
  sl::Matrix4f mat;
};


/* "pyzed/core.pxd":274
 * 
 * 
 * cdef class PyMat:             # <<<<<<<<<<<<<<
 *     cdef Mat mat
 * 
 */
struct __pyx_obj_5pyzed_4core_PyMat {
  PyObject_HEAD
  sl::Mat mat;
};


/* "pyzed/core.pxd":277
 *     cdef Mat mat
 * 
 * cdef class PyRotation(types.PyMatrix3f):             # <<<<<<<<<<<<<<
 *     cdef Rotation rotation
 * 
 */
struct __pyx_obj_5pyzed_4core_PyRotation {
  struct __pyx_obj_5pyzed_5types_PyMatrix3f __pyx_base;
  sl::Rotation rotation;
};


/* "pyzed/core.pxd":281
 * 
 * 
 * cdef class PyTranslation:             # <<<<<<<<<<<<<<
 *     cdef Translation translation
 * 
 */
struct __pyx_obj_5pyzed_4core_PyTranslation {
  PyObject_HEAD
  sl::Translation translation;
};


/* "pyzed/core.pxd":285
 * 
 * 
 * cdef class PyOrientation:             # <<<<<<<<<<<<<<
 *     cdef Orientation orientation
 * 
 */
struct __pyx_obj_5pyzed_4core_PyOrientation {
  PyObject_HEAD
  sl::Orientation orientation;
};


/* "pyzed/core.pxd":289
 * 
 * 
 * cdef class PyTransform(types.PyMatrix4f):             # <<<<<<<<<<<<<<
 *     cdef Transform transform
 * 
 */
struct __pyx_obj_5pyzed_4core_PyTransform {
  struct __pyx_obj_5pyzed_5types_PyMatrix4f __pyx_base;
  sl::Transform transform;
};


/* "pyzed/core.pxd":293
 * 
 * 
 * cdef class PyCameraParameters:             # <<<<<<<<<<<<<<
 *     cdef CameraParameters camera_params
 * 
 */
struct __pyx_obj_5pyzed_4core_PyCameraParameters {
  PyObject_HEAD
  struct sl::CameraParameters camera_params;
};


/* "pyzed/core.pxd":297
 * 
 * 
 * cdef class PyCalibrationParameters:             # <<<<<<<<<<<<<<
 *     cdef CalibrationParameters calibration
 *     cdef PyCameraParameters py_left_cam
 */
struct __pyx_obj_5pyzed_4core_PyCalibrationParameters {
  PyObject_HEAD
  struct sl::CalibrationParameters calibration;
  struct __pyx_obj_5pyzed_4core_PyCameraParameters *py_left_cam;
  struct __pyx_obj_5pyzed_4core_PyCameraParameters *py_right_cam;
  sl::Vector3<float>  R;
  sl::Vector3<float>  T;
};


/* "pyzed/core.pxd":305
 * 
 * 
 * cdef class PyCameraInformation:             # <<<<<<<<<<<<<<
 *     cdef PyCalibrationParameters py_calib
 *     cdef PyCalibrationParameters py_calib_raw
 */
struct __pyx_obj_5pyzed_4core_PyCameraInformation {
  PyObject_HEAD
  struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *py_calib;
  struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *py_calib_raw;
  unsigned int serial_number;
  unsigned int firmware_version;
};


/* "pyzed/mesh.pxd":100
 * 
 * 
 * cdef class PyTexture:             # <<<<<<<<<<<<<<
 *     cdef Texture texture
 * 
 */
struct __pyx_obj_5pyzed_4mesh_PyTexture {
  PyObject_HEAD
  sl::Texture texture;
};


/* "pyzed/mesh.pxd":103
 *     cdef Texture texture
 * 
 * cdef class PyChunk:             # <<<<<<<<<<<<<<
 *     cdef Chunk chunk
 * 
 */
struct __pyx_obj_5pyzed_4mesh_PyChunk {
  PyObject_HEAD
  sl::Chunk chunk;
};


/* "pyzed/mesh.pxd":106
 *     cdef Chunk chunk
 * 
 * cdef class PyMesh:             # <<<<<<<<<<<<<<
 *     cdef Mesh* mesh
 */
struct __pyx_obj_5pyzed_4mesh_PyMesh {
  PyObject_HEAD
  sl::Mesh *mesh;
};


/* "pyzed/camera.pxd":238
 * 
 * 
 * cdef class PyZEDCamera:             # <<<<<<<<<<<<<<
 *     cdef Camera camera
 */
struct __pyx_obj_5pyzed_6camera_PyZEDCamera {
  PyObject_HEAD
  sl::Camera camera;
};


/* "pyzed/camera.pyx":48
 * 
 * 
 * cdef class PyInitParameters:             # <<<<<<<<<<<<<<
 *     cdef InitParameters* init
 *     def __cinit__(self, camera_resolution=defines.PyRESOLUTION.PyRESOLUTION_HD720, camera_fps=0,
 */
struct __pyx_obj_5pyzed_6camera_PyInitParameters {
  PyObject_HEAD
  sl::InitParameters *init;
};


/* "pyzed/camera.pyx":244
 * 
 * 
 * cdef class PyRuntimeParameters:             # <<<<<<<<<<<<<<
 *     cdef RuntimeParameters* runtime
 *     def __cinit__(self, sensing_mode=defines.PySENSING_MODE.PySENSING_MODE_STANDARD, enable_depth=True,
 */
struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters {
  PyObject_HEAD
  sl::RuntimeParameters *runtime;
};


/* "pyzed/camera.pyx":297
 * 
 * 
 * cdef class PyTrackingParameters:             # <<<<<<<<<<<<<<
 *     cdef TrackingParameters* tracking
 *     def __cinit__(self, core.PyTransform init_pos, _enable_memory=True, _area_path=None):
 */
struct __pyx_obj_5pyzed_6camera_PyTrackingParameters {
  PyObject_HEAD
  sl::TrackingParameters *tracking;
};


/* "pyzed/camera.pyx":341
 * 
 * 
 * cdef class PySpatialMappingParameters:             # <<<<<<<<<<<<<<
 *     cdef SpatialMappingParameters* spatial
 *     def __cinit__(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH, range=PyRANGE.PyRANGE_MEDIUM,
 */
struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters {
  PyObject_HEAD
  sl::SpatialMappingParameters *spatial;
};


/* "pyzed/camera.pyx":442
 * 
 * 
 * cdef class PyPose:             # <<<<<<<<<<<<<<
 *     cdef Pose pose
 *     def __cinit__(self):
 */
struct __pyx_obj_5pyzed_6camera_PyPose {
  PyObject_HEAD
  sl::Pose pose;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(sl::SpatialMappingParameters::RESOLUTION value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(sl::SpatialMappingParameters::RANGE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SENSING_MODE(sl::SENSING_MODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_REFERENCE_FRAME(sl::REFERENCE_FRAME value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::ERROR_CODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_timeStamp(sl::timeStamp value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE value);

static PyObject* __pyx_convert__to_py_struct__sl_3a__3a_RecordingState(struct sl::RecordingState s);
/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::RESOLUTION __Pyx_PyInt_As_sl_3a__3a_RESOLUTION(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::DEPTH_MODE __Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::UNIT __Pyx_PyInt_As_sl_3a__3a_UNIT(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::COORDINATE_SYSTEM __Pyx_PyInt_As_sl_3a__3a_COORDINATE_SYSTEM(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::SENSING_MODE __Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::REFERENCE_FRAME __Pyx_PyInt_As_sl_3a__3a_REFERENCE_FRAME(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::SpatialMappingParameters::RESOLUTION __Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::SpatialMappingParameters::RANGE __Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::VIEW __Pyx_PyInt_As_sl_3a__3a_VIEW(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum sl::MEM __Pyx_PyInt_As_enum__sl_3a__3a_MEM(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::MEASURE __Pyx_PyInt_As_sl_3a__3a_MEASURE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::CAMERA_SETTINGS __Pyx_PyInt_As_sl_3a__3a_CAMERA_SETTINGS(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::SVO_COMPRESSION_MODE __Pyx_PyInt_As_sl_3a__3a_SVO_COMPRESSION_MODE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::DEPTH_FORMAT __Pyx_PyInt_As_sl_3a__3a_DEPTH_FORMAT(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::POINT_CLOUD_FORMAT __Pyx_PyInt_As_sl_3a__3a_POINT_CLOUD_FORMAT(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'pyzed.defines' */

/* Module declarations from 'pyzed.types' */
static PyTypeObject *__pyx_ptype_5pyzed_5types_PyMatrix3f = 0;
static PyTypeObject *__pyx_ptype_5pyzed_5types_PyMatrix4f = 0;

/* Module declarations from 'pyzed.core' */
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyMat = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyRotation = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyTranslation = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyOrientation = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyTransform = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyCameraParameters = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyCalibrationParameters = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyCameraInformation = 0;

/* Module declarations from 'pyzed.mesh' */
static PyTypeObject *__pyx_ptype_5pyzed_4mesh_PyTexture = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4mesh_PyChunk = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4mesh_PyMesh = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'pyzed.camera' */
static PyTypeObject *__pyx_ptype_5pyzed_6camera_PyZEDCamera = 0;
static PyTypeObject *__pyx_ptype_5pyzed_6camera_PyInitParameters = 0;
static PyTypeObject *__pyx_ptype_5pyzed_6camera_PyRuntimeParameters = 0;
static PyTypeObject *__pyx_ptype_5pyzed_6camera_PyTrackingParameters = 0;
static PyTypeObject *__pyx_ptype_5pyzed_6camera_PySpatialMappingParameters = 0;
static PyTypeObject *__pyx_ptype_5pyzed_6camera_PyPose = 0;
static PyObject *__pyx_convert_pair_to_py_float____float(std::pair<float,float>  const &); /*proto*/
static std::pair<float,float>  __pyx_convert_pair_from_py_float__and_float(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pyzed.camera"
int __pyx_module_is_main_pyzed__camera = 0;

/* Implementation of 'pyzed.camera' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k__2[] = "";
static const char __pyx_k_np[] = "np";
static const char __pyx_k__68[] = "*";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_zed[] = "zed";
static const char __pyx_k_Enum[] = "Enum";
static const char __pyx_k_core[] = "core";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mesh[] = "mesh";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_view[] = "view";
static const char __pyx_k_PyMEM[] = "PyMEM";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_types[] = "types";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_PyUNIT[] = "PyUNIT";
static const char __pyx_k_PyVIEW[] = "PyVIEW";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_factor[] = "factor";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_py_mat[] = "py_mat";
static const char __pyx_k_radian[] = "radian";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_PyRANGE[] = "PyRANGE";
static const char __pyx_k_defines[] = "defines";
static const char __pyx_k_measure[] = "measure";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_py_pose[] = "py_pose";
static const char __pyx_k_resizer[] = "resizer";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_init_pos[] = "init_pos";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_settings[] = "settings";
static const char __pyx_k_PyMEASURE[] = "PyMEASURE";
static const char __pyx_k_PyMEM_CPU[] = "PyMEM_CPU";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_area_path[] = "_area_path";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_name_save[] = "name_save";
static const char __pyx_k_pose_data[] = "pose_data";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_camera_fps[] = "camera_fps";
static const char __pyx_k_depth_mode[] = "depth_mode";
static const char __pyx_k_mtimestamp[] = "mtimestamp";
static const char __pyx_k_pyzed_core[] = "pyzed.core";
static const char __pyx_k_pyzed_mesh[] = "pyzed.mesh";
static const char __pyx_k_resolution[] = "resolution";
static const char __pyx_k_sdk_gpu_id[] = "sdk_gpu_id";
static const char __pyx_k_with_color[] = "with_color";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PyRANGE_FAR[] = "PyRANGE_FAR";
static const char __pyx_k_PyVIEW_LEFT[] = "PyVIEW_LEFT";
static const char __pyx_k_allowed_max[] = "allowed_max";
static const char __pyx_k_allowed_min[] = "allowed_min";
static const char __pyx_k_mconfidence[] = "mconfidence";
static const char __pyx_k_pyzed_types[] = "pyzed.types";
static const char __pyx_k_sdk_verbose[] = "sdk_verbose";
static const char __pyx_k_use_default[] = "use_default";
static const char __pyx_k_PyDEPTH_MODE[] = "PyDEPTH_MODE";
static const char __pyx_k_PyERROR_CODE[] = "PyERROR_CODE";
static const char __pyx_k_PyRANGE_NEAR[] = "PyRANGE_NEAR";
static const char __pyx_k_PyRESOLUTION[] = "PyRESOLUTION";
static const char __pyx_k_PyResolution[] = "PyResolution";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_enable_depth[] = "enable_depth";
static const char __pyx_k_pyzed_camera[] = "pyzed.camera";
static const char __pyx_k_save_texture[] = "save_texture";
static const char __pyx_k_sensing_mode[] = "sensing_mode";
static const char __pyx_k_enable_memory[] = "_enable_memory";
static const char __pyx_k_pyzed_defines[] = "pyzed.defines";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_PyDEPTH_FORMAT[] = "PyDEPTH_FORMAT";
static const char __pyx_k_PyRANGE_MEDIUM[] = "PyRANGE_MEDIUM";
static const char __pyx_k_PySENSING_MODE[] = "PySENSING_MODE";
static const char __pyx_k_area_file_path[] = "area_file_path";
static const char __pyx_k_video_filename[] = "video_filename";
static const char __pyx_k_PyMEASURE_DEPTH[] = "PyMEASURE_DEPTH";
static const char __pyx_k_camera_linux_id[] = "camera_linux_id";
static const char __pyx_k_reference_frame[] = "reference_frame";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_PyRESOLUTION_LOW[] = "PyRESOLUTION_LOW";
static const char __pyx_k_PyTRACKING_STATE[] = "PyTRACKING_STATE";
static const char __pyx_k_compression_mode[] = "compression_mode";
static const char __pyx_k_coordinate_units[] = "coordinate_units";
static const char __pyx_k_max_memory_usage[] = "max_memory_usage";
static const char __pyx_k_pyzed_camera_pyx[] = "pyzed\\camera.pyx";
static const char __pyx_k_PyCAMERA_SETTINGS[] = "PyCAMERA_SETTINGS";
static const char __pyx_k_PyREFERENCE_FRAME[] = "PyREFERENCE_FRAME";
static const char __pyx_k_PyRESOLUTION_HIGH[] = "PyRESOLUTION_HIGH";
static const char __pyx_k_PyUNIT_MILLIMETER[] = "PyUNIT_MILLIMETER";
static const char __pyx_k_camera_image_flip[] = "camera_image_flip";
static const char __pyx_k_camera_resolution[] = "camera_resolution";
static const char __pyx_k_coordinate_system[] = "coordinate_system";
static const char __pyx_k_save_mat_depth_as[] = "save_mat_depth_as";
static const char __pyx_k_PyRESOLUTION_HD720[] = "PyRESOLUTION_HD720";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_enable_point_cloud[] = "enable_point_cloud";
static const char __pyx_k_svo_input_filename[] = "svo_input_filename";
static const char __pyx_k_svo_real_time_mode[] = "svo_real_time_mode";
static const char __pyx_k_PyAREA_EXPORT_STATE[] = "PyAREA_EXPORT_STATE";
static const char __pyx_k_PyCOORDINATE_SYSTEM[] = "PyCOORDINATE_SYSTEM";
static const char __pyx_k_PyRESOLUTION_MEDIUM[] = "PyRESOLUTION_MEDIUM";
static const char __pyx_k_depth_stabilization[] = "depth_stabilization";
static const char __pyx_k_keep_occluded_point[] = "keep_occluded_point";
static const char __pyx_k_PyPOINT_CLOUD_FORMAT[] = "PyPOINT_CLOUD_FORMAT";
static const char __pyx_k_keep_mesh_consistent[] = "keep_mesh_consistent";
static const char __pyx_k_save_camera_depth_as[] = "save_camera_depth_as";
static const char __pyx_k_sdk_verbose_log_file[] = "sdk_verbose_log_file";
static const char __pyx_k_PySVO_COMPRESSION_MODE[] = "PySVO_COMPRESSION_MODE";
static const char __pyx_k_depth_minimum_distance[] = "depth_minimum_distance";
static const char __pyx_k_PyREFERENCE_FRAME_WORLD[] = "PyREFERENCE_FRAME_WORLD";
static const char __pyx_k_PySENSING_MODE_STANDARD[] = "PySENSING_MODE_STANDARD";
static const char __pyx_k_PySPATIAL_MAPPING_STATE[] = "PySPATIAL_MAPPING_STATE";
static const char __pyx_k_save_mat_point_cloud_as[] = "save_mat_point_cloud_as";
static const char __pyx_k_PyDEPTH_MODE_PERFORMANCE[] = "PyDEPTH_MODE_PERFORMANCE";
static const char __pyx_k_PyREFERENCE_FRAME_CAMERA[] = "PyREFERENCE_FRAME_CAMERA";
static const char __pyx_k_PySELF_CALIBRATION_STATE[] = "PySELF_CALIBRATION_STATE";
static const char __pyx_k_average_compression_time[] = "average_compression_time";
static const char __pyx_k_current_compression_time[] = "current_compression_time";
static const char __pyx_k_PyCOORDINATE_SYSTEM_IMAGE[] = "PyCOORDINATE_SYSTEM_IMAGE";
static const char __pyx_k_average_compression_ratio[] = "average_compression_ratio";
static const char __pyx_k_camera_buffer_count_linux[] = "camera_buffer_count_linux";
static const char __pyx_k_camera_disable_self_calib[] = "camera_disable_self_calib";
static const char __pyx_k_current_compression_ratio[] = "current_compression_ratio";
static const char __pyx_k_enable_right_side_measure[] = "enable_right_side_measure";
static const char __pyx_k_measure3D_reference_frame[] = "measure3D_reference_frame";
static const char __pyx_k_save_camera_point_cloud_as[] = "save_camera_point_cloud_as";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_Argument_is_not_of_bool_type[] = "Argument is not of bool type.";
static const char __pyx_k_Argument_is_not_of_right_type[] = "Argument is not of right type.";
static const char __pyx_k_Argument_is_not_of_PyRANGE_type[] = "Argument is not of PyRANGE type.";
static const char __pyx_k_Argument_is_not_of_PyRESOLUTION[] = "Argument is not of PyRESOLUTION type.";
static const char __pyx_k_Argument_is_not_of_boolean_type[] = "Argument is not of boolean type.";
static const char __pyx_k_Argument_must_be_of_PyREFERENCE[] = "Argument must be of PyREFERENCE type.";
static const char __pyx_k_Argument_must_be_of_PyUNIT_type[] = "Argument must be of PyUNIT type.";
static const char __pyx_k_PySVO_COMPRESSION_MODE_LOSSLESS[] = "PySVO_COMPRESSION_MODE_LOSSLESS";
static const char __pyx_k_inverse_triangle_vertices_order[] = "inverse_triangle_vertices_order";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Argument_init_pos_must_be_initia[] = "Argument init_pos must be initialized first with PyTransform().";
static const char __pyx_k_Argument_is_not_of_PyCAMERA_SETT[] = "Argument is not of PyCAMERA_SETTINGS type.";
static const char __pyx_k_Argument_is_not_of_PyPOINT_CLOUD[] = "Argument is not of PyPOINT_CLOUD_FORMAT type.";
static const char __pyx_k_Argument_is_not_of_PyREFERENCE_F[] = "Argument is not of PyREFERENCE_FRAME type.";
static const char __pyx_k_Argument_is_not_of_PySVO_COMPRES[] = "Argument is not of PySVO_COMPRESSION_MODE type.";
static const char __pyx_k_Argument_must_be_of_PyCOORDINATE[] = "Argument must be of PyCOORDINATE_SYSTEM type.";
static const char __pyx_k_Argument_must_be_of_PyDEPTH_MODE[] = "Argument must be of PyDEPTH_MODE type.";
static const char __pyx_k_Argument_must_be_of_PyRESOLUTION[] = "Argument must be of PyRESOLUTION type.";
static const char __pyx_k_Argument_must_be_of_PySENSING_MO[] = "Argument must be of PySENSING_MODE type.";
static const char __pyx_k_Arguments_must_be_of_PyCAMERA_SE[] = "Arguments must be of PyCAMERA_SETTINGS and boolean types.";
static const char __pyx_k_Arguments_must_be_of_PyDEPTH_FOR[] = "Arguments must be of PyDEPTH_FORMAT type and factor not over 65536.";
static const char __pyx_k_Arguments_must_be_of_PyMEASURE_P[] = "Arguments must be of PyMEASURE, PyMEM and integer types.";
static const char __pyx_k_Arguments_must_be_of_PyVIEW_PyME[] = "Arguments must be of PyVIEW, PyMEM and integer types.";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_InitParameters_must_be_initializ[] = "InitParameters must be initialized first with PyInitParameters().";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_RuntimeParameters_must_be_initia[] = "RuntimeParameters must be initialized first with PyRuntimeParameters().";
static const char __pyx_k_SpatialMappingParameters_must_be[] = "SpatialMappingParameters must be initialized first with PySpatialMappingParameters()";
static const char __pyx_k_TrackingParameters_must_be_initi[] = "TrackingParameters must be initialized first with PyTrackingParameters().";
static const char __pyx_k_Tuple_values_must_fit_in_min_and[] = "Tuple values must fit in min and max allowed intervals.";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_Argument_init_pos_must_be_initia;
static PyObject *__pyx_kp_s_Argument_is_not_of_PyCAMERA_SETT;
static PyObject *__pyx_kp_s_Argument_is_not_of_PyPOINT_CLOUD;
static PyObject *__pyx_kp_s_Argument_is_not_of_PyRANGE_type;
static PyObject *__pyx_kp_s_Argument_is_not_of_PyREFERENCE_F;
static PyObject *__pyx_kp_s_Argument_is_not_of_PyRESOLUTION;
static PyObject *__pyx_kp_s_Argument_is_not_of_PySVO_COMPRES;
static PyObject *__pyx_kp_s_Argument_is_not_of_bool_type;
static PyObject *__pyx_kp_s_Argument_is_not_of_boolean_type;
static PyObject *__pyx_kp_s_Argument_is_not_of_right_type;
static PyObject *__pyx_kp_s_Argument_must_be_of_PyCOORDINATE;
static PyObject *__pyx_kp_s_Argument_must_be_of_PyDEPTH_MODE;
static PyObject *__pyx_kp_s_Argument_must_be_of_PyREFERENCE;
static PyObject *__pyx_kp_s_Argument_must_be_of_PyRESOLUTION;
static PyObject *__pyx_kp_s_Argument_must_be_of_PySENSING_MO;
static PyObject *__pyx_kp_s_Argument_must_be_of_PyUNIT_type;
static PyObject *__pyx_kp_s_Arguments_must_be_of_PyCAMERA_SE;
static PyObject *__pyx_kp_s_Arguments_must_be_of_PyDEPTH_FOR;
static PyObject *__pyx_kp_s_Arguments_must_be_of_PyMEASURE_P;
static PyObject *__pyx_kp_s_Arguments_must_be_of_PyVIEW_PyME;
static PyObject *__pyx_n_s_Enum;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_InitParameters_must_be_initializ;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM_IMAGE;
static PyObject *__pyx_n_s_PyDEPTH_FORMAT;
static PyObject *__pyx_n_s_PyDEPTH_MODE;
static PyObject *__pyx_n_s_PyDEPTH_MODE_PERFORMANCE;
static PyObject *__pyx_n_s_PyERROR_CODE;
static PyObject *__pyx_n_s_PyMEASURE;
static PyObject *__pyx_n_s_PyMEASURE_DEPTH;
static PyObject *__pyx_n_s_PyMEM;
static PyObject *__pyx_n_s_PyMEM_CPU;
static PyObject *__pyx_n_s_PyPOINT_CLOUD_FORMAT;
static PyObject *__pyx_n_s_PyRANGE;
static PyObject *__pyx_n_s_PyRANGE_FAR;
static PyObject *__pyx_n_s_PyRANGE_MEDIUM;
static PyObject *__pyx_n_s_PyRANGE_NEAR;
static PyObject *__pyx_n_s_PyREFERENCE_FRAME;
static PyObject *__pyx_n_s_PyREFERENCE_FRAME_CAMERA;
static PyObject *__pyx_n_s_PyREFERENCE_FRAME_WORLD;
static PyObject *__pyx_n_s_PyRESOLUTION;
static PyObject *__pyx_n_s_PyRESOLUTION_HD720;
static PyObject *__pyx_n_s_PyRESOLUTION_HIGH;
static PyObject *__pyx_n_s_PyRESOLUTION_LOW;
static PyObject *__pyx_n_s_PyRESOLUTION_MEDIUM;
static PyObject *__pyx_n_s_PyResolution;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE;
static PyObject *__pyx_n_s_PySENSING_MODE;
static PyObject *__pyx_n_s_PySENSING_MODE_STANDARD;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE;
static PyObject *__pyx_n_s_PySVO_COMPRESSION_MODE;
static PyObject *__pyx_n_s_PySVO_COMPRESSION_MODE_LOSSLESS;
static PyObject *__pyx_n_s_PyTRACKING_STATE;
static PyObject *__pyx_n_s_PyUNIT;
static PyObject *__pyx_n_s_PyUNIT_MILLIMETER;
static PyObject *__pyx_n_s_PyVIEW;
static PyObject *__pyx_n_s_PyVIEW_LEFT;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_RuntimeParameters_must_be_initia;
static PyObject *__pyx_kp_s_SpatialMappingParameters_must_be;
static PyObject *__pyx_kp_s_TrackingParameters_must_be_initi;
static PyObject *__pyx_kp_s_Tuple_values_must_fit_in_min_and;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_n_s__68;
static PyObject *__pyx_n_s_allowed_max;
static PyObject *__pyx_n_s_allowed_min;
static PyObject *__pyx_n_s_area_file_path;
static PyObject *__pyx_n_s_area_path;
static PyObject *__pyx_n_s_average_compression_ratio;
static PyObject *__pyx_n_s_average_compression_time;
static PyObject *__pyx_n_s_camera_buffer_count_linux;
static PyObject *__pyx_n_s_camera_disable_self_calib;
static PyObject *__pyx_n_s_camera_fps;
static PyObject *__pyx_n_s_camera_image_flip;
static PyObject *__pyx_n_s_camera_linux_id;
static PyObject *__pyx_n_s_camera_resolution;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_compression_mode;
static PyObject *__pyx_n_s_coordinate_system;
static PyObject *__pyx_n_s_coordinate_units;
static PyObject *__pyx_n_s_core;
static PyObject *__pyx_n_s_current_compression_ratio;
static PyObject *__pyx_n_s_current_compression_time;
static PyObject *__pyx_n_s_defines;
static PyObject *__pyx_n_s_depth_minimum_distance;
static PyObject *__pyx_n_s_depth_mode;
static PyObject *__pyx_n_s_depth_stabilization;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_enable_depth;
static PyObject *__pyx_n_s_enable_memory;
static PyObject *__pyx_n_s_enable_point_cloud;
static PyObject *__pyx_n_s_enable_right_side_measure;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enum;
static PyObject *__pyx_n_s_factor;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init_pos;
static PyObject *__pyx_n_s_inverse_triangle_vertices_order;
static PyObject *__pyx_n_s_keep_mesh_consistent;
static PyObject *__pyx_n_s_keep_occluded_point;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_memory_usage;
static PyObject *__pyx_n_s_mconfidence;
static PyObject *__pyx_n_s_measure;
static PyObject *__pyx_n_s_measure3D_reference_frame;
static PyObject *__pyx_n_s_mesh;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mtimestamp;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_name_save;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_pose_data;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_py_mat;
static PyObject *__pyx_n_s_py_pose;
static PyObject *__pyx_n_s_pyzed_camera;
static PyObject *__pyx_kp_s_pyzed_camera_pyx;
static PyObject *__pyx_n_s_pyzed_core;
static PyObject *__pyx_n_s_pyzed_defines;
static PyObject *__pyx_n_s_pyzed_mesh;
static PyObject *__pyx_n_s_pyzed_types;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_radian;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reference_frame;
static PyObject *__pyx_n_s_resizer;
static PyObject *__pyx_n_s_resolution;
static PyObject *__pyx_n_s_save_camera_depth_as;
static PyObject *__pyx_n_s_save_camera_point_cloud_as;
static PyObject *__pyx_n_s_save_mat_depth_as;
static PyObject *__pyx_n_s_save_mat_point_cloud_as;
static PyObject *__pyx_n_s_save_texture;
static PyObject *__pyx_n_s_sdk_gpu_id;
static PyObject *__pyx_n_s_sdk_verbose;
static PyObject *__pyx_n_s_sdk_verbose_log_file;
static PyObject *__pyx_n_s_sensing_mode;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_settings;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_s_svo_input_filename;
static PyObject *__pyx_n_s_svo_real_time_mode;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_use_default;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_video_filename;
static PyObject *__pyx_n_s_view;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_with_color;
static PyObject *__pyx_n_s_zed;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_5pyzed_6camera_16PyInitParameters___cinit__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_camera_resolution, PyObject *__pyx_v_camera_fps, PyObject *__pyx_v_camera_linux_id, PyObject *__pyx_v_svo_input_filename, PyObject *__pyx_v_svo_real_time_mode, PyObject *__pyx_v_depth_mode, PyObject *__pyx_v_coordinate_units, PyObject *__pyx_v_coordinate_system, PyObject *__pyx_v_sdk_verbose, PyObject *__pyx_v_sdk_gpu_id, PyObject *__pyx_v_depth_minimum_distance, PyObject *__pyx_v_camera_disable_self_calib, PyObject *__pyx_v_camera_image_flip, PyObject *__pyx_v_enable_right_side_measure, PyObject *__pyx_v_camera_buffer_count_linux, PyObject *__pyx_v_sdk_verbose_log_file, PyObject *__pyx_v_depth_stabilization); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_2save(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_4load(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_resolution___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_resolution_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_10camera_fps___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_10camera_fps_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_15camera_linux_id___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_15camera_linux_id_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_input_filename___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_input_filename_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_10depth_mode___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_10depth_mode_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_16coordinate_units___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_16coordinate_units_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_17coordinate_system___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_17coordinate_system_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_11sdk_verbose___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_11sdk_verbose_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_image_flip___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_image_flip_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_19depth_stabilization___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_16PyInitParameters_19depth_stabilization_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_6camera_19PyRuntimeParameters___cinit__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_sensing_mode, PyObject *__pyx_v_enable_depth, PyObject *__pyx_v_enable_point_cloud, PyObject *__pyx_v_measure3D_reference_frame); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_2save(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_4load(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode___get__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_2__set__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12enable_depth___get__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_2__set__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame___get__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_2__set__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_6camera_20PyTrackingParameters___cinit__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_init_pos, PyObject *__pyx_v__enable_memory, PyObject *__pyx_v__area_path); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_2save(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_4load(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_6initial_world_transform(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_init_pos); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_8set_initial_world_transform(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory___get__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_2__set__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_14area_file_path___get__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_20PyTrackingParameters_14area_file_path_2__set__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters___cinit__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_resolution, PyObject *__pyx_v_range, PyObject *__pyx_v_max_memory_usage, PyObject *__pyx_v_save_texture, PyObject *__pyx_v_keep_mesh_consistent, PyObject *__pyx_v_inverse_triangle_vertices_order); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_2get_resolution(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_resolution); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_4set_resolution(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_resolution); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_6get_range(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_8set_range(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12save_texture___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11allowed_min___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11allowed_max___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11range_meter___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_18allowed_resolution___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_6camera_6PyPose___cinit__(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_2init_pose(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_pose); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_4init_transform(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_pose_data, PyObject *__pyx_v_mtimestamp, PyObject *__pyx_v_mconfidence); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_6get_translation(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_py_translation); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_8get_orientation(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_py_orientation); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_10get_rotation_matrix(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_py_rotation); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_12get_rotation_vector(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_14get_euler_angles(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, PyObject *__pyx_v_radian); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_5valid___get__(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_9timestamp___get__(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_16pose_data(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_pose_data); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_15pose_confidence___get__(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_6camera_11PyZEDCamera___cinit__(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_2close(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_4open(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_py_init); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_6is_opened(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_8grab(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_py_runtime); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_10retrieve_image(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, PyObject *__pyx_v_view, PyObject *__pyx_v_type, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_12retrieve_measure(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, PyObject *__pyx_v_measure, PyObject *__pyx_v_type, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_14set_confidence_threshold(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, int __pyx_v_conf_treshold_value); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_16get_confidence_threshold(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_18get_resolution(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_20set_depth_max_range_value(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, float __pyx_v_depth_max_range); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_22get_depth_max_range_value(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_24get_depth_min_range_value(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_26set_svo_position(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, int __pyx_v_frame_number); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_28get_svo_position(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_30get_svo_number_of_frames(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_32set_camera_settings(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_settings, int __pyx_v_value, PyObject *__pyx_v_use_default); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_34get_camera_settings(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_setting); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_36get_camera_fps(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_38set_camera_fps(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, int __pyx_v_desired_fps); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_40get_current_fps(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_42get_camera_timestamp(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_44get_current_timestamp(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_46get_frame_dropped_count(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_48get_camera_information(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_resizer); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_50get_self_calibration_state(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_52reset_self_calibration(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_54enable_tracking(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_py_tracking); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_56get_position(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_py_pose, PyObject *__pyx_v_reference_frame); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_58get_area_export_state(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_60disable_tracking(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_area_file_path); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_62reset_tracking(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_64enable_spatial_mapping(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_py_spatial); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_66pause_spatial_mapping(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_status); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_68get_spatial_mapping_state(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_70extract_whole_mesh(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4mesh_PyMesh *__pyx_v_py_mesh); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_72request_mesh_async(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_74get_mesh_request_status_async(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_76retrieve_mesh_async(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4mesh_PyMesh *__pyx_v_py_mesh); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_78disable_spatial_mapping(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_80enable_recording(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_video_filename, PyObject *__pyx_v_compression_mode); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_82record(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_84disable_recording(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_86get_sdk_version(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_88is_zed_connected(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_90stickto_cpu_core(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, int __pyx_v_cpu_core); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_92__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_94__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_save_camera_depth_as(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_zed, PyObject *__pyx_v_format, PyObject *__pyx_v_name, PyObject *__pyx_v_factor); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_2save_camera_point_cloud_as(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_zed, PyObject *__pyx_v_format, PyObject *__pyx_v_name, PyObject *__pyx_v_with_color, PyObject *__pyx_v_keep_occluded_point); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_4save_mat_depth_as(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, PyObject *__pyx_v_format, PyObject *__pyx_v_name, PyObject *__pyx_v_factor); /* proto */
static PyObject *__pyx_pf_5pyzed_6camera_6save_mat_point_cloud_as(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, PyObject *__pyx_v_format, PyObject *__pyx_v_name, PyObject *__pyx_v_with_color, PyObject *__pyx_v_keep_occluded_point); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5pyzed_6camera_PyZEDCamera(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_6camera_PyInitParameters(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_6camera_PyRuntimeParameters(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_6camera_PyTrackingParameters(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_6camera_PySpatialMappingParameters(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_6camera_PyPose(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_neg_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_2048;
static PyObject *__pyx_int_65536;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k_;
static PyObject *__pyx_k__3;
static PyObject *__pyx_k__4;
static PyObject *__pyx_k__5;
static PyObject *__pyx_k__13;
static PyObject *__pyx_k__14;
static PyObject *__pyx_k__22;
static PyObject *__pyx_k__23;
static PyObject *__pyx_k__24;
static PyObject *__pyx_k__26;
static PyObject *__pyx_k__28;
static PyObject *__pyx_k__30;
static PyObject *__pyx_k__39;
static PyObject *__pyx_k__40;
static PyObject *__pyx_k__42;
static PyObject *__pyx_k__43;
static PyObject *__pyx_k__47;
static PyObject *__pyx_k__48;
static PyObject *__pyx_k__51;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;

/* "pyzed/camera.pyx":50
 * cdef class PyInitParameters:
 *     cdef InitParameters* init
 *     def __cinit__(self, camera_resolution=defines.PyRESOLUTION.PyRESOLUTION_HD720, camera_fps=0,             # <<<<<<<<<<<<<<
 *                   camera_linux_id=0, svo_input_filename="", svo_real_time_mode=False,
 *                   depth_mode=defines.PyDEPTH_MODE.PyDEPTH_MODE_PERFORMANCE,
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_camera_resolution = 0;
  PyObject *__pyx_v_camera_fps = 0;
  PyObject *__pyx_v_camera_linux_id = 0;
  PyObject *__pyx_v_svo_input_filename = 0;
  PyObject *__pyx_v_svo_real_time_mode = 0;
  PyObject *__pyx_v_depth_mode = 0;
  PyObject *__pyx_v_coordinate_units = 0;
  PyObject *__pyx_v_coordinate_system = 0;
  PyObject *__pyx_v_sdk_verbose = 0;
  PyObject *__pyx_v_sdk_gpu_id = 0;
  PyObject *__pyx_v_depth_minimum_distance = 0;
  PyObject *__pyx_v_camera_disable_self_calib = 0;
  PyObject *__pyx_v_camera_image_flip = 0;
  PyObject *__pyx_v_enable_right_side_measure = 0;
  PyObject *__pyx_v_camera_buffer_count_linux = 0;
  PyObject *__pyx_v_sdk_verbose_log_file = 0;
  PyObject *__pyx_v_depth_stabilization = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_camera_resolution,&__pyx_n_s_camera_fps,&__pyx_n_s_camera_linux_id,&__pyx_n_s_svo_input_filename,&__pyx_n_s_svo_real_time_mode,&__pyx_n_s_depth_mode,&__pyx_n_s_coordinate_units,&__pyx_n_s_coordinate_system,&__pyx_n_s_sdk_verbose,&__pyx_n_s_sdk_gpu_id,&__pyx_n_s_depth_minimum_distance,&__pyx_n_s_camera_disable_self_calib,&__pyx_n_s_camera_image_flip,&__pyx_n_s_enable_right_side_measure,&__pyx_n_s_camera_buffer_count_linux,&__pyx_n_s_sdk_verbose_log_file,&__pyx_n_s_depth_stabilization,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = __pyx_k_;
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    values[3] = ((PyObject *)__pyx_kp_s__2);

    /* "pyzed/camera.pyx":51
 *     cdef InitParameters* init
 *     def __cinit__(self, camera_resolution=defines.PyRESOLUTION.PyRESOLUTION_HD720, camera_fps=0,
 *                   camera_linux_id=0, svo_input_filename="", svo_real_time_mode=False,             # <<<<<<<<<<<<<<
 *                   depth_mode=defines.PyDEPTH_MODE.PyDEPTH_MODE_PERFORMANCE,
 *                   coordinate_units=defines.PyUNIT.PyUNIT_MILLIMETER,
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = __pyx_k__3;
    values[6] = __pyx_k__4;
    values[7] = __pyx_k__5;

    /* "pyzed/camera.pyx":55
 *                   coordinate_units=defines.PyUNIT.PyUNIT_MILLIMETER,
 *                   coordinate_system=defines.PyCOORDINATE_SYSTEM.PyCOORDINATE_SYSTEM_IMAGE,
 *                   sdk_verbose=False, sdk_gpu_id=-1, depth_minimum_distance=-1.0, camera_disable_self_calib=False,             # <<<<<<<<<<<<<<
 *                   camera_image_flip=False, enable_right_side_measure=False, camera_buffer_count_linux=4,
 *                   sdk_verbose_log_file="", depth_stabilization=True):
 */
    values[8] = ((PyObject *)Py_False);
    values[9] = ((PyObject *)__pyx_int_neg_1);
    values[10] = ((PyObject *)__pyx_float_neg_1_0);
    values[11] = ((PyObject *)Py_False);

    /* "pyzed/camera.pyx":56
 *                   coordinate_system=defines.PyCOORDINATE_SYSTEM.PyCOORDINATE_SYSTEM_IMAGE,
 *                   sdk_verbose=False, sdk_gpu_id=-1, depth_minimum_distance=-1.0, camera_disable_self_calib=False,
 *                   camera_image_flip=False, enable_right_side_measure=False, camera_buffer_count_linux=4,             # <<<<<<<<<<<<<<
 *                   sdk_verbose_log_file="", depth_stabilization=True):
 *         if (isinstance(camera_resolution, defines.PyRESOLUTION) and isinstance(camera_fps, int) and
 */
    values[12] = ((PyObject *)Py_False);
    values[13] = ((PyObject *)Py_False);
    values[14] = ((PyObject *)__pyx_int_4);
    values[15] = ((PyObject *)__pyx_kp_s__2);

    /* "pyzed/camera.pyx":57
 *                   sdk_verbose=False, sdk_gpu_id=-1, depth_minimum_distance=-1.0, camera_disable_self_calib=False,
 *                   camera_image_flip=False, enable_right_side_measure=False, camera_buffer_count_linux=4,
 *                   sdk_verbose_log_file="", depth_stabilization=True):             # <<<<<<<<<<<<<<
 *         if (isinstance(camera_resolution, defines.PyRESOLUTION) and isinstance(camera_fps, int) and
 *             isinstance(camera_linux_id, int) and isinstance(svo_input_filename, str) and
 */
    values[16] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_camera_resolution);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_camera_fps);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_camera_linux_id);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_svo_input_filename);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_svo_real_time_mode);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth_mode);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coordinate_units);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coordinate_system);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdk_verbose);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdk_gpu_id);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth_minimum_distance);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_camera_disable_self_calib);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_camera_image_flip);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enable_right_side_measure);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_camera_buffer_count_linux);
          if (value) { values[14] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sdk_verbose_log_file);
          if (value) { values[15] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth_stabilization);
          if (value) { values[16] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 50, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_camera_resolution = values[0];
    __pyx_v_camera_fps = values[1];
    __pyx_v_camera_linux_id = values[2];
    __pyx_v_svo_input_filename = values[3];
    __pyx_v_svo_real_time_mode = values[4];
    __pyx_v_depth_mode = values[5];
    __pyx_v_coordinate_units = values[6];
    __pyx_v_coordinate_system = values[7];
    __pyx_v_sdk_verbose = values[8];
    __pyx_v_sdk_gpu_id = values[9];
    __pyx_v_depth_minimum_distance = values[10];
    __pyx_v_camera_disable_self_calib = values[11];
    __pyx_v_camera_image_flip = values[12];
    __pyx_v_enable_right_side_measure = values[13];
    __pyx_v_camera_buffer_count_linux = values[14];
    __pyx_v_sdk_verbose_log_file = values[15];
    __pyx_v_depth_stabilization = values[16];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 50, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters___cinit__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), __pyx_v_camera_resolution, __pyx_v_camera_fps, __pyx_v_camera_linux_id, __pyx_v_svo_input_filename, __pyx_v_svo_real_time_mode, __pyx_v_depth_mode, __pyx_v_coordinate_units, __pyx_v_coordinate_system, __pyx_v_sdk_verbose, __pyx_v_sdk_gpu_id, __pyx_v_depth_minimum_distance, __pyx_v_camera_disable_self_calib, __pyx_v_camera_image_flip, __pyx_v_enable_right_side_measure, __pyx_v_camera_buffer_count_linux, __pyx_v_sdk_verbose_log_file, __pyx_v_depth_stabilization);

  /* "pyzed/camera.pyx":50
 * cdef class PyInitParameters:
 *     cdef InitParameters* init
 *     def __cinit__(self, camera_resolution=defines.PyRESOLUTION.PyRESOLUTION_HD720, camera_fps=0,             # <<<<<<<<<<<<<<
 *                   camera_linux_id=0, svo_input_filename="", svo_real_time_mode=False,
 *                   depth_mode=defines.PyDEPTH_MODE.PyDEPTH_MODE_PERFORMANCE,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters___cinit__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_camera_resolution, PyObject *__pyx_v_camera_fps, PyObject *__pyx_v_camera_linux_id, PyObject *__pyx_v_svo_input_filename, PyObject *__pyx_v_svo_real_time_mode, PyObject *__pyx_v_depth_mode, PyObject *__pyx_v_coordinate_units, PyObject *__pyx_v_coordinate_system, PyObject *__pyx_v_sdk_verbose, PyObject *__pyx_v_sdk_gpu_id, PyObject *__pyx_v_depth_minimum_distance, PyObject *__pyx_v_camera_disable_self_calib, PyObject *__pyx_v_camera_image_flip, PyObject *__pyx_v_enable_right_side_measure, PyObject *__pyx_v_camera_buffer_count_linux, PyObject *__pyx_v_sdk_verbose_log_file, PyObject *__pyx_v_depth_stabilization) {
  PyObject *__pyx_v_filename = NULL;
  PyObject *__pyx_v_filelog = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  sl::RESOLUTION __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  char *__pyx_t_10;
  bool __pyx_t_11;
  sl::DEPTH_MODE __pyx_t_12;
  sl::UNIT __pyx_t_13;
  sl::COORDINATE_SYSTEM __pyx_t_14;
  bool __pyx_t_15;
  int __pyx_t_16;
  float __pyx_t_17;
  bool __pyx_t_18;
  bool __pyx_t_19;
  bool __pyx_t_20;
  int __pyx_t_21;
  char *__pyx_t_22;
  bool __pyx_t_23;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/camera.pyx":58
 *                   camera_image_flip=False, enable_right_side_measure=False, camera_buffer_count_linux=4,
 *                   sdk_verbose_log_file="", depth_stabilization=True):
 *         if (isinstance(camera_resolution, defines.PyRESOLUTION) and isinstance(camera_fps, int) and             # <<<<<<<<<<<<<<
 *             isinstance(camera_linux_id, int) and isinstance(svo_input_filename, str) and
 *             isinstance(svo_real_time_mode, bool) and isinstance(depth_mode, defines.PyDEPTH_MODE) and
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_camera_resolution, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyInt_Check(__pyx_v_camera_fps); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":59
 *                   sdk_verbose_log_file="", depth_stabilization=True):
 *         if (isinstance(camera_resolution, defines.PyRESOLUTION) and isinstance(camera_fps, int) and
 *             isinstance(camera_linux_id, int) and isinstance(svo_input_filename, str) and             # <<<<<<<<<<<<<<
 *             isinstance(svo_real_time_mode, bool) and isinstance(depth_mode, defines.PyDEPTH_MODE) and
 *             isinstance(coordinate_units, defines.PyUNIT) and
 */
  __pyx_t_4 = PyInt_Check(__pyx_v_camera_linux_id); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyString_Check(__pyx_v_svo_input_filename); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":60
 *         if (isinstance(camera_resolution, defines.PyRESOLUTION) and isinstance(camera_fps, int) and
 *             isinstance(camera_linux_id, int) and isinstance(svo_input_filename, str) and
 *             isinstance(svo_real_time_mode, bool) and isinstance(depth_mode, defines.PyDEPTH_MODE) and             # <<<<<<<<<<<<<<
 *             isinstance(coordinate_units, defines.PyUNIT) and
 *             isinstance(coordinate_system, defines.PyCOORDINATE_SYSTEM) and isinstance(sdk_verbose, bool) and
 */
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_svo_real_time_mode, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyDEPTH_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_depth_mode, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":61
 *             isinstance(camera_linux_id, int) and isinstance(svo_input_filename, str) and
 *             isinstance(svo_real_time_mode, bool) and isinstance(depth_mode, defines.PyDEPTH_MODE) and
 *             isinstance(coordinate_units, defines.PyUNIT) and             # <<<<<<<<<<<<<<
 *             isinstance(coordinate_system, defines.PyCOORDINATE_SYSTEM) and isinstance(sdk_verbose, bool) and
 *             isinstance(sdk_gpu_id, int) and isinstance(depth_minimum_distance, float) and
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyUNIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_coordinate_units, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":62
 *             isinstance(svo_real_time_mode, bool) and isinstance(depth_mode, defines.PyDEPTH_MODE) and
 *             isinstance(coordinate_units, defines.PyUNIT) and
 *             isinstance(coordinate_system, defines.PyCOORDINATE_SYSTEM) and isinstance(sdk_verbose, bool) and             # <<<<<<<<<<<<<<
 *             isinstance(sdk_gpu_id, int) and isinstance(depth_minimum_distance, float) and
 *             isinstance(camera_disable_self_calib, bool) and isinstance(camera_image_flip, bool) and
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyCOORDINATE_SYSTEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_coordinate_system, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_sdk_verbose, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":63
 *             isinstance(coordinate_units, defines.PyUNIT) and
 *             isinstance(coordinate_system, defines.PyCOORDINATE_SYSTEM) and isinstance(sdk_verbose, bool) and
 *             isinstance(sdk_gpu_id, int) and isinstance(depth_minimum_distance, float) and             # <<<<<<<<<<<<<<
 *             isinstance(camera_disable_self_calib, bool) and isinstance(camera_image_flip, bool) and
 *             isinstance(enable_right_side_measure, bool) and isinstance(camera_buffer_count_linux, int) and
 */
  __pyx_t_5 = PyInt_Check(__pyx_v_sdk_gpu_id); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_depth_minimum_distance); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":64
 *             isinstance(coordinate_system, defines.PyCOORDINATE_SYSTEM) and isinstance(sdk_verbose, bool) and
 *             isinstance(sdk_gpu_id, int) and isinstance(depth_minimum_distance, float) and
 *             isinstance(camera_disable_self_calib, bool) and isinstance(camera_image_flip, bool) and             # <<<<<<<<<<<<<<
 *             isinstance(enable_right_side_measure, bool) and isinstance(camera_buffer_count_linux, int) and
 *             isinstance(sdk_verbose_log_file, str) and isinstance(depth_stabilization, bool)):
 */
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_camera_disable_self_calib, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_camera_image_flip, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":65
 *             isinstance(sdk_gpu_id, int) and isinstance(depth_minimum_distance, float) and
 *             isinstance(camera_disable_self_calib, bool) and isinstance(camera_image_flip, bool) and
 *             isinstance(enable_right_side_measure, bool) and isinstance(camera_buffer_count_linux, int) and             # <<<<<<<<<<<<<<
 *             isinstance(sdk_verbose_log_file, str) and isinstance(depth_stabilization, bool)):
 * 
 */
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_enable_right_side_measure, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyInt_Check(__pyx_v_camera_buffer_count_linux); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":66
 *             isinstance(camera_disable_self_calib, bool) and isinstance(camera_image_flip, bool) and
 *             isinstance(enable_right_side_measure, bool) and isinstance(camera_buffer_count_linux, int) and
 *             isinstance(sdk_verbose_log_file, str) and isinstance(depth_stabilization, bool)):             # <<<<<<<<<<<<<<
 * 
 *             filename = svo_input_filename.encode()
 */
  __pyx_t_5 = PyString_Check(__pyx_v_sdk_verbose_log_file); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_depth_stabilization, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;

  /* "pyzed/camera.pyx":58
 *                   camera_image_flip=False, enable_right_side_measure=False, camera_buffer_count_linux=4,
 *                   sdk_verbose_log_file="", depth_stabilization=True):
 *         if (isinstance(camera_resolution, defines.PyRESOLUTION) and isinstance(camera_fps, int) and             # <<<<<<<<<<<<<<
 *             isinstance(camera_linux_id, int) and isinstance(svo_input_filename, str) and
 *             isinstance(svo_real_time_mode, bool) and isinstance(depth_mode, defines.PyDEPTH_MODE) and
 */
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":68
 *             isinstance(sdk_verbose_log_file, str) and isinstance(depth_stabilization, bool)):
 * 
 *             filename = svo_input_filename.encode()             # <<<<<<<<<<<<<<
 *             filelog = sdk_verbose_log_file.encode()
 *             self.init = new InitParameters(camera_resolution.value, camera_fps, camera_linux_id,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_svo_input_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_filename = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pyzed/camera.pyx":69
 * 
 *             filename = svo_input_filename.encode()
 *             filelog = sdk_verbose_log_file.encode()             # <<<<<<<<<<<<<<
 *             self.init = new InitParameters(camera_resolution.value, camera_fps, camera_linux_id,
 *                                            types.String(<char*> filename), svo_real_time_mode, depth_mode.value,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sdk_verbose_log_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_filelog = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pyzed/camera.pyx":70
 *             filename = svo_input_filename.encode()
 *             filelog = sdk_verbose_log_file.encode()
 *             self.init = new InitParameters(camera_resolution.value, camera_fps, camera_linux_id,             # <<<<<<<<<<<<<<
 *                                            types.String(<char*> filename), svo_real_time_mode, depth_mode.value,
 *                                            coordinate_units.value, coordinate_system.value, sdk_verbose, sdk_gpu_id,
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_camera_resolution, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = ((sl::RESOLUTION)__Pyx_PyInt_As_sl_3a__3a_RESOLUTION(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_camera_fps); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 70, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_camera_linux_id); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 70, __pyx_L1_error)

    /* "pyzed/camera.pyx":71
 *             filelog = sdk_verbose_log_file.encode()
 *             self.init = new InitParameters(camera_resolution.value, camera_fps, camera_linux_id,
 *                                            types.String(<char*> filename), svo_real_time_mode, depth_mode.value,             # <<<<<<<<<<<<<<
 *                                            coordinate_units.value, coordinate_system.value, sdk_verbose, sdk_gpu_id,
 *                                            depth_minimum_distance, camera_disable_self_calib, camera_image_flip,
 */
    __pyx_t_10 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_svo_real_time_mode); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_depth_mode, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = ((sl::DEPTH_MODE)__Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyzed/camera.pyx":72
 *             self.init = new InitParameters(camera_resolution.value, camera_fps, camera_linux_id,
 *                                            types.String(<char*> filename), svo_real_time_mode, depth_mode.value,
 *                                            coordinate_units.value, coordinate_system.value, sdk_verbose, sdk_gpu_id,             # <<<<<<<<<<<<<<
 *                                            depth_minimum_distance, camera_disable_self_calib, camera_image_flip,
 *                                            enable_right_side_measure, camera_buffer_count_linux,
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_coordinate_units, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = ((sl::UNIT)__Pyx_PyInt_As_sl_3a__3a_UNIT(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_coordinate_system, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = ((sl::COORDINATE_SYSTEM)__Pyx_PyInt_As_sl_3a__3a_COORDINATE_SYSTEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_sdk_verbose); if (unlikely((__pyx_t_15 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_sdk_gpu_id); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)

    /* "pyzed/camera.pyx":73
 *                                            types.String(<char*> filename), svo_real_time_mode, depth_mode.value,
 *                                            coordinate_units.value, coordinate_system.value, sdk_verbose, sdk_gpu_id,
 *                                            depth_minimum_distance, camera_disable_self_calib, camera_image_flip,             # <<<<<<<<<<<<<<
 *                                            enable_right_side_measure, camera_buffer_count_linux,
 *                                            types.String(<char*> filelog), depth_stabilization)
 */
    __pyx_t_17 = __pyx_PyFloat_AsFloat(__pyx_v_depth_minimum_distance); if (unlikely((__pyx_t_17 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)
    __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_camera_disable_self_calib); if (unlikely((__pyx_t_18 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)
    __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_v_camera_image_flip); if (unlikely((__pyx_t_19 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)

    /* "pyzed/camera.pyx":74
 *                                            coordinate_units.value, coordinate_system.value, sdk_verbose, sdk_gpu_id,
 *                                            depth_minimum_distance, camera_disable_self_calib, camera_image_flip,
 *                                            enable_right_side_measure, camera_buffer_count_linux,             # <<<<<<<<<<<<<<
 *                                            types.String(<char*> filelog), depth_stabilization)
 *         else:
 */
    __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_v_enable_right_side_measure); if (unlikely((__pyx_t_20 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 74, __pyx_L1_error)
    __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_v_camera_buffer_count_linux); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 74, __pyx_L1_error)

    /* "pyzed/camera.pyx":75
 *                                            depth_minimum_distance, camera_disable_self_calib, camera_image_flip,
 *                                            enable_right_side_measure, camera_buffer_count_linux,
 *                                            types.String(<char*> filelog), depth_stabilization)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of right type.")
 */
    __pyx_t_22 = __Pyx_PyObject_AsWritableString(__pyx_v_filelog); if (unlikely((!__pyx_t_22) && PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_depth_stabilization); if (unlikely((__pyx_t_23 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)

    /* "pyzed/camera.pyx":70
 *             filename = svo_input_filename.encode()
 *             filelog = sdk_verbose_log_file.encode()
 *             self.init = new InitParameters(camera_resolution.value, camera_fps, camera_linux_id,             # <<<<<<<<<<<<<<
 *                                            types.String(<char*> filename), svo_real_time_mode, depth_mode.value,
 *                                            coordinate_units.value, coordinate_system.value, sdk_verbose, sdk_gpu_id,
 */
    __pyx_v_self->init = new sl::InitParameters(__pyx_t_7, __pyx_t_8, __pyx_t_9, sl::String(((char *)__pyx_t_10)), __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, sl::String(((char *)__pyx_t_22)), __pyx_t_23);

    /* "pyzed/camera.pyx":58
 *                   camera_image_flip=False, enable_right_side_measure=False, camera_buffer_count_linux=4,
 *                   sdk_verbose_log_file="", depth_stabilization=True):
 *         if (isinstance(camera_resolution, defines.PyRESOLUTION) and isinstance(camera_fps, int) and             # <<<<<<<<<<<<<<
 *             isinstance(camera_linux_id, int) and isinstance(svo_input_filename, str) and
 *             isinstance(svo_real_time_mode, bool) and isinstance(depth_mode, defines.PyDEPTH_MODE) and
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":77
 *                                            types.String(<char*> filelog), depth_stabilization)
 *         else:
 *             raise TypeError("Argument is not of right type.")             # <<<<<<<<<<<<<<
 * 
 *     def save(self, str filename):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 77, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":50
 * cdef class PyInitParameters:
 *     cdef InitParameters* init
 *     def __cinit__(self, camera_resolution=defines.PyRESOLUTION.PyRESOLUTION_HD720, camera_fps=0,             # <<<<<<<<<<<<<<
 *                   camera_linux_id=0, svo_input_filename="", svo_real_time_mode=False,
 *                   depth_mode=defines.PyDEPTH_MODE.PyDEPTH_MODE_PERFORMANCE,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_filelog);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":79
 *             raise TypeError("Argument is not of right type.")
 * 
 *     def save(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_save = filename.encode()
 *         return self.init.save(types.String(<char*> filename_save))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_3save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzed_6camera_16PyInitParameters_2save[] = "PyInitParameters.save(self, str filename)";
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_3save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_2save(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_2save(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_save = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("save", 0);

  /* "pyzed/camera.pyx":80
 * 
 *     def save(self, str filename):
 *         filename_save = filename.encode()             # <<<<<<<<<<<<<<
 *         return self.init.save(types.String(<char*> filename_save))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_save = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":81
 *     def save(self, str filename):
 *         filename_save = filename.encode()
 *         return self.init.save(types.String(<char*> filename_save))             # <<<<<<<<<<<<<<
 * 
 *     def load(self, str filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_save); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->init->save(sl::String(((char *)__pyx_t_4)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":79
 *             raise TypeError("Argument is not of right type.")
 * 
 *     def save(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_save = filename.encode()
 *         return self.init.save(types.String(<char*> filename_save))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_save);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":83
 *         return self.init.save(types.String(<char*> filename_save))
 * 
 *     def load(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_load = filename.encode()
 *         return self.init.load(types.String(<char*> filename_load))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzed_6camera_16PyInitParameters_4load[] = "PyInitParameters.load(self, str filename)";
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 83, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_4load(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_4load(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_load = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("load", 0);

  /* "pyzed/camera.pyx":84
 * 
 *     def load(self, str filename):
 *         filename_load = filename.encode()             # <<<<<<<<<<<<<<
 *         return self.init.load(types.String(<char*> filename_load))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_load = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":85
 *     def load(self, str filename):
 *         filename_load = filename.encode()
 *         return self.init.load(types.String(<char*> filename_load))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_load); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->init->load(sl::String(((char *)__pyx_t_4)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":83
 *         return self.init.save(types.String(<char*> filename_save))
 * 
 *     def load(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_load = filename.encode()
 *         return self.init.load(types.String(<char*> filename_load))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_load);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":88
 * 
 *     @property
 *     def camera_resolution(self):             # <<<<<<<<<<<<<<
 *         return defines.PyRESOLUTION(self.init.camera_resolution)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_resolution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_resolution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_resolution___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_resolution___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":89
 *     @property
 *     def camera_resolution(self):
 *         return defines.PyRESOLUTION(self.init.camera_resolution)             # <<<<<<<<<<<<<<
 * 
 *     @camera_resolution.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(__pyx_v_self->init->camera_resolution); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":88
 * 
 *     @property
 *     def camera_resolution(self):             # <<<<<<<<<<<<<<
 *         return defines.PyRESOLUTION(self.init.camera_resolution)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_resolution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":92
 * 
 *     @camera_resolution.setter
 *     def camera_resolution(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyRESOLUTION):
 *             self.init.camera_resolution = value.value
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_resolution_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_resolution_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_resolution_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_resolution_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  sl::RESOLUTION __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":93
 *     @camera_resolution.setter
 *     def camera_resolution(self, value):
 *         if isinstance(value, defines.PyRESOLUTION):             # <<<<<<<<<<<<<<
 *             self.init.camera_resolution = value.value
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":94
 *     def camera_resolution(self, value):
 *         if isinstance(value, defines.PyRESOLUTION):
 *             self.init.camera_resolution = value.value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument must be of PyRESOLUTION type.")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((sl::RESOLUTION)__Pyx_PyInt_As_sl_3a__3a_RESOLUTION(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->init->camera_resolution = __pyx_t_5;

    /* "pyzed/camera.pyx":93
 *     @camera_resolution.setter
 *     def camera_resolution(self, value):
 *         if isinstance(value, defines.PyRESOLUTION):             # <<<<<<<<<<<<<<
 *             self.init.camera_resolution = value.value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":96
 *             self.init.camera_resolution = value.value
 *         else:
 *             raise TypeError("Argument must be of PyRESOLUTION type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 96, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":92
 * 
 *     @camera_resolution.setter
 *     def camera_resolution(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyRESOLUTION):
 *             self.init.camera_resolution = value.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_resolution.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":99
 * 
 *     @property
 *     def camera_fps(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_fps
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_10camera_fps_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_10camera_fps_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_10camera_fps___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_10camera_fps___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":100
 *     @property
 *     def camera_fps(self):
 *         return self.init.camera_fps             # <<<<<<<<<<<<<<
 * 
 *     @camera_fps.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->init->camera_fps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":99
 * 
 *     @property
 *     def camera_fps(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_fps
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_fps.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":103
 * 
 *     @camera_fps.setter
 *     def camera_fps(self, int value):             # <<<<<<<<<<<<<<
 *         self.init.camera_fps = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_10camera_fps_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_10camera_fps_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_fps.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_10camera_fps_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_10camera_fps_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":104
 *     @camera_fps.setter
 *     def camera_fps(self, int value):
 *         self.init.camera_fps = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->init->camera_fps = __pyx_v_value;

  /* "pyzed/camera.pyx":103
 * 
 *     @camera_fps.setter
 *     def camera_fps(self, int value):             # <<<<<<<<<<<<<<
 *         self.init.camera_fps = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":107
 * 
 *     @property
 *     def camera_linux_id(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_linux_id
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_15camera_linux_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_15camera_linux_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_15camera_linux_id___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_15camera_linux_id___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":108
 *     @property
 *     def camera_linux_id(self):
 *         return self.init.camera_linux_id             # <<<<<<<<<<<<<<
 * 
 *     @camera_linux_id.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->init->camera_linux_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":107
 * 
 *     @property
 *     def camera_linux_id(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_linux_id
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_linux_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":111
 * 
 *     @camera_linux_id.setter
 *     def camera_linux_id(self, int value):             # <<<<<<<<<<<<<<
 *         self.init.camera_linux_id = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_15camera_linux_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_15camera_linux_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_linux_id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_15camera_linux_id_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_15camera_linux_id_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":112
 *     @camera_linux_id.setter
 *     def camera_linux_id(self, int value):
 *         self.init.camera_linux_id = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->init->camera_linux_id = __pyx_v_value;

  /* "pyzed/camera.pyx":111
 * 
 *     @camera_linux_id.setter
 *     def camera_linux_id(self, int value):             # <<<<<<<<<<<<<<
 *         self.init.camera_linux_id = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":115
 * 
 *     @property
 *     def svo_input_filename(self):             # <<<<<<<<<<<<<<
 *         if not self.init.svo_input_filename.empty():
 *             return self.init.svo_input_filename.get().decode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_input_filename_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_input_filename_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_input_filename___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_input_filename___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":116
 *     @property
 *     def svo_input_filename(self):
 *         if not self.init.svo_input_filename.empty():             # <<<<<<<<<<<<<<
 *             return self.init.svo_input_filename.get().decode()
 *         else:
 */
  __pyx_t_1 = ((!(__pyx_v_self->init->svo_input_filename.empty() != 0)) != 0);
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":117
 *     def svo_input_filename(self):
 *         if not self.init.svo_input_filename.empty():
 *             return self.init.svo_input_filename.get().decode()             # <<<<<<<<<<<<<<
 *         else:
 *             return ""
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->init->svo_input_filename.get();
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_t_2, 0, strlen(__pyx_t_2), NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":116
 *     @property
 *     def svo_input_filename(self):
 *         if not self.init.svo_input_filename.empty():             # <<<<<<<<<<<<<<
 *             return self.init.svo_input_filename.get().decode()
 *         else:
 */
  }

  /* "pyzed/camera.pyx":119
 *             return self.init.svo_input_filename.get().decode()
 *         else:
 *             return ""             # <<<<<<<<<<<<<<
 * 
 *     @svo_input_filename.setter
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_r = __pyx_kp_s__2;
    goto __pyx_L0;
  }

  /* "pyzed/camera.pyx":115
 * 
 *     @property
 *     def svo_input_filename(self):             # <<<<<<<<<<<<<<
 *         if not self.init.svo_input_filename.empty():
 *             return self.init.svo_input_filename.get().decode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.svo_input_filename.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":122
 * 
 *     @svo_input_filename.setter
 *     def svo_input_filename(self, str value):             # <<<<<<<<<<<<<<
 *         value_filename = value.encode()
 *         self.init.svo_input_filename.set(<char*>value_filename)
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_input_filename_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_input_filename_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_input_filename_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_input_filename_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_value_filename = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":123
 *     @svo_input_filename.setter
 *     def svo_input_filename(self, str value):
 *         value_filename = value.encode()             # <<<<<<<<<<<<<<
 *         self.init.svo_input_filename.set(<char*>value_filename)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_value_filename = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":124
 *     def svo_input_filename(self, str value):
 *         value_filename = value.encode()
 *         self.init.svo_input_filename.set(<char*>value_filename)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_value_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_v_self->init->svo_input_filename.set(((char *)__pyx_t_4));

  /* "pyzed/camera.pyx":122
 * 
 *     @svo_input_filename.setter
 *     def svo_input_filename(self, str value):             # <<<<<<<<<<<<<<
 *         value_filename = value.encode()
 *         self.init.svo_input_filename.set(<char*>value_filename)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.svo_input_filename.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value_filename);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":127
 * 
 *     @property
 *     def svo_real_time_mode(self):             # <<<<<<<<<<<<<<
 *         return self.init.svo_real_time_mode
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":128
 *     @property
 *     def svo_real_time_mode(self):
 *         return self.init.svo_real_time_mode             # <<<<<<<<<<<<<<
 * 
 *     @svo_real_time_mode.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->init->svo_real_time_mode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":127
 * 
 *     @property
 *     def svo_real_time_mode(self):             # <<<<<<<<<<<<<<
 *         return self.init.svo_real_time_mode
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.svo_real_time_mode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":131
 * 
 *     @svo_real_time_mode.setter
 *     def svo_real_time_mode(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.svo_real_time_mode = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":132
 *     @svo_real_time_mode.setter
 *     def svo_real_time_mode(self, bool value):
 *         self.init.svo_real_time_mode = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_v_self->init->svo_real_time_mode = __pyx_t_1;

  /* "pyzed/camera.pyx":131
 * 
 *     @svo_real_time_mode.setter
 *     def svo_real_time_mode(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.svo_real_time_mode = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.svo_real_time_mode.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":135
 * 
 *     @property
 *     def depth_mode(self):             # <<<<<<<<<<<<<<
 *         return defines.PyDEPTH_MODE(self.init.depth_mode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_10depth_mode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_10depth_mode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_10depth_mode___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_10depth_mode___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":136
 *     @property
 *     def depth_mode(self):
 *         return defines.PyDEPTH_MODE(self.init.depth_mode)             # <<<<<<<<<<<<<<
 * 
 *     @depth_mode.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyDEPTH_MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(__pyx_v_self->init->depth_mode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":135
 * 
 *     @property
 *     def depth_mode(self):             # <<<<<<<<<<<<<<
 *         return defines.PyDEPTH_MODE(self.init.depth_mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.depth_mode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":139
 * 
 *     @depth_mode.setter
 *     def depth_mode(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyDEPTH_MODE):
 *             self.init.depth_mode = value.value
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_10depth_mode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_10depth_mode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_10depth_mode_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_10depth_mode_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  sl::DEPTH_MODE __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":140
 *     @depth_mode.setter
 *     def depth_mode(self, value):
 *         if isinstance(value, defines.PyDEPTH_MODE):             # <<<<<<<<<<<<<<
 *             self.init.depth_mode = value.value
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyDEPTH_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":141
 *     def depth_mode(self, value):
 *         if isinstance(value, defines.PyDEPTH_MODE):
 *             self.init.depth_mode = value.value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument must be of PyDEPTH_MODE type.")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((sl::DEPTH_MODE)__Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->init->depth_mode = __pyx_t_5;

    /* "pyzed/camera.pyx":140
 *     @depth_mode.setter
 *     def depth_mode(self, value):
 *         if isinstance(value, defines.PyDEPTH_MODE):             # <<<<<<<<<<<<<<
 *             self.init.depth_mode = value.value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":143
 *             self.init.depth_mode = value.value
 *         else:
 *             raise TypeError("Argument must be of PyDEPTH_MODE type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 143, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":139
 * 
 *     @depth_mode.setter
 *     def depth_mode(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyDEPTH_MODE):
 *             self.init.depth_mode = value.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.depth_mode.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":146
 * 
 *     @property
 *     def coordinate_units(self):             # <<<<<<<<<<<<<<
 *         return defines.PyUNIT(self.init.coordinate_units)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_16coordinate_units_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_16coordinate_units_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_16coordinate_units___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_16coordinate_units___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":147
 *     @property
 *     def coordinate_units(self):
 *         return defines.PyUNIT(self.init.coordinate_units)             # <<<<<<<<<<<<<<
 * 
 *     @coordinate_units.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyUNIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_UNIT(__pyx_v_self->init->coordinate_units); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":146
 * 
 *     @property
 *     def coordinate_units(self):             # <<<<<<<<<<<<<<
 *         return defines.PyUNIT(self.init.coordinate_units)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.coordinate_units.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":150
 * 
 *     @coordinate_units.setter
 *     def coordinate_units(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyUNIT):
 *             self.init.coordinate_units = value.value
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_16coordinate_units_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_16coordinate_units_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_16coordinate_units_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_16coordinate_units_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  sl::UNIT __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":151
 *     @coordinate_units.setter
 *     def coordinate_units(self, value):
 *         if isinstance(value, defines.PyUNIT):             # <<<<<<<<<<<<<<
 *             self.init.coordinate_units = value.value
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyUNIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":152
 *     def coordinate_units(self, value):
 *         if isinstance(value, defines.PyUNIT):
 *             self.init.coordinate_units = value.value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument must be of PyUNIT type.")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((sl::UNIT)__Pyx_PyInt_As_sl_3a__3a_UNIT(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->init->coordinate_units = __pyx_t_5;

    /* "pyzed/camera.pyx":151
 *     @coordinate_units.setter
 *     def coordinate_units(self, value):
 *         if isinstance(value, defines.PyUNIT):             # <<<<<<<<<<<<<<
 *             self.init.coordinate_units = value.value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":154
 *             self.init.coordinate_units = value.value
 *         else:
 *             raise TypeError("Argument must be of PyUNIT type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 154, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":150
 * 
 *     @coordinate_units.setter
 *     def coordinate_units(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyUNIT):
 *             self.init.coordinate_units = value.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.coordinate_units.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":157
 * 
 *     @property
 *     def coordinate_system(self):             # <<<<<<<<<<<<<<
 *         return defines.PyCOORDINATE_SYSTEM(self.init.coordinate_system)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_17coordinate_system_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_17coordinate_system_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_17coordinate_system___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_17coordinate_system___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":158
 *     @property
 *     def coordinate_system(self):
 *         return defines.PyCOORDINATE_SYSTEM(self.init.coordinate_system)             # <<<<<<<<<<<<<<
 * 
 *     @coordinate_system.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyCOORDINATE_SYSTEM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(__pyx_v_self->init->coordinate_system); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":157
 * 
 *     @property
 *     def coordinate_system(self):             # <<<<<<<<<<<<<<
 *         return defines.PyCOORDINATE_SYSTEM(self.init.coordinate_system)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.coordinate_system.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":161
 * 
 *     @coordinate_system.setter
 *     def coordinate_system(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyCOORDINATE_SYSTEM):
 *             self.init.coordinate_system = value.value
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_17coordinate_system_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_17coordinate_system_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_17coordinate_system_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_17coordinate_system_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  sl::COORDINATE_SYSTEM __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":162
 *     @coordinate_system.setter
 *     def coordinate_system(self, value):
 *         if isinstance(value, defines.PyCOORDINATE_SYSTEM):             # <<<<<<<<<<<<<<
 *             self.init.coordinate_system = value.value
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyCOORDINATE_SYSTEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":163
 *     def coordinate_system(self, value):
 *         if isinstance(value, defines.PyCOORDINATE_SYSTEM):
 *             self.init.coordinate_system = value.value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument must be of PyCOORDINATE_SYSTEM type.")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((sl::COORDINATE_SYSTEM)__Pyx_PyInt_As_sl_3a__3a_COORDINATE_SYSTEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->init->coordinate_system = __pyx_t_5;

    /* "pyzed/camera.pyx":162
 *     @coordinate_system.setter
 *     def coordinate_system(self, value):
 *         if isinstance(value, defines.PyCOORDINATE_SYSTEM):             # <<<<<<<<<<<<<<
 *             self.init.coordinate_system = value.value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":165
 *             self.init.coordinate_system = value.value
 *         else:
 *             raise TypeError("Argument must be of PyCOORDINATE_SYSTEM type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 165, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":161
 * 
 *     @coordinate_system.setter
 *     def coordinate_system(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyCOORDINATE_SYSTEM):
 *             self.init.coordinate_system = value.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.coordinate_system.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":168
 * 
 *     @property
 *     def sdk_verbose(self):             # <<<<<<<<<<<<<<
 *         return self.init.sdk_verbose
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_11sdk_verbose_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_11sdk_verbose_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_11sdk_verbose___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_11sdk_verbose___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":169
 *     @property
 *     def sdk_verbose(self):
 *         return self.init.sdk_verbose             # <<<<<<<<<<<<<<
 * 
 *     @sdk_verbose.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->init->sdk_verbose); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":168
 * 
 *     @property
 *     def sdk_verbose(self):             # <<<<<<<<<<<<<<
 *         return self.init.sdk_verbose
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.sdk_verbose.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":172
 * 
 *     @sdk_verbose.setter
 *     def sdk_verbose(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.sdk_verbose = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_11sdk_verbose_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_11sdk_verbose_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_11sdk_verbose_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_11sdk_verbose_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":173
 *     @sdk_verbose.setter
 *     def sdk_verbose(self, bool value):
 *         self.init.sdk_verbose = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_v_self->init->sdk_verbose = __pyx_t_1;

  /* "pyzed/camera.pyx":172
 * 
 *     @sdk_verbose.setter
 *     def sdk_verbose(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.sdk_verbose = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.sdk_verbose.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":176
 * 
 *     @property
 *     def sdk_gpu_id(self):             # <<<<<<<<<<<<<<
 *         return self.init.sdk_gpu_id
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":177
 *     @property
 *     def sdk_gpu_id(self):
 *         return self.init.sdk_gpu_id             # <<<<<<<<<<<<<<
 * 
 *     @sdk_gpu_id.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->init->sdk_gpu_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":176
 * 
 *     @property
 *     def sdk_gpu_id(self):             # <<<<<<<<<<<<<<
 *         return self.init.sdk_gpu_id
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.sdk_gpu_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":180
 * 
 *     @sdk_gpu_id.setter
 *     def sdk_gpu_id(self, int value):             # <<<<<<<<<<<<<<
 *         self.init.sdk_gpu_id = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.sdk_gpu_id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":181
 *     @sdk_gpu_id.setter
 *     def sdk_gpu_id(self, int value):
 *         self.init.sdk_gpu_id = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->init->sdk_gpu_id = __pyx_v_value;

  /* "pyzed/camera.pyx":180
 * 
 *     @sdk_gpu_id.setter
 *     def sdk_gpu_id(self, int value):             # <<<<<<<<<<<<<<
 *         self.init.sdk_gpu_id = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":184
 * 
 *     @property
 *     def depth_minimum_distance(self):             # <<<<<<<<<<<<<<
 *         return self.init.depth_minimum_distance
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":185
 *     @property
 *     def depth_minimum_distance(self):
 *         return self.init.depth_minimum_distance             # <<<<<<<<<<<<<<
 * 
 *     @depth_minimum_distance.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->init->depth_minimum_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":184
 * 
 *     @property
 *     def depth_minimum_distance(self):             # <<<<<<<<<<<<<<
 *         return self.init.depth_minimum_distance
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.depth_minimum_distance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":188
 * 
 *     @depth_minimum_distance.setter
 *     def depth_minimum_distance(self, float value):             # <<<<<<<<<<<<<<
 *         self.init.depth_minimum_distance = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.depth_minimum_distance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":189
 *     @depth_minimum_distance.setter
 *     def depth_minimum_distance(self, float value):
 *         self.init.depth_minimum_distance = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->init->depth_minimum_distance = __pyx_v_value;

  /* "pyzed/camera.pyx":188
 * 
 *     @depth_minimum_distance.setter
 *     def depth_minimum_distance(self, float value):             # <<<<<<<<<<<<<<
 *         self.init.depth_minimum_distance = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":192
 * 
 *     @property
 *     def camera_disable_self_calib(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_disable_self_calib
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":193
 *     @property
 *     def camera_disable_self_calib(self):
 *         return self.init.camera_disable_self_calib             # <<<<<<<<<<<<<<
 * 
 *     @camera_disable_self_calib.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->init->camera_disable_self_calib); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":192
 * 
 *     @property
 *     def camera_disable_self_calib(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_disable_self_calib
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_disable_self_calib.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":196
 * 
 *     @camera_disable_self_calib.setter
 *     def camera_disable_self_calib(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.camera_disable_self_calib = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":197
 *     @camera_disable_self_calib.setter
 *     def camera_disable_self_calib(self, bool value):
 *         self.init.camera_disable_self_calib = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_v_self->init->camera_disable_self_calib = __pyx_t_1;

  /* "pyzed/camera.pyx":196
 * 
 *     @camera_disable_self_calib.setter
 *     def camera_disable_self_calib(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.camera_disable_self_calib = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_disable_self_calib.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":200
 * 
 *     @property
 *     def camera_image_flip(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_image_flip
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_image_flip_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_image_flip_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_image_flip___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_image_flip___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":201
 *     @property
 *     def camera_image_flip(self):
 *         return self.init.camera_image_flip             # <<<<<<<<<<<<<<
 * 
 *     @camera_image_flip.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->init->camera_image_flip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":200
 * 
 *     @property
 *     def camera_image_flip(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_image_flip
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_image_flip.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":204
 * 
 *     @camera_image_flip.setter
 *     def camera_image_flip(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.camera_image_flip = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_image_flip_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_image_flip_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_image_flip_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_17camera_image_flip_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":205
 *     @camera_image_flip.setter
 *     def camera_image_flip(self, bool value):
 *         self.init.camera_image_flip = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_v_self->init->camera_image_flip = __pyx_t_1;

  /* "pyzed/camera.pyx":204
 * 
 *     @camera_image_flip.setter
 *     def camera_image_flip(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.camera_image_flip = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_image_flip.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":208
 * 
 *     @property
 *     def enable_right_side_measure(self):             # <<<<<<<<<<<<<<
 *         return self.init.enable_right_side_measure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":209
 *     @property
 *     def enable_right_side_measure(self):
 *         return self.init.enable_right_side_measure             # <<<<<<<<<<<<<<
 * 
 *     @enable_right_side_measure.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->init->enable_right_side_measure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":208
 * 
 *     @property
 *     def enable_right_side_measure(self):             # <<<<<<<<<<<<<<
 *         return self.init.enable_right_side_measure
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.enable_right_side_measure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":212
 * 
 *     @enable_right_side_measure.setter
 *     def enable_right_side_measure(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.enable_right_side_measure = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":213
 *     @enable_right_side_measure.setter
 *     def enable_right_side_measure(self, bool value):
 *         self.init.enable_right_side_measure = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
  __pyx_v_self->init->enable_right_side_measure = __pyx_t_1;

  /* "pyzed/camera.pyx":212
 * 
 *     @enable_right_side_measure.setter
 *     def enable_right_side_measure(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.enable_right_side_measure = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.enable_right_side_measure.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":216
 * 
 *     @property
 *     def camera_buffer_count_linux(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_buffer_count_linux
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":217
 *     @property
 *     def camera_buffer_count_linux(self):
 *         return self.init.camera_buffer_count_linux             # <<<<<<<<<<<<<<
 * 
 *     @camera_buffer_count_linux.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->init->camera_buffer_count_linux); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":216
 * 
 *     @property
 *     def camera_buffer_count_linux(self):             # <<<<<<<<<<<<<<
 *         return self.init.camera_buffer_count_linux
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_buffer_count_linux.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":220
 * 
 *     @camera_buffer_count_linux.setter
 *     def camera_buffer_count_linux(self, int value):             # <<<<<<<<<<<<<<
 *         self.init.camera_buffer_count_linux = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.camera_buffer_count_linux.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":221
 *     @camera_buffer_count_linux.setter
 *     def camera_buffer_count_linux(self, int value):
 *         self.init.camera_buffer_count_linux = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->init->camera_buffer_count_linux = __pyx_v_value;

  /* "pyzed/camera.pyx":220
 * 
 *     @camera_buffer_count_linux.setter
 *     def camera_buffer_count_linux(self, int value):             # <<<<<<<<<<<<<<
 *         self.init.camera_buffer_count_linux = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":224
 * 
 *     @property
 *     def sdk_verbose_log_file(self):             # <<<<<<<<<<<<<<
 *         if not self.init.sdk_verbose_log_file.empty():
 *             return self.init.sdk_verbose_log_file.get().decode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":225
 *     @property
 *     def sdk_verbose_log_file(self):
 *         if not self.init.sdk_verbose_log_file.empty():             # <<<<<<<<<<<<<<
 *             return self.init.sdk_verbose_log_file.get().decode()
 *         else:
 */
  __pyx_t_1 = ((!(__pyx_v_self->init->sdk_verbose_log_file.empty() != 0)) != 0);
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":226
 *     def sdk_verbose_log_file(self):
 *         if not self.init.sdk_verbose_log_file.empty():
 *             return self.init.sdk_verbose_log_file.get().decode()             # <<<<<<<<<<<<<<
 *         else:
 *             return ""
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->init->sdk_verbose_log_file.get();
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_t_2, 0, strlen(__pyx_t_2), NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":225
 *     @property
 *     def sdk_verbose_log_file(self):
 *         if not self.init.sdk_verbose_log_file.empty():             # <<<<<<<<<<<<<<
 *             return self.init.sdk_verbose_log_file.get().decode()
 *         else:
 */
  }

  /* "pyzed/camera.pyx":228
 *             return self.init.sdk_verbose_log_file.get().decode()
 *         else:
 *             return ""             # <<<<<<<<<<<<<<
 * 
 *     @sdk_verbose_log_file.setter
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_r = __pyx_kp_s__2;
    goto __pyx_L0;
  }

  /* "pyzed/camera.pyx":224
 * 
 *     @property
 *     def sdk_verbose_log_file(self):             # <<<<<<<<<<<<<<
 *         if not self.init.sdk_verbose_log_file.empty():
 *             return self.init.sdk_verbose_log_file.get().decode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.sdk_verbose_log_file.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":231
 * 
 *     @sdk_verbose_log_file.setter
 *     def sdk_verbose_log_file(self, str value):             # <<<<<<<<<<<<<<
 *         value_filename = value.encode()
 *         self.init.sdk_verbose_log_file.set(<char*>value_filename)
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_value_filename = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":232
 *     @sdk_verbose_log_file.setter
 *     def sdk_verbose_log_file(self, str value):
 *         value_filename = value.encode()             # <<<<<<<<<<<<<<
 *         self.init.sdk_verbose_log_file.set(<char*>value_filename)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_value_filename = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":233
 *     def sdk_verbose_log_file(self, str value):
 *         value_filename = value.encode()
 *         self.init.sdk_verbose_log_file.set(<char*>value_filename)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_value_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_v_self->init->sdk_verbose_log_file.set(((char *)__pyx_t_4));

  /* "pyzed/camera.pyx":231
 * 
 *     @sdk_verbose_log_file.setter
 *     def sdk_verbose_log_file(self, str value):             # <<<<<<<<<<<<<<
 *         value_filename = value.encode()
 *         self.init.sdk_verbose_log_file.set(<char*>value_filename)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.sdk_verbose_log_file.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value_filename);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":236
 * 
 *     @property
 *     def depth_stabilization(self):             # <<<<<<<<<<<<<<
 *         return self.init.depth_stabilization
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_19depth_stabilization_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_19depth_stabilization_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_19depth_stabilization___get__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_19depth_stabilization___get__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":237
 *     @property
 *     def depth_stabilization(self):
 *         return self.init.depth_stabilization             # <<<<<<<<<<<<<<
 * 
 *     @depth_stabilization.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->init->depth_stabilization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":236
 * 
 *     @property
 *     def depth_stabilization(self):             # <<<<<<<<<<<<<<
 *         return self.init.depth_stabilization
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.depth_stabilization.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":240
 * 
 *     @depth_stabilization.setter
 *     def depth_stabilization(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.depth_stabilization = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_19depth_stabilization_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_16PyInitParameters_19depth_stabilization_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_19depth_stabilization_2__set__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_16PyInitParameters_19depth_stabilization_2__set__(struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":241
 *     @depth_stabilization.setter
 *     def depth_stabilization(self, bool value):
 *         self.init.depth_stabilization = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_v_self->init->depth_stabilization = __pyx_t_1;

  /* "pyzed/camera.pyx":240
 * 
 *     @depth_stabilization.setter
 *     def depth_stabilization(self, bool value):             # <<<<<<<<<<<<<<
 *         self.init.depth_stabilization = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.depth_stabilization.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_16PyInitParameters_6__reduce_cython__[] = "PyInitParameters.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_6__reduce_cython__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_6camera_16PyInitParameters_8__setstate_cython__[] = "PyInitParameters.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_6camera_16PyInitParameters_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_16PyInitParameters_8__setstate_cython__(((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_16PyInitParameters_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyInitParameters.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":246
 * cdef class PyRuntimeParameters:
 *     cdef RuntimeParameters* runtime
 *     def __cinit__(self, sensing_mode=defines.PySENSING_MODE.PySENSING_MODE_STANDARD, enable_depth=True,             # <<<<<<<<<<<<<<
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sensing_mode = 0;
  PyObject *__pyx_v_enable_depth = 0;
  PyObject *__pyx_v_enable_point_cloud = 0;
  PyObject *__pyx_v_measure3D_reference_frame = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sensing_mode,&__pyx_n_s_enable_depth,&__pyx_n_s_enable_point_cloud,&__pyx_n_s_measure3D_reference_frame,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = __pyx_k__13;
    values[1] = ((PyObject *)Py_True);

    /* "pyzed/camera.pyx":247
 *     cdef RuntimeParameters* runtime
 *     def __cinit__(self, sensing_mode=defines.PySENSING_MODE.PySENSING_MODE_STANDARD, enable_depth=True,
 *                   enable_point_cloud=True,             # <<<<<<<<<<<<<<
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)
 */
    values[2] = ((PyObject *)Py_True);
    values[3] = __pyx_k__14;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sensing_mode);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enable_depth);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enable_point_cloud);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_measure3D_reference_frame);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 246, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sensing_mode = values[0];
    __pyx_v_enable_depth = values[1];
    __pyx_v_enable_point_cloud = values[2];
    __pyx_v_measure3D_reference_frame = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 246, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters___cinit__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self), __pyx_v_sensing_mode, __pyx_v_enable_depth, __pyx_v_enable_point_cloud, __pyx_v_measure3D_reference_frame);

  /* "pyzed/camera.pyx":246
 * cdef class PyRuntimeParameters:
 *     cdef RuntimeParameters* runtime
 *     def __cinit__(self, sensing_mode=defines.PySENSING_MODE.PySENSING_MODE_STANDARD, enable_depth=True,             # <<<<<<<<<<<<<<
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_19PyRuntimeParameters___cinit__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_sensing_mode, PyObject *__pyx_v_enable_depth, PyObject *__pyx_v_enable_point_cloud, PyObject *__pyx_v_measure3D_reference_frame) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  sl::SENSING_MODE __pyx_t_6;
  bool __pyx_t_7;
  bool __pyx_t_8;
  sl::REFERENCE_FRAME __pyx_t_9;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/camera.pyx":249
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)             # <<<<<<<<<<<<<<
 *             and isinstance(enable_point_cloud, bool) and
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PySENSING_MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_sensing_mode, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":250
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)
 *             and isinstance(enable_point_cloud, bool) and             # <<<<<<<<<<<<<<
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):
 * 
 */
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_enable_depth, __pyx_ptype_7cpython_4bool_bool); 

  /* "pyzed/camera.pyx":249
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)             # <<<<<<<<<<<<<<
 *             and isinstance(enable_point_cloud, bool) and
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):
 */
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":250
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)
 *             and isinstance(enable_point_cloud, bool) and             # <<<<<<<<<<<<<<
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):
 * 
 */
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_enable_point_cloud, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":251
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)
 *             and isinstance(enable_point_cloud, bool) and
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):             # <<<<<<<<<<<<<<
 * 
 *             self.runtime = new RuntimeParameters(sensing_mode.value, enable_depth, enable_point_cloud,
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyREFERENCE_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_measure3D_reference_frame, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;

  /* "pyzed/camera.pyx":249
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)             # <<<<<<<<<<<<<<
 *             and isinstance(enable_point_cloud, bool) and
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):
 */
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":253
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):
 * 
 *             self.runtime = new RuntimeParameters(sensing_mode.value, enable_depth, enable_point_cloud,             # <<<<<<<<<<<<<<
 *                                                  measure3D_reference_frame.value)
 *         else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sensing_mode, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((sl::SENSING_MODE)__Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_enable_depth); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_enable_point_cloud); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)

    /* "pyzed/camera.pyx":254
 * 
 *             self.runtime = new RuntimeParameters(sensing_mode.value, enable_depth, enable_point_cloud,
 *                                                  measure3D_reference_frame.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_measure3D_reference_frame, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = ((sl::REFERENCE_FRAME)__Pyx_PyInt_As_sl_3a__3a_REFERENCE_FRAME(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyzed/camera.pyx":253
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):
 * 
 *             self.runtime = new RuntimeParameters(sensing_mode.value, enable_depth, enable_point_cloud,             # <<<<<<<<<<<<<<
 *                                                  measure3D_reference_frame.value)
 *         else:
 */
    __pyx_v_self->runtime = new sl::RuntimeParameters(__pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9);

    /* "pyzed/camera.pyx":249
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)             # <<<<<<<<<<<<<<
 *             and isinstance(enable_point_cloud, bool) and
 *             isinstance(measure3D_reference_frame, defines.PyREFERENCE_FRAME)):
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":256
 *                                                  measure3D_reference_frame.value)
 *         else:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 *     def save(self, str filename):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 256, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":246
 * cdef class PyRuntimeParameters:
 *     cdef RuntimeParameters* runtime
 *     def __cinit__(self, sensing_mode=defines.PySENSING_MODE.PySENSING_MODE_STANDARD, enable_depth=True,             # <<<<<<<<<<<<<<
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":258
 *             raise TypeError()
 * 
 *     def save(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_save = filename.encode()
 *         return self.runtime.save(types.String(<char*> filename_save))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_3save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzed_6camera_19PyRuntimeParameters_2save[] = "PyRuntimeParameters.save(self, str filename)";
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_3save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_2save(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_2save(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_save = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("save", 0);

  /* "pyzed/camera.pyx":259
 * 
 *     def save(self, str filename):
 *         filename_save = filename.encode()             # <<<<<<<<<<<<<<
 *         return self.runtime.save(types.String(<char*> filename_save))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_save = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":260
 *     def save(self, str filename):
 *         filename_save = filename.encode()
 *         return self.runtime.save(types.String(<char*> filename_save))             # <<<<<<<<<<<<<<
 * 
 *     def load(self, str filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_save); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->runtime->save(sl::String(((char *)__pyx_t_4)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":258
 *             raise TypeError()
 * 
 *     def save(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_save = filename.encode()
 *         return self.runtime.save(types.String(<char*> filename_save))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_save);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":262
 *         return self.runtime.save(types.String(<char*> filename_save))
 * 
 *     def load(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_load = filename.encode()
 *         return self.runtime.load(types.String(<char*> filename_load))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzed_6camera_19PyRuntimeParameters_4load[] = "PyRuntimeParameters.load(self, str filename)";
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 262, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_4load(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_4load(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_load = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("load", 0);

  /* "pyzed/camera.pyx":263
 * 
 *     def load(self, str filename):
 *         filename_load = filename.encode()             # <<<<<<<<<<<<<<
 *         return self.runtime.load(types.String(<char*> filename_load))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_load = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":264
 *     def load(self, str filename):
 *         filename_load = filename.encode()
 *         return self.runtime.load(types.String(<char*> filename_load))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_load); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->runtime->load(sl::String(((char *)__pyx_t_4)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":262
 *         return self.runtime.save(types.String(<char*> filename_save))
 * 
 *     def load(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_load = filename.encode()
 *         return self.runtime.load(types.String(<char*> filename_load))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_load);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":267
 * 
 *     @property
 *     def sensing_mode(self):             # <<<<<<<<<<<<<<
 *         return defines.PySENSING_MODE(self.runtime.sensing_mode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode___get__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode___get__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":268
 *     @property
 *     def sensing_mode(self):
 *         return defines.PySENSING_MODE(self.runtime.sensing_mode)             # <<<<<<<<<<<<<<
 * 
 *     @sensing_mode.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PySENSING_MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_SENSING_MODE(__pyx_v_self->runtime->sensing_mode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":267
 * 
 *     @property
 *     def sensing_mode(self):             # <<<<<<<<<<<<<<
 *         return defines.PySENSING_MODE(self.runtime.sensing_mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.sensing_mode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":271
 * 
 *     @sensing_mode.setter
 *     def sensing_mode(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PySENSING_MODE):
 *             self.runtime.sensing_mode = value.value
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_2__set__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_2__set__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  sl::SENSING_MODE __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":272
 *     @sensing_mode.setter
 *     def sensing_mode(self, value):
 *         if isinstance(value, defines.PySENSING_MODE):             # <<<<<<<<<<<<<<
 *             self.runtime.sensing_mode = value.value
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PySENSING_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":273
 *     def sensing_mode(self, value):
 *         if isinstance(value, defines.PySENSING_MODE):
 *             self.runtime.sensing_mode = value.value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument must be of PySENSING_MODE type.")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((sl::SENSING_MODE)__Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->runtime->sensing_mode = __pyx_t_5;

    /* "pyzed/camera.pyx":272
 *     @sensing_mode.setter
 *     def sensing_mode(self, value):
 *         if isinstance(value, defines.PySENSING_MODE):             # <<<<<<<<<<<<<<
 *             self.runtime.sensing_mode = value.value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":275
 *             self.runtime.sensing_mode = value.value
 *         else:
 *             raise TypeError("Argument must be of PySENSING_MODE type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 275, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":271
 * 
 *     @sensing_mode.setter
 *     def sensing_mode(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PySENSING_MODE):
 *             self.runtime.sensing_mode = value.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.sensing_mode.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":278
 * 
 *     @property
 *     def enable_depth(self):             # <<<<<<<<<<<<<<
 *         return self.runtime.enable_depth
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12enable_depth___get__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12enable_depth___get__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":279
 *     @property
 *     def enable_depth(self):
 *         return self.runtime.enable_depth             # <<<<<<<<<<<<<<
 * 
 *     @enable_depth.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->runtime->enable_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":278
 * 
 *     @property
 *     def enable_depth(self):             # <<<<<<<<<<<<<<
 *         return self.runtime.enable_depth
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.enable_depth.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":282
 * 
 *     @enable_depth.setter
 *     def enable_depth(self, bool value):             # <<<<<<<<<<<<<<
 *         self.runtime.enable_depth = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_2__set__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_2__set__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":283
 *     @enable_depth.setter
 *     def enable_depth(self, bool value):
 *         self.runtime.enable_depth = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 283, __pyx_L1_error)
  __pyx_v_self->runtime->enable_depth = __pyx_t_1;

  /* "pyzed/camera.pyx":282
 * 
 *     @enable_depth.setter
 *     def enable_depth(self, bool value):             # <<<<<<<<<<<<<<
 *         self.runtime.enable_depth = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.enable_depth.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":286
 * 
 *     @property
 *     def measure3D_reference_frame(self):             # <<<<<<<<<<<<<<
 *         return defines.PyREFERENCE_FRAME(self.runtime.measure3D_reference_frame)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame___get__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame___get__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":287
 *     @property
 *     def measure3D_reference_frame(self):
 *         return defines.PyREFERENCE_FRAME(self.runtime.measure3D_reference_frame)             # <<<<<<<<<<<<<<
 * 
 *     @measure3D_reference_frame.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyREFERENCE_FRAME); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_REFERENCE_FRAME(__pyx_v_self->runtime->measure3D_reference_frame); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":286
 * 
 *     @property
 *     def measure3D_reference_frame(self):             # <<<<<<<<<<<<<<
 *         return defines.PyREFERENCE_FRAME(self.runtime.measure3D_reference_frame)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.measure3D_reference_frame.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":290
 * 
 *     @measure3D_reference_frame.setter
 *     def measure3D_reference_frame(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyREFERENCE_FRAME):
 *             self.runtime.measure3D_reference_frame = value.value
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_2__set__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_2__set__(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  sl::REFERENCE_FRAME __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":291
 *     @measure3D_reference_frame.setter
 *     def measure3D_reference_frame(self, value):
 *         if isinstance(value, defines.PyREFERENCE_FRAME):             # <<<<<<<<<<<<<<
 *             self.runtime.measure3D_reference_frame = value.value
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyREFERENCE_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":292
 *     def measure3D_reference_frame(self, value):
 *         if isinstance(value, defines.PyREFERENCE_FRAME):
 *             self.runtime.measure3D_reference_frame = value.value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument must be of PyREFERENCE type.")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((sl::REFERENCE_FRAME)__Pyx_PyInt_As_sl_3a__3a_REFERENCE_FRAME(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->runtime->measure3D_reference_frame = __pyx_t_5;

    /* "pyzed/camera.pyx":291
 *     @measure3D_reference_frame.setter
 *     def measure3D_reference_frame(self, value):
 *         if isinstance(value, defines.PyREFERENCE_FRAME):             # <<<<<<<<<<<<<<
 *             self.runtime.measure3D_reference_frame = value.value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":294
 *             self.runtime.measure3D_reference_frame = value.value
 *         else:
 *             raise TypeError("Argument must be of PyREFERENCE type.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 294, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":290
 * 
 *     @measure3D_reference_frame.setter
 *     def measure3D_reference_frame(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, defines.PyREFERENCE_FRAME):
 *             self.runtime.measure3D_reference_frame = value.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.measure3D_reference_frame.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_19PyRuntimeParameters_6__reduce_cython__[] = "PyRuntimeParameters.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_6__reduce_cython__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_6camera_19PyRuntimeParameters_8__setstate_cython__[] = "PyRuntimeParameters.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_19PyRuntimeParameters_8__setstate_cython__(((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_19PyRuntimeParameters_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyRuntimeParameters.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":299
 * cdef class PyTrackingParameters:
 *     cdef TrackingParameters* tracking
 *     def __cinit__(self, core.PyTransform init_pos, _enable_memory=True, _area_path=None):             # <<<<<<<<<<<<<<
 *         if _area_path is None:
 *             self.tracking = new TrackingParameters(init_pos.transform, _enable_memory, types.String())
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_20PyTrackingParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_6camera_20PyTrackingParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_init_pos = 0;
  PyObject *__pyx_v__enable_memory = 0;
  PyObject *__pyx_v__area_path = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_init_pos,&__pyx_n_s_enable_memory,&__pyx_n_s_area_path,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_init_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enable_memory);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_area_path);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 299, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_init_pos = ((struct __pyx_obj_5pyzed_4core_PyTransform *)values[0]);
    __pyx_v__enable_memory = values[1];
    __pyx_v__area_path = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 299, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_init_pos), __pyx_ptype_5pyzed_4core_PyTransform, 1, "init_pos", 0))) __PYX_ERR(0, 299, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters___cinit__(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self), __pyx_v_init_pos, __pyx_v__enable_memory, __pyx_v__area_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_20PyTrackingParameters___cinit__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_init_pos, PyObject *__pyx_v__enable_memory, PyObject *__pyx_v__area_path) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/camera.pyx":300
 *     cdef TrackingParameters* tracking
 *     def __cinit__(self, core.PyTransform init_pos, _enable_memory=True, _area_path=None):
 *         if _area_path is None:             # <<<<<<<<<<<<<<
 *             self.tracking = new TrackingParameters(init_pos.transform, _enable_memory, types.String())
 *         else:
 */
  __pyx_t_1 = (__pyx_v__area_path == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzed/camera.pyx":301
 *     def __cinit__(self, core.PyTransform init_pos, _enable_memory=True, _area_path=None):
 *         if _area_path is None:
 *             self.tracking = new TrackingParameters(init_pos.transform, _enable_memory, types.String())             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument init_pos must be initialized first with PyTransform().")
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v__enable_memory); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L1_error)
    __pyx_v_self->tracking = new sl::TrackingParameters(__pyx_v_init_pos->transform, __pyx_t_3, sl::String());

    /* "pyzed/camera.pyx":300
 *     cdef TrackingParameters* tracking
 *     def __cinit__(self, core.PyTransform init_pos, _enable_memory=True, _area_path=None):
 *         if _area_path is None:             # <<<<<<<<<<<<<<
 *             self.tracking = new TrackingParameters(init_pos.transform, _enable_memory, types.String())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":303
 *             self.tracking = new TrackingParameters(init_pos.transform, _enable_memory, types.String())
 *         else:
 *             raise TypeError("Argument init_pos must be initialized first with PyTransform().")             # <<<<<<<<<<<<<<
 * 
 *     def save(self, str filename):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 303, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":299
 * cdef class PyTrackingParameters:
 *     cdef TrackingParameters* tracking
 *     def __cinit__(self, core.PyTransform init_pos, _enable_memory=True, _area_path=None):             # <<<<<<<<<<<<<<
 *         if _area_path is None:
 *             self.tracking = new TrackingParameters(init_pos.transform, _enable_memory, types.String())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":305
 *             raise TypeError("Argument init_pos must be initialized first with PyTransform().")
 * 
 *     def save(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_save = filename.encode()
 *         return self.tracking.save(types.String(<char*> filename_save))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_3save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzed_6camera_20PyTrackingParameters_2save[] = "PyTrackingParameters.save(self, str filename)";
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_3save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 305, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_2save(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_2save(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_save = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("save", 0);

  /* "pyzed/camera.pyx":306
 * 
 *     def save(self, str filename):
 *         filename_save = filename.encode()             # <<<<<<<<<<<<<<
 *         return self.tracking.save(types.String(<char*> filename_save))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_save = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":307
 *     def save(self, str filename):
 *         filename_save = filename.encode()
 *         return self.tracking.save(types.String(<char*> filename_save))             # <<<<<<<<<<<<<<
 * 
 *     def load(self, str filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_save); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->tracking->save(sl::String(((char *)__pyx_t_4)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":305
 *             raise TypeError("Argument init_pos must be initialized first with PyTransform().")
 * 
 *     def save(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_save = filename.encode()
 *         return self.tracking.save(types.String(<char*> filename_save))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_save);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":309
 *         return self.tracking.save(types.String(<char*> filename_save))
 * 
 *     def load(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_load = filename.encode()
 *         return self.tracking.load(types.String(<char*> filename_load))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzed_6camera_20PyTrackingParameters_4load[] = "PyTrackingParameters.load(self, str filename)";
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 309, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_4load(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_4load(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_load = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("load", 0);

  /* "pyzed/camera.pyx":310
 * 
 *     def load(self, str filename):
 *         filename_load = filename.encode()             # <<<<<<<<<<<<<<
 *         return self.tracking.load(types.String(<char*> filename_load))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_load = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":311
 *     def load(self, str filename):
 *         filename_load = filename.encode()
 *         return self.tracking.load(types.String(<char*> filename_load))             # <<<<<<<<<<<<<<
 * 
 *     def initial_world_transform(self, core.PyTransform init_pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_load); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->tracking->load(sl::String(((char *)__pyx_t_4)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":309
 *         return self.tracking.save(types.String(<char*> filename_save))
 * 
 *     def load(self, str filename):             # <<<<<<<<<<<<<<
 *         filename_load = filename.encode()
 *         return self.tracking.load(types.String(<char*> filename_load))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_load);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":313
 *         return self.tracking.load(types.String(<char*> filename_load))
 * 
 *     def initial_world_transform(self, core.PyTransform init_pos):             # <<<<<<<<<<<<<<
 *         init_pos.transform = self.tracking.initial_world_transform
 *         return init_pos
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_7initial_world_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_init_pos); /*proto*/
static char __pyx_doc_5pyzed_6camera_20PyTrackingParameters_6initial_world_transform[] = "PyTrackingParameters.initial_world_transform(self, PyTransform init_pos)";
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_7initial_world_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_init_pos) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initial_world_transform (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_init_pos), __pyx_ptype_5pyzed_4core_PyTransform, 1, "init_pos", 0))) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_6initial_world_transform(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_init_pos));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_6initial_world_transform(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_init_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sl::Transform __pyx_t_1;
  __Pyx_RefNannySetupContext("initial_world_transform", 0);

  /* "pyzed/camera.pyx":314
 * 
 *     def initial_world_transform(self, core.PyTransform init_pos):
 *         init_pos.transform = self.tracking.initial_world_transform             # <<<<<<<<<<<<<<
 *         return init_pos
 * 
 */
  __pyx_t_1 = __pyx_v_self->tracking->initial_world_transform;
  __pyx_v_init_pos->transform = __pyx_t_1;

  /* "pyzed/camera.pyx":315
 *     def initial_world_transform(self, core.PyTransform init_pos):
 *         init_pos.transform = self.tracking.initial_world_transform
 *         return init_pos             # <<<<<<<<<<<<<<
 * 
 *     def set_initial_world_transform(self, core.PyTransform value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_init_pos));
  __pyx_r = ((PyObject *)__pyx_v_init_pos);
  goto __pyx_L0;

  /* "pyzed/camera.pyx":313
 *         return self.tracking.load(types.String(<char*> filename_load))
 * 
 *     def initial_world_transform(self, core.PyTransform init_pos):             # <<<<<<<<<<<<<<
 *         init_pos.transform = self.tracking.initial_world_transform
 *         return init_pos
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":317
 *         return init_pos
 * 
 *     def set_initial_world_transform(self, core.PyTransform value):             # <<<<<<<<<<<<<<
 *         self.tracking.initial_world_transform = value.transform
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_9set_initial_world_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_5pyzed_6camera_20PyTrackingParameters_8set_initial_world_transform[] = "PyTrackingParameters.set_initial_world_transform(self, PyTransform value)";
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_9set_initial_world_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_initial_world_transform (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_5pyzed_4core_PyTransform, 1, "value", 0))) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_8set_initial_world_transform(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_8set_initial_world_transform(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sl::Transform __pyx_t_1;
  __Pyx_RefNannySetupContext("set_initial_world_transform", 0);

  /* "pyzed/camera.pyx":318
 * 
 *     def set_initial_world_transform(self, core.PyTransform value):
 *         self.tracking.initial_world_transform = value.transform             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_v_value->transform;
  __pyx_v_self->tracking->initial_world_transform = __pyx_t_1;

  /* "pyzed/camera.pyx":317
 *         return init_pos
 * 
 *     def set_initial_world_transform(self, core.PyTransform value):             # <<<<<<<<<<<<<<
 *         self.tracking.initial_world_transform = value.transform
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":321
 * 
 *     @property
 *     def enable_spatial_memory(self):             # <<<<<<<<<<<<<<
 *         return self.tracking.enable_spatial_memory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory___get__(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory___get__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":322
 *     @property
 *     def enable_spatial_memory(self):
 *         return self.tracking.enable_spatial_memory             # <<<<<<<<<<<<<<
 * 
 *     @enable_spatial_memory.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->tracking->enable_spatial_memory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":321
 * 
 *     @property
 *     def enable_spatial_memory(self):             # <<<<<<<<<<<<<<
 *         return self.tracking.enable_spatial_memory
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.enable_spatial_memory.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":325
 * 
 *     @enable_spatial_memory.setter
 *     def enable_spatial_memory(self, bool value):             # <<<<<<<<<<<<<<
 *         self.tracking.enable_spatial_memory = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 325, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_2__set__(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_2__set__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":326
 *     @enable_spatial_memory.setter
 *     def enable_spatial_memory(self, bool value):
 *         self.tracking.enable_spatial_memory = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_v_self->tracking->enable_spatial_memory = __pyx_t_1;

  /* "pyzed/camera.pyx":325
 * 
 *     @enable_spatial_memory.setter
 *     def enable_spatial_memory(self, bool value):             # <<<<<<<<<<<<<<
 *         self.tracking.enable_spatial_memory = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.enable_spatial_memory.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":329
 * 
 *     @property
 *     def area_file_path(self):             # <<<<<<<<<<<<<<
 *         if not self.tracking.area_file_path.empty():
 *             return self.tracking.area_file_path.get().decode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_14area_file_path_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_14area_file_path_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_14area_file_path___get__(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_14area_file_path___get__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":330
 *     @property
 *     def area_file_path(self):
 *         if not self.tracking.area_file_path.empty():             # <<<<<<<<<<<<<<
 *             return self.tracking.area_file_path.get().decode()
 *         else:
 */
  __pyx_t_1 = ((!(__pyx_v_self->tracking->area_file_path.empty() != 0)) != 0);
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":331
 *     def area_file_path(self):
 *         if not self.tracking.area_file_path.empty():
 *             return self.tracking.area_file_path.get().decode()             # <<<<<<<<<<<<<<
 *         else:
 *             return ""
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->tracking->area_file_path.get();
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_t_2, 0, strlen(__pyx_t_2), NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":330
 *     @property
 *     def area_file_path(self):
 *         if not self.tracking.area_file_path.empty():             # <<<<<<<<<<<<<<
 *             return self.tracking.area_file_path.get().decode()
 *         else:
 */
  }

  /* "pyzed/camera.pyx":333
 *             return self.tracking.area_file_path.get().decode()
 *         else:
 *             return ""             # <<<<<<<<<<<<<<
 * 
 *     @area_file_path.setter
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_r = __pyx_kp_s__2;
    goto __pyx_L0;
  }

  /* "pyzed/camera.pyx":329
 * 
 *     @property
 *     def area_file_path(self):             # <<<<<<<<<<<<<<
 *         if not self.tracking.area_file_path.empty():
 *             return self.tracking.area_file_path.get().decode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.area_file_path.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":336
 * 
 *     @area_file_path.setter
 *     def area_file_path(self, str value):             # <<<<<<<<<<<<<<
 *         value_area = value.encode()
 *         self.tracking.area_file_path.set(<char*>value_area)
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_20PyTrackingParameters_14area_file_path_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_20PyTrackingParameters_14area_file_path_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_14area_file_path_2__set__(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_20PyTrackingParameters_14area_file_path_2__set__(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_value_area = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":337
 *     @area_file_path.setter
 *     def area_file_path(self, str value):
 *         value_area = value.encode()             # <<<<<<<<<<<<<<
 *         self.tracking.area_file_path.set(<char*>value_area)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_value_area = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":338
 *     def area_file_path(self, str value):
 *         value_area = value.encode()
 *         self.tracking.area_file_path.set(<char*>value_area)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_value_area); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_v_self->tracking->area_file_path.set(((char *)__pyx_t_4));

  /* "pyzed/camera.pyx":336
 * 
 *     @area_file_path.setter
 *     def area_file_path(self, str value):             # <<<<<<<<<<<<<<
 *         value_area = value.encode()
 *         self.tracking.area_file_path.set(<char*>value_area)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.area_file_path.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value_area);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_20PyTrackingParameters_10__reduce_cython__[] = "PyTrackingParameters.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_10__reduce_cython__(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_6camera_20PyTrackingParameters_12__setstate_cython__[] = "PyTrackingParameters.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_6camera_20PyTrackingParameters_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_20PyTrackingParameters_12__setstate_cython__(((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_20PyTrackingParameters_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyTrackingParameters.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":343
 * cdef class PySpatialMappingParameters:
 *     cdef SpatialMappingParameters* spatial
 *     def __cinit__(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH, range=PyRANGE.PyRANGE_MEDIUM,             # <<<<<<<<<<<<<<
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,
 *                   inverse_triangle_vertices_order=False):
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_resolution = 0;
  PyObject *__pyx_v_range = 0;
  PyObject *__pyx_v_max_memory_usage = 0;
  PyObject *__pyx_v_save_texture = 0;
  PyObject *__pyx_v_keep_mesh_consistent = 0;
  PyObject *__pyx_v_inverse_triangle_vertices_order = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resolution,&__pyx_n_s_range,&__pyx_n_s_max_memory_usage,&__pyx_n_s_save_texture,&__pyx_n_s_keep_mesh_consistent,&__pyx_n_s_inverse_triangle_vertices_order,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[0] = __pyx_k__22;
    values[1] = __pyx_k__23;
    values[2] = ((PyObject *)__pyx_int_2048);

    /* "pyzed/camera.pyx":344
 *     cdef SpatialMappingParameters* spatial
 *     def __cinit__(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH, range=PyRANGE.PyRANGE_MEDIUM,
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,             # <<<<<<<<<<<<<<
 *                   inverse_triangle_vertices_order=False):
 *         if (isinstance(resolution, PyRESOLUTION) and isinstance(range, PyRANGE) and
 */
    values[3] = ((PyObject *)Py_True);
    values[4] = ((PyObject *)Py_True);

    /* "pyzed/camera.pyx":345
 *     def __cinit__(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH, range=PyRANGE.PyRANGE_MEDIUM,
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,
 *                   inverse_triangle_vertices_order=False):             # <<<<<<<<<<<<<<
 *         if (isinstance(resolution, PyRESOLUTION) and isinstance(range, PyRANGE) and
 *             isinstance(keep_mesh_consistent, bool) and isinstance(inverse_triangle_vertices_order, bool)):
 */
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolution);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_range);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_memory_usage);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_save_texture);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_mesh_consistent);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inverse_triangle_vertices_order);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 343, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_resolution = values[0];
    __pyx_v_range = values[1];
    __pyx_v_max_memory_usage = values[2];
    __pyx_v_save_texture = values[3];
    __pyx_v_keep_mesh_consistent = values[4];
    __pyx_v_inverse_triangle_vertices_order = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 343, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters___cinit__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), __pyx_v_resolution, __pyx_v_range, __pyx_v_max_memory_usage, __pyx_v_save_texture, __pyx_v_keep_mesh_consistent, __pyx_v_inverse_triangle_vertices_order);

  /* "pyzed/camera.pyx":343
 * cdef class PySpatialMappingParameters:
 *     cdef SpatialMappingParameters* spatial
 *     def __cinit__(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH, range=PyRANGE.PyRANGE_MEDIUM,             # <<<<<<<<<<<<<<
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,
 *                   inverse_triangle_vertices_order=False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters___cinit__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_resolution, PyObject *__pyx_v_range, PyObject *__pyx_v_max_memory_usage, PyObject *__pyx_v_save_texture, PyObject *__pyx_v_keep_mesh_consistent, PyObject *__pyx_v_inverse_triangle_vertices_order) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  sl::SpatialMappingParameters::RESOLUTION __pyx_t_5;
  sl::SpatialMappingParameters::RANGE __pyx_t_6;
  int __pyx_t_7;
  bool __pyx_t_8;
  bool __pyx_t_9;
  bool __pyx_t_10;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/camera.pyx":346
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,
 *                   inverse_triangle_vertices_order=False):
 *         if (isinstance(resolution, PyRESOLUTION) and isinstance(range, PyRANGE) and             # <<<<<<<<<<<<<<
 *             isinstance(keep_mesh_consistent, bool) and isinstance(inverse_triangle_vertices_order, bool)):
 *             self.spatial = new SpatialMappingParameters(resolution.value, range.value, max_memory_usage, save_texture,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_resolution, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRANGE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_range, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":347
 *                   inverse_triangle_vertices_order=False):
 *         if (isinstance(resolution, PyRESOLUTION) and isinstance(range, PyRANGE) and
 *             isinstance(keep_mesh_consistent, bool) and isinstance(inverse_triangle_vertices_order, bool)):             # <<<<<<<<<<<<<<
 *             self.spatial = new SpatialMappingParameters(resolution.value, range.value, max_memory_usage, save_texture,
 *                                                         keep_mesh_consistent, inverse_triangle_vertices_order)
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_keep_mesh_consistent, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_inverse_triangle_vertices_order, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;

  /* "pyzed/camera.pyx":346
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,
 *                   inverse_triangle_vertices_order=False):
 *         if (isinstance(resolution, PyRESOLUTION) and isinstance(range, PyRANGE) and             # <<<<<<<<<<<<<<
 *             isinstance(keep_mesh_consistent, bool) and isinstance(inverse_triangle_vertices_order, bool)):
 *             self.spatial = new SpatialMappingParameters(resolution.value, range.value, max_memory_usage, save_texture,
 */
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":348
 *         if (isinstance(resolution, PyRESOLUTION) and isinstance(range, PyRANGE) and
 *             isinstance(keep_mesh_consistent, bool) and isinstance(inverse_triangle_vertices_order, bool)):
 *             self.spatial = new SpatialMappingParameters(resolution.value, range.value, max_memory_usage, save_texture,             # <<<<<<<<<<<<<<
 *                                                         keep_mesh_consistent, inverse_triangle_vertices_order)
 *         else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_resolution, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((sl::SpatialMappingParameters::RESOLUTION)__Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_range, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((sl::SpatialMappingParameters::RANGE)__Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_max_memory_usage); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_save_texture); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)

    /* "pyzed/camera.pyx":349
 *             isinstance(keep_mesh_consistent, bool) and isinstance(inverse_triangle_vertices_order, bool)):
 *             self.spatial = new SpatialMappingParameters(resolution.value, range.value, max_memory_usage, save_texture,
 *                                                         keep_mesh_consistent, inverse_triangle_vertices_order)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError()
 */
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_keep_mesh_consistent); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_inverse_triangle_vertices_order); if (unlikely((__pyx_t_10 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)

    /* "pyzed/camera.pyx":348
 *         if (isinstance(resolution, PyRESOLUTION) and isinstance(range, PyRANGE) and
 *             isinstance(keep_mesh_consistent, bool) and isinstance(inverse_triangle_vertices_order, bool)):
 *             self.spatial = new SpatialMappingParameters(resolution.value, range.value, max_memory_usage, save_texture,             # <<<<<<<<<<<<<<
 *                                                         keep_mesh_consistent, inverse_triangle_vertices_order)
 *         else:
 */
    __pyx_v_self->spatial = new sl::SpatialMappingParameters(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10);

    /* "pyzed/camera.pyx":346
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,
 *                   inverse_triangle_vertices_order=False):
 *         if (isinstance(resolution, PyRESOLUTION) and isinstance(range, PyRANGE) and             # <<<<<<<<<<<<<<
 *             isinstance(keep_mesh_consistent, bool) and isinstance(inverse_triangle_vertices_order, bool)):
 *             self.spatial = new SpatialMappingParameters(resolution.value, range.value, max_memory_usage, save_texture,
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":351
 *                                                         keep_mesh_consistent, inverse_triangle_vertices_order)
 *         else:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 *     def get_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 351, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":343
 * cdef class PySpatialMappingParameters:
 *     cdef SpatialMappingParameters* spatial
 *     def __cinit__(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH, range=PyRANGE.PyRANGE_MEDIUM,             # <<<<<<<<<<<<<<
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,
 *                   inverse_triangle_vertices_order=False):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":353
 *             raise TypeError()
 * 
 *     def get_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):             # <<<<<<<<<<<<<<
 *         if isinstance(resolution, PyRESOLUTION):
 *             return self.spatial.get(<RESOLUTION> resolution.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_3get_resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_2get_resolution[] = "PySpatialMappingParameters.get_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH)";
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_3get_resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_resolution = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_resolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resolution,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__24;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolution);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_resolution") < 0)) __PYX_ERR(0, 353, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_resolution = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_resolution", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 353, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.get_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_2get_resolution(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), __pyx_v_resolution);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_2get_resolution(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_resolution) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  sl::SpatialMappingParameters::RESOLUTION __pyx_t_4;
  __Pyx_RefNannySetupContext("get_resolution", 0);

  /* "pyzed/camera.pyx":354
 * 
 *     def get_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 *         if isinstance(resolution, PyRESOLUTION):             # <<<<<<<<<<<<<<
 *             return self.spatial.get(<RESOLUTION> resolution.value)
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_resolution, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzed/camera.pyx":355
 *     def get_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 *         if isinstance(resolution, PyRESOLUTION):
 *             return self.spatial.get(<RESOLUTION> resolution.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyRESOLUTION type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_resolution, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((sl::SpatialMappingParameters::RESOLUTION)__Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->spatial->get(((sl::SpatialMappingParameters::RESOLUTION)__pyx_t_4))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":354
 * 
 *     def get_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 *         if isinstance(resolution, PyRESOLUTION):             # <<<<<<<<<<<<<<
 *             return self.spatial.get(<RESOLUTION> resolution.value)
 *         else:
 */
  }

  /* "pyzed/camera.pyx":357
 *             return self.spatial.get(<RESOLUTION> resolution.value)
 *         else:
 *             raise TypeError("Argument is not of PyRESOLUTION type.")             # <<<<<<<<<<<<<<
 * 
 *     def set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 357, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":353
 *             raise TypeError()
 * 
 *     def get_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):             # <<<<<<<<<<<<<<
 *         if isinstance(resolution, PyRESOLUTION):
 *             return self.spatial.get(<RESOLUTION> resolution.value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.get_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":359
 *             raise TypeError("Argument is not of PyRESOLUTION type.")
 * 
 *     def set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):             # <<<<<<<<<<<<<<
 *         if isinstance(resolution, PyRESOLUTION):
 *             self.spatial.set(<RESOLUTION> resolution.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_5set_resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_4set_resolution[] = "PySpatialMappingParameters.set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH)";
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_5set_resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_resolution = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_resolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resolution,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__26;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolution);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_resolution") < 0)) __PYX_ERR(0, 359, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_resolution = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_resolution", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 359, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.set_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_4set_resolution(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), __pyx_v_resolution);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_4set_resolution(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_resolution) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  sl::SpatialMappingParameters::RESOLUTION __pyx_t_4;
  __Pyx_RefNannySetupContext("set_resolution", 0);

  /* "pyzed/camera.pyx":360
 * 
 *     def set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 *         if isinstance(resolution, PyRESOLUTION):             # <<<<<<<<<<<<<<
 *             self.spatial.set(<RESOLUTION> resolution.value)
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_resolution, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzed/camera.pyx":361
 *     def set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 *         if isinstance(resolution, PyRESOLUTION):
 *             self.spatial.set(<RESOLUTION> resolution.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyRESOLUTION type.")
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_resolution, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((sl::SpatialMappingParameters::RESOLUTION)__Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->spatial->set(((sl::SpatialMappingParameters::RESOLUTION)__pyx_t_4));

    /* "pyzed/camera.pyx":360
 * 
 *     def set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 *         if isinstance(resolution, PyRESOLUTION):             # <<<<<<<<<<<<<<
 *             self.spatial.set(<RESOLUTION> resolution.value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":363
 *             self.spatial.set(<RESOLUTION> resolution.value)
 *         else:
 *             raise TypeError("Argument is not of PyRESOLUTION type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 363, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":359
 *             raise TypeError("Argument is not of PyRESOLUTION type.")
 * 
 *     def set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):             # <<<<<<<<<<<<<<
 *         if isinstance(resolution, PyRESOLUTION):
 *             self.spatial.set(<RESOLUTION> resolution.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.set_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":365
 *             raise TypeError("Argument is not of PyRESOLUTION type.")
 * 
 *     def get_range(self, range=PyRANGE.PyRANGE_MEDIUM):             # <<<<<<<<<<<<<<
 *         if isinstance(range, PyRANGE):
 *             return self.spatial.get(<RANGE> range.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_7get_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_6get_range[] = "PySpatialMappingParameters.get_range(self, range=PyRANGE.PyRANGE_MEDIUM)";
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_7get_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_range = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_range (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_range,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__28;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_range);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_range") < 0)) __PYX_ERR(0, 365, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_range = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_range", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 365, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.get_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_6get_range(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_6get_range(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  sl::SpatialMappingParameters::RANGE __pyx_t_4;
  __Pyx_RefNannySetupContext("get_range", 0);

  /* "pyzed/camera.pyx":366
 * 
 *     def get_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 *         if isinstance(range, PyRANGE):             # <<<<<<<<<<<<<<
 *             return self.spatial.get(<RANGE> range.value)
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRANGE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_range, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzed/camera.pyx":367
 *     def get_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 *         if isinstance(range, PyRANGE):
 *             return self.spatial.get(<RANGE> range.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyRANGE type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_range, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((sl::SpatialMappingParameters::RANGE)__Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->spatial->get(((sl::SpatialMappingParameters::RANGE)__pyx_t_4))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":366
 * 
 *     def get_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 *         if isinstance(range, PyRANGE):             # <<<<<<<<<<<<<<
 *             return self.spatial.get(<RANGE> range.value)
 *         else:
 */
  }

  /* "pyzed/camera.pyx":369
 *             return self.spatial.get(<RANGE> range.value)
 *         else:
 *             raise TypeError("Argument is not of PyRANGE type.")             # <<<<<<<<<<<<<<
 * 
 *     def set_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 369, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":365
 *             raise TypeError("Argument is not of PyRESOLUTION type.")
 * 
 *     def get_range(self, range=PyRANGE.PyRANGE_MEDIUM):             # <<<<<<<<<<<<<<
 *         if isinstance(range, PyRANGE):
 *             return self.spatial.get(<RANGE> range.value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.get_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":371
 *             raise TypeError("Argument is not of PyRANGE type.")
 * 
 *     def set_range(self, range=PyRANGE.PyRANGE_MEDIUM):             # <<<<<<<<<<<<<<
 *         if isinstance(range, PyRANGE):
 *             self.spatial.set(<RANGE> range.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_9set_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_8set_range[] = "PySpatialMappingParameters.set_range(self, range=PyRANGE.PyRANGE_MEDIUM)";
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_9set_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_range = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_range (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_range,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__30;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_range);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_range") < 0)) __PYX_ERR(0, 371, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_range = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_range", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 371, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.set_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_8set_range(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_8set_range(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  sl::SpatialMappingParameters::RANGE __pyx_t_4;
  __Pyx_RefNannySetupContext("set_range", 0);

  /* "pyzed/camera.pyx":372
 * 
 *     def set_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 *         if isinstance(range, PyRANGE):             # <<<<<<<<<<<<<<
 *             self.spatial.set(<RANGE> range.value)
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRANGE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_range, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzed/camera.pyx":373
 *     def set_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 *         if isinstance(range, PyRANGE):
 *             self.spatial.set(<RANGE> range.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyRANGE type.")
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_range, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((sl::SpatialMappingParameters::RANGE)__Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->spatial->set(((sl::SpatialMappingParameters::RANGE)__pyx_t_4));

    /* "pyzed/camera.pyx":372
 * 
 *     def set_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 *         if isinstance(range, PyRANGE):             # <<<<<<<<<<<<<<
 *             self.spatial.set(<RANGE> range.value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":375
 *             self.spatial.set(<RANGE> range.value)
 *         else:
 *             raise TypeError("Argument is not of PyRANGE type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 375, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":371
 *             raise TypeError("Argument is not of PyRANGE type.")
 * 
 *     def set_range(self, range=PyRANGE.PyRANGE_MEDIUM):             # <<<<<<<<<<<<<<
 *         if isinstance(range, PyRANGE):
 *             self.spatial.set(<RANGE> range.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.set_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":378
 * 
 *     @property
 *     def max_memory_usage(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.max_memory_usage
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":379
 *     @property
 *     def max_memory_usage(self):
 *         return self.spatial.max_memory_usage             # <<<<<<<<<<<<<<
 * 
 *     @max_memory_usage.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->spatial->max_memory_usage); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":378
 * 
 *     @property
 *     def max_memory_usage(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.max_memory_usage
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.max_memory_usage.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":382
 * 
 *     @max_memory_usage.setter
 *     def max_memory_usage(self, int value):             # <<<<<<<<<<<<<<
 *         self.spatial.max_memory_usage = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.max_memory_usage.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_2__set__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":383
 *     @max_memory_usage.setter
 *     def max_memory_usage(self, int value):
 *         self.spatial.max_memory_usage = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->spatial->max_memory_usage = __pyx_v_value;

  /* "pyzed/camera.pyx":382
 * 
 *     @max_memory_usage.setter
 *     def max_memory_usage(self, int value):             # <<<<<<<<<<<<<<
 *         self.spatial.max_memory_usage = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":386
 * 
 *     @property
 *     def save_texture(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.save_texture
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12save_texture___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12save_texture___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":387
 *     @property
 *     def save_texture(self):
 *         return self.spatial.save_texture             # <<<<<<<<<<<<<<
 * 
 *     @save_texture.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->spatial->save_texture); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":386
 * 
 *     @property
 *     def save_texture(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.save_texture
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.save_texture.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":390
 * 
 *     @save_texture.setter
 *     def save_texture(self, bool value):             # <<<<<<<<<<<<<<
 *         self.spatial.save_texture = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 390, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_2__set__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":391
 *     @save_texture.setter
 *     def save_texture(self, bool value):
 *         self.spatial.save_texture = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_v_self->spatial->save_texture = __pyx_t_1;

  /* "pyzed/camera.pyx":390
 * 
 *     @save_texture.setter
 *     def save_texture(self, bool value):             # <<<<<<<<<<<<<<
 *         self.spatial.save_texture = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.save_texture.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":394
 * 
 *     @property
 *     def keep_mesh_consistent(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.keep_mesh_consistent
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":395
 *     @property
 *     def keep_mesh_consistent(self):
 *         return self.spatial.keep_mesh_consistent             # <<<<<<<<<<<<<<
 * 
 *     @keep_mesh_consistent.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->spatial->keep_mesh_consistent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":394
 * 
 *     @property
 *     def keep_mesh_consistent(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.keep_mesh_consistent
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.keep_mesh_consistent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":398
 * 
 *     @keep_mesh_consistent.setter
 *     def keep_mesh_consistent(self, bool value):             # <<<<<<<<<<<<<<
 *         self.spatial.keep_mesh_consistent = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_2__set__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":399
 *     @keep_mesh_consistent.setter
 *     def keep_mesh_consistent(self, bool value):
 *         self.spatial.keep_mesh_consistent = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 399, __pyx_L1_error)
  __pyx_v_self->spatial->keep_mesh_consistent = __pyx_t_1;

  /* "pyzed/camera.pyx":398
 * 
 *     @keep_mesh_consistent.setter
 *     def keep_mesh_consistent(self, bool value):             # <<<<<<<<<<<<<<
 *         self.spatial.keep_mesh_consistent = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.keep_mesh_consistent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":402
 * 
 *     @property
 *     def inverse_triangle_vertices_order(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.inverse_triangle_vertices_order
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":403
 *     @property
 *     def inverse_triangle_vertices_order(self):
 *         return self.spatial.inverse_triangle_vertices_order             # <<<<<<<<<<<<<<
 * 
 *     @inverse_triangle_vertices_order.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->spatial->inverse_triangle_vertices_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":402
 * 
 *     @property
 *     def inverse_triangle_vertices_order(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.inverse_triangle_vertices_order
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.inverse_triangle_vertices_order.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":406
 * 
 *     @inverse_triangle_vertices_order.setter
 *     def inverse_triangle_vertices_order(self, bool value):             # <<<<<<<<<<<<<<
 *         self.spatial.inverse_triangle_vertices_order = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 406, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_2__set__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":407
 *     @inverse_triangle_vertices_order.setter
 *     def inverse_triangle_vertices_order(self, bool value):
 *         self.spatial.inverse_triangle_vertices_order = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
  __pyx_v_self->spatial->inverse_triangle_vertices_order = __pyx_t_1;

  /* "pyzed/camera.pyx":406
 * 
 *     @inverse_triangle_vertices_order.setter
 *     def inverse_triangle_vertices_order(self, bool value):             # <<<<<<<<<<<<<<
 *         self.spatial.inverse_triangle_vertices_order = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.inverse_triangle_vertices_order.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":410
 * 
 *     @property
 *     def allowed_min(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.allowed_min
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11allowed_min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11allowed_min_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11allowed_min___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11allowed_min___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":411
 *     @property
 *     def allowed_min(self):
 *         return self.spatial.allowed_min             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_pair_to_py_float____float(__pyx_v_self->spatial->allowed_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":410
 * 
 *     @property
 *     def allowed_min(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.allowed_min
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.allowed_min.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":414
 * 
 *     @property
 *     def allowed_max(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.allowed_max
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11allowed_max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11allowed_max_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11allowed_max___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11allowed_max___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":415
 *     @property
 *     def allowed_max(self):
 *         return self.spatial.allowed_max             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_pair_to_py_float____float(__pyx_v_self->spatial->allowed_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":414
 * 
 *     @property
 *     def allowed_max(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.allowed_max
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.allowed_max.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":418
 * 
 *     @property
 *     def range_meter(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.range_meter
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11range_meter___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11range_meter___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":419
 *     @property
 *     def range_meter(self):
 *         return self.spatial.range_meter             # <<<<<<<<<<<<<<
 * 
 *     @range_meter.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_pair_to_py_float____float(__pyx_v_self->spatial->range_meter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":418
 * 
 *     @property
 *     def range_meter(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.range_meter
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.range_meter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":422
 * 
 *     @range_meter.setter
 *     def range_meter(self, value):             # <<<<<<<<<<<<<<
 *         if(self.allowed_min[0] <= value[0] <= self.allowed_min[1] and
 *            self.allowed_max[0] <= value[1] <= self.allowed_max[1]):
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_2__set__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  sl::SpatialMappingParameters::interval __pyx_t_8;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":423
 *     @range_meter.setter
 *     def range_meter(self, value):
 *         if(self.allowed_min[0] <= value[0] <= self.allowed_min[1] and             # <<<<<<<<<<<<<<
 *            self.allowed_max[0] <= value[1] <= self.allowed_max[1]):
 *             self.spatial.range_meter = value
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_allowed_min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 423, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_allowed_min); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":424
 *     def range_meter(self, value):
 *         if(self.allowed_min[0] <= value[0] <= self.allowed_min[1] and
 *            self.allowed_max[0] <= value[1] <= self.allowed_max[1]):             # <<<<<<<<<<<<<<
 *             self.spatial.range_meter = value
 *         else:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_allowed_max); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_3)) {
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_allowed_max); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;

  /* "pyzed/camera.pyx":423
 *     @range_meter.setter
 *     def range_meter(self, value):
 *         if(self.allowed_min[0] <= value[0] <= self.allowed_min[1] and             # <<<<<<<<<<<<<<
 *            self.allowed_max[0] <= value[1] <= self.allowed_max[1]):
 *             self.spatial.range_meter = value
 */
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":425
 *         if(self.allowed_min[0] <= value[0] <= self.allowed_min[1] and
 *            self.allowed_max[0] <= value[1] <= self.allowed_max[1]):
 *             self.spatial.range_meter = value             # <<<<<<<<<<<<<<
 *         else:
 *             print("Tuple values must fit in min and max allowed intervals.")
 */
    __pyx_t_8 = __pyx_convert_pair_from_py_float__and_float(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
    __pyx_v_self->spatial->range_meter = __pyx_t_8;

    /* "pyzed/camera.pyx":423
 *     @range_meter.setter
 *     def range_meter(self, value):
 *         if(self.allowed_min[0] <= value[0] <= self.allowed_min[1] and             # <<<<<<<<<<<<<<
 *            self.allowed_max[0] <= value[1] <= self.allowed_max[1]):
 *             self.spatial.range_meter = value
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":427
 *             self.spatial.range_meter = value
 *         else:
 *             print("Tuple values must fit in min and max allowed intervals.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_Tuple_values_must_fit_in_min_and) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":422
 * 
 *     @range_meter.setter
 *     def range_meter(self, value):             # <<<<<<<<<<<<<<
 *         if(self.allowed_min[0] <= value[0] <= self.allowed_min[1] and
 *            self.allowed_max[0] <= value[1] <= self.allowed_max[1]):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.range_meter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":430
 * 
 *     @property
 *     def allowed_resolution(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.allowed_resolution
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_18allowed_resolution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_18allowed_resolution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_18allowed_resolution___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_18allowed_resolution___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":431
 *     @property
 *     def allowed_resolution(self):
 *         return self.spatial.allowed_resolution             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_pair_to_py_float____float(__pyx_v_self->spatial->allowed_resolution); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":430
 * 
 *     @property
 *     def allowed_resolution(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.allowed_resolution
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.allowed_resolution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":434
 * 
 *     @property
 *     def resolution_meter(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.resolution_meter
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter___get__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter___get__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":435
 *     @property
 *     def resolution_meter(self):
 *         return self.spatial.resolution_meter             # <<<<<<<<<<<<<<
 * 
 *     @resolution_meter.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->spatial->resolution_meter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":434
 * 
 *     @property
 *     def resolution_meter(self):             # <<<<<<<<<<<<<<
 *         return self.spatial.resolution_meter
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.resolution_meter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":438
 * 
 *     @resolution_meter.setter
 *     def resolution_meter(self, float value):             # <<<<<<<<<<<<<<
 *         self.spatial.resolution_meter = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.resolution_meter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_2__set__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_2__set__(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/camera.pyx":439
 *     @resolution_meter.setter
 *     def resolution_meter(self, float value):
 *         self.spatial.resolution_meter = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->spatial->resolution_meter = __pyx_v_value;

  /* "pyzed/camera.pyx":438
 * 
 *     @resolution_meter.setter
 *     def resolution_meter(self, float value):             # <<<<<<<<<<<<<<
 *         self.spatial.resolution_meter = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_10__reduce_cython__[] = "PySpatialMappingParameters.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_10__reduce_cython__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_12__setstate_cython__[] = "PySpatialMappingParameters.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12__setstate_cython__(((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_26PySpatialMappingParameters_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PySpatialMappingParameters.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":444
 * cdef class PyPose:
 *     cdef Pose pose
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.pose = Pose()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_6PyPose_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_6camera_6PyPose_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose___cinit__(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_6PyPose___cinit__(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/camera.pyx":445
 *     cdef Pose pose
 *     def __cinit__(self):
 *         self.pose = Pose()             # <<<<<<<<<<<<<<
 * 
 *     def init_pose(self, PyPose pose):
 */
  __pyx_v_self->pose = sl::Pose();

  /* "pyzed/camera.pyx":444
 * cdef class PyPose:
 *     cdef Pose pose
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.pose = Pose()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":447
 *         self.pose = Pose()
 * 
 *     def init_pose(self, PyPose pose):             # <<<<<<<<<<<<<<
 *         self.pose = Pose(pose.pose)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_3init_pose(PyObject *__pyx_v_self, PyObject *__pyx_v_pose); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_2init_pose[] = "PyPose.init_pose(self, PyPose pose)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_3init_pose(PyObject *__pyx_v_self, PyObject *__pyx_v_pose) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_pose (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pose), __pyx_ptype_5pyzed_6camera_PyPose, 1, "pose", 0))) __PYX_ERR(0, 447, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_2init_pose(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self), ((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_pose));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_2init_pose(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_pose) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_pose", 0);

  /* "pyzed/camera.pyx":448
 * 
 *     def init_pose(self, PyPose pose):
 *         self.pose = Pose(pose.pose)             # <<<<<<<<<<<<<<
 * 
 *     def init_transform(self, core.PyTransform pose_data, mtimestamp=0, mconfidence=0):
 */
  __pyx_v_self->pose = sl::Pose(__pyx_v_pose->pose);

  /* "pyzed/camera.pyx":447
 *         self.pose = Pose()
 * 
 *     def init_pose(self, PyPose pose):             # <<<<<<<<<<<<<<
 *         self.pose = Pose(pose.pose)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":450
 *         self.pose = Pose(pose.pose)
 * 
 *     def init_transform(self, core.PyTransform pose_data, mtimestamp=0, mconfidence=0):             # <<<<<<<<<<<<<<
 *         self.pose = Pose(pose_data.transform, mtimestamp, mconfidence)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_5init_transform(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_4init_transform[] = "PyPose.init_transform(self, PyTransform pose_data, mtimestamp=0, mconfidence=0)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_5init_transform(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_pose_data = 0;
  PyObject *__pyx_v_mtimestamp = 0;
  PyObject *__pyx_v_mconfidence = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_transform (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pose_data,&__pyx_n_s_mtimestamp,&__pyx_n_s_mconfidence,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pose_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mtimestamp);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mconfidence);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_transform") < 0)) __PYX_ERR(0, 450, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pose_data = ((struct __pyx_obj_5pyzed_4core_PyTransform *)values[0]);
    __pyx_v_mtimestamp = values[1];
    __pyx_v_mconfidence = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_transform", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 450, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyPose.init_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pose_data), __pyx_ptype_5pyzed_4core_PyTransform, 1, "pose_data", 0))) __PYX_ERR(0, 450, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_4init_transform(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self), __pyx_v_pose_data, __pyx_v_mtimestamp, __pyx_v_mconfidence);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_4init_transform(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_pose_data, PyObject *__pyx_v_mtimestamp, PyObject *__pyx_v_mconfidence) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned PY_LONG_LONG __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("init_transform", 0);

  /* "pyzed/camera.pyx":451
 * 
 *     def init_transform(self, core.PyTransform pose_data, mtimestamp=0, mconfidence=0):
 *         self.pose = Pose(pose_data.transform, mtimestamp, mconfidence)             # <<<<<<<<<<<<<<
 * 
 *     def get_translation(self, core.PyTranslation py_translation):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_v_mtimestamp); if (unlikely((__pyx_t_1 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_mconfidence); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L1_error)
  __pyx_v_self->pose = sl::Pose(__pyx_v_pose_data->transform, __pyx_t_1, __pyx_t_2);

  /* "pyzed/camera.pyx":450
 *         self.pose = Pose(pose.pose)
 * 
 *     def init_transform(self, core.PyTransform pose_data, mtimestamp=0, mconfidence=0):             # <<<<<<<<<<<<<<
 *         self.pose = Pose(pose_data.transform, mtimestamp, mconfidence)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.camera.PyPose.init_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":453
 *         self.pose = Pose(pose_data.transform, mtimestamp, mconfidence)
 * 
 *     def get_translation(self, core.PyTranslation py_translation):             # <<<<<<<<<<<<<<
 *         py_translation.translation = self.pose.getTranslation()
 *         return py_translation
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_7get_translation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_translation); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_6get_translation[] = "PyPose.get_translation(self, PyTranslation py_translation)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_7get_translation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_translation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_translation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_translation), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "py_translation", 0))) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_6get_translation(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_py_translation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_6get_translation(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_py_translation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_translation", 0);

  /* "pyzed/camera.pyx":454
 * 
 *     def get_translation(self, core.PyTranslation py_translation):
 *         py_translation.translation = self.pose.getTranslation()             # <<<<<<<<<<<<<<
 *         return py_translation
 * 
 */
  __pyx_v_py_translation->translation = __pyx_v_self->pose.getTranslation();

  /* "pyzed/camera.pyx":455
 *     def get_translation(self, core.PyTranslation py_translation):
 *         py_translation.translation = self.pose.getTranslation()
 *         return py_translation             # <<<<<<<<<<<<<<
 * 
 *     def get_orientation(self, core.PyOrientation py_orientation):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_translation));
  __pyx_r = ((PyObject *)__pyx_v_py_translation);
  goto __pyx_L0;

  /* "pyzed/camera.pyx":453
 *         self.pose = Pose(pose_data.transform, mtimestamp, mconfidence)
 * 
 *     def get_translation(self, core.PyTranslation py_translation):             # <<<<<<<<<<<<<<
 *         py_translation.translation = self.pose.getTranslation()
 *         return py_translation
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":457
 *         return py_translation
 * 
 *     def get_orientation(self, core.PyOrientation py_orientation):             # <<<<<<<<<<<<<<
 *         py_orientation.orientation = self.pose.getOrientation()
 *         return py_orientation
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_9get_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_orientation); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_8get_orientation[] = "PyPose.get_orientation(self, PyOrientation py_orientation)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_9get_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_orientation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orientation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_orientation), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "py_orientation", 0))) __PYX_ERR(0, 457, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_8get_orientation(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_py_orientation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_8get_orientation(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_py_orientation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orientation", 0);

  /* "pyzed/camera.pyx":458
 * 
 *     def get_orientation(self, core.PyOrientation py_orientation):
 *         py_orientation.orientation = self.pose.getOrientation()             # <<<<<<<<<<<<<<
 *         return py_orientation
 * 
 */
  __pyx_v_py_orientation->orientation = __pyx_v_self->pose.getOrientation();

  /* "pyzed/camera.pyx":459
 *     def get_orientation(self, core.PyOrientation py_orientation):
 *         py_orientation.orientation = self.pose.getOrientation()
 *         return py_orientation             # <<<<<<<<<<<<<<
 * 
 *     def get_rotation_matrix(self, core.PyRotation py_rotation):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_orientation));
  __pyx_r = ((PyObject *)__pyx_v_py_orientation);
  goto __pyx_L0;

  /* "pyzed/camera.pyx":457
 *         return py_translation
 * 
 *     def get_orientation(self, core.PyOrientation py_orientation):             # <<<<<<<<<<<<<<
 *         py_orientation.orientation = self.pose.getOrientation()
 *         return py_orientation
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":461
 *         return py_orientation
 * 
 *     def get_rotation_matrix(self, core.PyRotation py_rotation):             # <<<<<<<<<<<<<<
 *         py_rotation.rotation = self.pose.getRotationMatrix()
 *         py_rotation.mat = self.pose.getRotationMatrix()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_11get_rotation_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_py_rotation); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_10get_rotation_matrix[] = "PyPose.get_rotation_matrix(self, PyRotation py_rotation)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_11get_rotation_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_py_rotation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rotation_matrix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_rotation), __pyx_ptype_5pyzed_4core_PyRotation, 1, "py_rotation", 0))) __PYX_ERR(0, 461, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_10get_rotation_matrix(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_py_rotation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_10get_rotation_matrix(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_py_rotation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rotation_matrix", 0);

  /* "pyzed/camera.pyx":462
 * 
 *     def get_rotation_matrix(self, core.PyRotation py_rotation):
 *         py_rotation.rotation = self.pose.getRotationMatrix()             # <<<<<<<<<<<<<<
 *         py_rotation.mat = self.pose.getRotationMatrix()
 *         return py_rotation
 */
  __pyx_v_py_rotation->rotation = __pyx_v_self->pose.getRotationMatrix();

  /* "pyzed/camera.pyx":463
 *     def get_rotation_matrix(self, core.PyRotation py_rotation):
 *         py_rotation.rotation = self.pose.getRotationMatrix()
 *         py_rotation.mat = self.pose.getRotationMatrix()             # <<<<<<<<<<<<<<
 *         return py_rotation
 * 
 */
  __pyx_v_py_rotation->__pyx_base.mat = __pyx_v_self->pose.getRotationMatrix();

  /* "pyzed/camera.pyx":464
 *         py_rotation.rotation = self.pose.getRotationMatrix()
 *         py_rotation.mat = self.pose.getRotationMatrix()
 *         return py_rotation             # <<<<<<<<<<<<<<
 * 
 *     def get_rotation_vector(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_rotation));
  __pyx_r = ((PyObject *)__pyx_v_py_rotation);
  goto __pyx_L0;

  /* "pyzed/camera.pyx":461
 *         return py_orientation
 * 
 *     def get_rotation_matrix(self, core.PyRotation py_rotation):             # <<<<<<<<<<<<<<
 *         py_rotation.rotation = self.pose.getRotationMatrix()
 *         py_rotation.mat = self.pose.getRotationMatrix()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":466
 *         return py_rotation
 * 
 *     def get_rotation_vector(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_13get_rotation_vector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_12get_rotation_vector[] = "PyPose.get_rotation_vector(self)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_13get_rotation_vector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rotation_vector (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_12get_rotation_vector(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_12get_rotation_vector(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self) {
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  __Pyx_RefNannySetupContext("get_rotation_vector", 0);

  /* "pyzed/camera.pyx":467
 * 
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.pose.getRotationVector()[i]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 467, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":468
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             arr[i] = self.pose.getRotationVector()[i]
 *         return arr
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyzed/camera.pyx":469
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 *             arr[i] = self.pose.getRotationVector()[i]             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->pose.getRotationVector()[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyzed/camera.pyx":470
 *         for i in range(3):
 *             arr[i] = self.pose.getRotationVector()[i]
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def get_euler_angles(self, radian=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/camera.pyx":466
 *         return py_rotation
 * 
 *     def get_rotation_vector(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyPose.get_rotation_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":472
 *         return arr
 * 
 *     def get_euler_angles(self, radian=True):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_15get_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_14get_euler_angles[] = "PyPose.get_euler_angles(self, radian=True)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_15get_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_radian = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_euler_angles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_radian,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radian);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_euler_angles") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_radian = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_euler_angles", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyPose.get_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_14get_euler_angles(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self), __pyx_v_radian);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_14get_euler_angles(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, PyObject *__pyx_v_radian) {
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  bool __pyx_t_6;
  __Pyx_RefNannySetupContext("get_euler_angles", 0);

  /* "pyzed/camera.pyx":473
 * 
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             for i in range(3):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 473, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":474
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 arr[i] = self.pose.getEulerAngles(radian)[i]
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_radian, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":475
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 arr[i] = self.pose.getEulerAngles(radian)[i]
 *         else:
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "pyzed/camera.pyx":476
 *         if isinstance(radian, bool):
 *             for i in range(3):
 *                 arr[i] = self.pose.getEulerAngles(radian)[i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of bool type.")
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_radian); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L1_error)
      __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->pose.getEulerAngles(__pyx_t_6)[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 476, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "pyzed/camera.pyx":474
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 arr[i] = self.pose.getEulerAngles(radian)[i]
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":478
 *                 arr[i] = self.pose.getEulerAngles(radian)[i]
 *         else:
 *             raise TypeError("Argument is not of bool type.")             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 478, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":479
 *         else:
 *             raise TypeError("Argument is not of bool type.")
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/camera.pyx":472
 *         return arr
 * 
 *     def get_euler_angles(self, radian=True):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyPose.get_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":482
 * 
 *     @property
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         return self.pose.valid
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_5valid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_5valid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_5valid___get__(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_5valid___get__(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":483
 *     @property
 *     def valid(self):
 *         return self.pose.valid             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->pose.valid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":482
 * 
 *     @property
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         return self.pose.valid
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyPose.valid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":486
 * 
 *     @property
 *     def timestamp(self):             # <<<<<<<<<<<<<<
 *         return self.pose.timestamp
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_9timestamp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_9timestamp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_9timestamp___get__(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_9timestamp___get__(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":487
 *     @property
 *     def timestamp(self):
 *         return self.pose.timestamp             # <<<<<<<<<<<<<<
 * 
 *     def pose_data(self, core.PyTransform pose_data):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_self->pose.timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":486
 * 
 *     @property
 *     def timestamp(self):             # <<<<<<<<<<<<<<
 *         return self.pose.timestamp
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyPose.timestamp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":489
 *         return self.pose.timestamp
 * 
 *     def pose_data(self, core.PyTransform pose_data):             # <<<<<<<<<<<<<<
 *         pose_data.transform = self.pose.pose_data
 *         pose_data.mat = self.pose.pose_data
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_17pose_data(PyObject *__pyx_v_self, PyObject *__pyx_v_pose_data); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_16pose_data[] = "PyPose.pose_data(self, PyTransform pose_data)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_17pose_data(PyObject *__pyx_v_self, PyObject *__pyx_v_pose_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pose_data (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pose_data), __pyx_ptype_5pyzed_4core_PyTransform, 1, "pose_data", 0))) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_16pose_data(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_pose_data));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_16pose_data(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_pose_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sl::Transform __pyx_t_1;
  __Pyx_RefNannySetupContext("pose_data", 0);

  /* "pyzed/camera.pyx":490
 * 
 *     def pose_data(self, core.PyTransform pose_data):
 *         pose_data.transform = self.pose.pose_data             # <<<<<<<<<<<<<<
 *         pose_data.mat = self.pose.pose_data
 *         return pose_data
 */
  __pyx_t_1 = __pyx_v_self->pose.pose_data;
  __pyx_v_pose_data->transform = __pyx_t_1;

  /* "pyzed/camera.pyx":491
 *     def pose_data(self, core.PyTransform pose_data):
 *         pose_data.transform = self.pose.pose_data
 *         pose_data.mat = self.pose.pose_data             # <<<<<<<<<<<<<<
 *         return pose_data
 * 
 */
  __pyx_t_1 = __pyx_v_self->pose.pose_data;
  __pyx_v_pose_data->__pyx_base.mat = __pyx_t_1;

  /* "pyzed/camera.pyx":492
 *         pose_data.transform = self.pose.pose_data
 *         pose_data.mat = self.pose.pose_data
 *         return pose_data             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pose_data));
  __pyx_r = ((PyObject *)__pyx_v_pose_data);
  goto __pyx_L0;

  /* "pyzed/camera.pyx":489
 *         return self.pose.timestamp
 * 
 *     def pose_data(self, core.PyTransform pose_data):             # <<<<<<<<<<<<<<
 *         pose_data.transform = self.pose.pose_data
 *         pose_data.mat = self.pose.pose_data
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":495
 * 
 *     @property
 *     def pose_confidence(self):             # <<<<<<<<<<<<<<
 *         return self.pose.pose_confidence
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_15pose_confidence_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_15pose_confidence_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_15pose_confidence___get__(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_15pose_confidence___get__(struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/camera.pyx":496
 *     @property
 *     def pose_confidence(self):
 *         return self.pose.pose_confidence             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->pose.pose_confidence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":495
 * 
 *     @property
 *     def pose_confidence(self):             # <<<<<<<<<<<<<<
 *         return self.pose.pose_confidence
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyPose.pose_confidence.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_18__reduce_cython__[] = "PyPose.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_18__reduce_cython__(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyPose.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_6camera_6PyPose_20__setstate_cython__[] = "PyPose.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_6camera_6PyPose_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_6PyPose_20__setstate_cython__(((struct __pyx_obj_5pyzed_6camera_PyPose *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6PyPose_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyPose.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":500
 * 
 * cdef class PyZEDCamera:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.camera = Camera()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_6camera_11PyZEDCamera_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_6camera_11PyZEDCamera_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera___cinit__(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_6camera_11PyZEDCamera___cinit__(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/camera.pyx":501
 * cdef class PyZEDCamera:
 *     def __cinit__(self):
 *         self.camera = Camera()             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __pyx_v_self->camera = sl::Camera();

  /* "pyzed/camera.pyx":500
 * 
 * cdef class PyZEDCamera:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.camera = Camera()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":503
 *         self.camera = Camera()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         self.camera.close()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_2close[] = "PyZEDCamera.close(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_2close(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_2close(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);

  /* "pyzed/camera.pyx":504
 * 
 *     def close(self):
 *         self.camera.close()             # <<<<<<<<<<<<<<
 * 
 *     def open(self, PyInitParameters py_init):
 */
  __pyx_v_self->camera.close();

  /* "pyzed/camera.pyx":503
 *         self.camera = Camera()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         self.camera.close()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":506
 *         self.camera.close()
 * 
 *     def open(self, PyInitParameters py_init):             # <<<<<<<<<<<<<<
 *         if py_init:
 *             return types.PyERROR_CODE(self.camera.open(deref(py_init.init)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_5open(PyObject *__pyx_v_self, PyObject *__pyx_v_py_init); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_4open[] = "PyZEDCamera.open(self, PyInitParameters py_init)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_5open(PyObject *__pyx_v_self, PyObject *__pyx_v_py_init) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_init), __pyx_ptype_5pyzed_6camera_PyInitParameters, 1, "py_init", 0))) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_4open(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((struct __pyx_obj_5pyzed_6camera_PyInitParameters *)__pyx_v_py_init));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_4open(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyInitParameters *__pyx_v_py_init) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("open", 0);

  /* "pyzed/camera.pyx":507
 * 
 *     def open(self, PyInitParameters py_init):
 *         if py_init:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.open(deref(py_init.init)))
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_py_init)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 507, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":508
 *     def open(self, PyInitParameters py_init):
 *         if py_init:
 *             return types.PyERROR_CODE(self.camera.open(deref(py_init.init)))             # <<<<<<<<<<<<<<
 *         else:
 *             print("InitParameters must be initialized first with PyInitParameters().")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.open((*__pyx_v_py_init->init))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":507
 * 
 *     def open(self, PyInitParameters py_init):
 *         if py_init:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.open(deref(py_init.init)))
 *         else:
 */
  }

  /* "pyzed/camera.pyx":510
 *             return types.PyERROR_CODE(self.camera.open(deref(py_init.init)))
 *         else:
 *             print("InitParameters must be initialized first with PyInitParameters().")             # <<<<<<<<<<<<<<
 * 
 *     def is_opened(self):
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_InitParameters_must_be_initializ) < 0) __PYX_ERR(0, 510, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":506
 *         self.camera.close()
 * 
 *     def open(self, PyInitParameters py_init):             # <<<<<<<<<<<<<<
 *         if py_init:
 *             return types.PyERROR_CODE(self.camera.open(deref(py_init.init)))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":512
 *             print("InitParameters must be initialized first with PyInitParameters().")
 * 
 *     def is_opened(self):             # <<<<<<<<<<<<<<
 *         return self.camera.isOpened()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_7is_opened(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_6is_opened[] = "PyZEDCamera.is_opened(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_7is_opened(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_opened (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_6is_opened(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_6is_opened(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_opened", 0);

  /* "pyzed/camera.pyx":513
 * 
 *     def is_opened(self):
 *         return self.camera.isOpened()             # <<<<<<<<<<<<<<
 * 
 *     def grab(self, PyRuntimeParameters py_runtime):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->camera.isOpened()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":512
 *             print("InitParameters must be initialized first with PyInitParameters().")
 * 
 *     def is_opened(self):             # <<<<<<<<<<<<<<
 *         return self.camera.isOpened()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.is_opened", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":515
 *         return self.camera.isOpened()
 * 
 *     def grab(self, PyRuntimeParameters py_runtime):             # <<<<<<<<<<<<<<
 *         if py_runtime:
 *             return types.PyERROR_CODE(self.camera.grab(deref(py_runtime.runtime)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_9grab(PyObject *__pyx_v_self, PyObject *__pyx_v_py_runtime); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_8grab[] = "PyZEDCamera.grab(self, PyRuntimeParameters py_runtime)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_9grab(PyObject *__pyx_v_self, PyObject *__pyx_v_py_runtime) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("grab (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_runtime), __pyx_ptype_5pyzed_6camera_PyRuntimeParameters, 1, "py_runtime", 0))) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_8grab(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *)__pyx_v_py_runtime));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_8grab(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters *__pyx_v_py_runtime) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("grab", 0);

  /* "pyzed/camera.pyx":516
 * 
 *     def grab(self, PyRuntimeParameters py_runtime):
 *         if py_runtime:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.grab(deref(py_runtime.runtime)))
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_py_runtime)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 516, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":517
 *     def grab(self, PyRuntimeParameters py_runtime):
 *         if py_runtime:
 *             return types.PyERROR_CODE(self.camera.grab(deref(py_runtime.runtime)))             # <<<<<<<<<<<<<<
 *         else:
 *             print("RuntimeParameters must be initialized first with PyRuntimeParameters().")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.grab((*__pyx_v_py_runtime->runtime))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":516
 * 
 *     def grab(self, PyRuntimeParameters py_runtime):
 *         if py_runtime:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.grab(deref(py_runtime.runtime)))
 *         else:
 */
  }

  /* "pyzed/camera.pyx":519
 *             return types.PyERROR_CODE(self.camera.grab(deref(py_runtime.runtime)))
 *         else:
 *             print("RuntimeParameters must be initialized first with PyRuntimeParameters().")             # <<<<<<<<<<<<<<
 * 
 *     def retrieve_image(self, core.PyMat py_mat, view=defines.PyVIEW.PyVIEW_LEFT, type=core.PyMEM.PyMEM_CPU, width=0,
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_RuntimeParameters_must_be_initia) < 0) __PYX_ERR(0, 519, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":515
 *         return self.camera.isOpened()
 * 
 *     def grab(self, PyRuntimeParameters py_runtime):             # <<<<<<<<<<<<<<
 *         if py_runtime:
 *             return types.PyERROR_CODE(self.camera.grab(deref(py_runtime.runtime)))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.grab", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":521
 *             print("RuntimeParameters must be initialized first with PyRuntimeParameters().")
 * 
 *     def retrieve_image(self, core.PyMat py_mat, view=defines.PyVIEW.PyVIEW_LEFT, type=core.PyMEM.PyMEM_CPU, width=0,             # <<<<<<<<<<<<<<
 *                        height=0):
 *         if (isinstance(view, defines.PyVIEW) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_11retrieve_image(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_10retrieve_image[] = "PyZEDCamera.retrieve_image(self, PyMat py_mat, view=defines.PyVIEW.PyVIEW_LEFT, type=core.PyMEM.PyMEM_CPU, width=0, height=0)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_11retrieve_image(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat = 0;
  PyObject *__pyx_v_view = 0;
  PyObject *__pyx_v_type = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("retrieve_image (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_mat,&__pyx_n_s_view,&__pyx_n_s_type,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = __pyx_k__39;
    values[2] = __pyx_k__40;
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_mat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_view);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "retrieve_image") < 0)) __PYX_ERR(0, 521, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_py_mat = ((struct __pyx_obj_5pyzed_4core_PyMat *)values[0]);
    __pyx_v_view = values[1];
    __pyx_v_type = values[2];
    __pyx_v_width = values[3];
    __pyx_v_height = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("retrieve_image", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 521, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.retrieve_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mat), __pyx_ptype_5pyzed_4core_PyMat, 1, "py_mat", 0))) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_10retrieve_image(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), __pyx_v_py_mat, __pyx_v_view, __pyx_v_type, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_10retrieve_image(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, PyObject *__pyx_v_view, PyObject *__pyx_v_type, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  sl::VIEW __pyx_t_7;
  enum sl::MEM __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("retrieve_image", 0);

  /* "pyzed/camera.pyx":523
 *     def retrieve_image(self, core.PyMat py_mat, view=defines.PyVIEW.PyVIEW_LEFT, type=core.PyMEM.PyMEM_CPU, width=0,
 *                        height=0):
 *         if (isinstance(view, defines.PyVIEW) and isinstance(type, core.PyMEM) and isinstance(width, int) and             # <<<<<<<<<<<<<<
 *            isinstance(height, int)):
 *             return types.PyERROR_CODE(self.camera.retrieveImage(py_mat.mat, view.value, type.value, width, height))
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyVIEW); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_view, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_type, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyInt_Check(__pyx_v_width); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":524
 *                        height=0):
 *         if (isinstance(view, defines.PyVIEW) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 *            isinstance(height, int)):             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.retrieveImage(py_mat.mat, view.value, type.value, width, height))
 *         else:
 */
  __pyx_t_5 = PyInt_Check(__pyx_v_height); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;

  /* "pyzed/camera.pyx":523
 *     def retrieve_image(self, core.PyMat py_mat, view=defines.PyVIEW.PyVIEW_LEFT, type=core.PyMEM.PyMEM_CPU, width=0,
 *                        height=0):
 *         if (isinstance(view, defines.PyVIEW) and isinstance(type, core.PyMEM) and isinstance(width, int) and             # <<<<<<<<<<<<<<
 *            isinstance(height, int)):
 *             return types.PyERROR_CODE(self.camera.retrieveImage(py_mat.mat, view.value, type.value, width, height))
 */
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":525
 *         if (isinstance(view, defines.PyVIEW) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 *            isinstance(height, int)):
 *             return types.PyERROR_CODE(self.camera.retrieveImage(py_mat.mat, view.value, type.value, width, height))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Arguments must be of PyVIEW, PyMEM and integer types.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_view, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = ((sl::VIEW)__Pyx_PyInt_As_sl_3a__3a_VIEW(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_width); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_height); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.retrieveImage(__pyx_v_py_mat->mat, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_11) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 525, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 525, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 525, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 525, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 525, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":523
 *     def retrieve_image(self, core.PyMat py_mat, view=defines.PyVIEW.PyVIEW_LEFT, type=core.PyMEM.PyMEM_CPU, width=0,
 *                        height=0):
 *         if (isinstance(view, defines.PyVIEW) and isinstance(type, core.PyMEM) and isinstance(width, int) and             # <<<<<<<<<<<<<<
 *            isinstance(height, int)):
 *             return types.PyERROR_CODE(self.camera.retrieveImage(py_mat.mat, view.value, type.value, width, height))
 */
  }

  /* "pyzed/camera.pyx":527
 *             return types.PyERROR_CODE(self.camera.retrieveImage(py_mat.mat, view.value, type.value, width, height))
 *         else:
 *             raise TypeError("Arguments must be of PyVIEW, PyMEM and integer types.")             # <<<<<<<<<<<<<<
 * 
 *     def retrieve_measure(self, core.PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU,
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 527, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":521
 *             print("RuntimeParameters must be initialized first with PyRuntimeParameters().")
 * 
 *     def retrieve_image(self, core.PyMat py_mat, view=defines.PyVIEW.PyVIEW_LEFT, type=core.PyMEM.PyMEM_CPU, width=0,             # <<<<<<<<<<<<<<
 *                        height=0):
 *         if (isinstance(view, defines.PyVIEW) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.retrieve_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":529
 *             raise TypeError("Arguments must be of PyVIEW, PyMEM and integer types.")
 * 
 *     def retrieve_measure(self, core.PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU,             # <<<<<<<<<<<<<<
 *                          width=0, height=0):
 *         if (isinstance(measure, defines.PyMEASURE) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_13retrieve_measure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_12retrieve_measure[] = "PyZEDCamera.retrieve_measure(self, PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU, width=0, height=0)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_13retrieve_measure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat = 0;
  PyObject *__pyx_v_measure = 0;
  PyObject *__pyx_v_type = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("retrieve_measure (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_mat,&__pyx_n_s_measure,&__pyx_n_s_type,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = __pyx_k__42;
    values[2] = __pyx_k__43;
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_mat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_measure);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "retrieve_measure") < 0)) __PYX_ERR(0, 529, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_py_mat = ((struct __pyx_obj_5pyzed_4core_PyMat *)values[0]);
    __pyx_v_measure = values[1];
    __pyx_v_type = values[2];
    __pyx_v_width = values[3];
    __pyx_v_height = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("retrieve_measure", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 529, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.retrieve_measure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mat), __pyx_ptype_5pyzed_4core_PyMat, 1, "py_mat", 0))) __PYX_ERR(0, 529, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_12retrieve_measure(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), __pyx_v_py_mat, __pyx_v_measure, __pyx_v_type, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_12retrieve_measure(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, PyObject *__pyx_v_measure, PyObject *__pyx_v_type, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  sl::MEASURE __pyx_t_7;
  enum sl::MEM __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("retrieve_measure", 0);

  /* "pyzed/camera.pyx":531
 *     def retrieve_measure(self, core.PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU,
 *                          width=0, height=0):
 *         if (isinstance(measure, defines.PyMEASURE) and isinstance(type, core.PyMEM) and isinstance(width, int) and             # <<<<<<<<<<<<<<
 *            isinstance(height, int)):
 *             return types.PyERROR_CODE(self.camera.retrieveMeasure(py_mat.mat, measure.value, type.value, width, height))
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEASURE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_measure, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_type, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyInt_Check(__pyx_v_width); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pyzed/camera.pyx":532
 *                          width=0, height=0):
 *         if (isinstance(measure, defines.PyMEASURE) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 *            isinstance(height, int)):             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.retrieveMeasure(py_mat.mat, measure.value, type.value, width, height))
 *         else:
 */
  __pyx_t_5 = PyInt_Check(__pyx_v_height); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;

  /* "pyzed/camera.pyx":531
 *     def retrieve_measure(self, core.PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU,
 *                          width=0, height=0):
 *         if (isinstance(measure, defines.PyMEASURE) and isinstance(type, core.PyMEM) and isinstance(width, int) and             # <<<<<<<<<<<<<<
 *            isinstance(height, int)):
 *             return types.PyERROR_CODE(self.camera.retrieveMeasure(py_mat.mat, measure.value, type.value, width, height))
 */
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":533
 *         if (isinstance(measure, defines.PyMEASURE) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 *            isinstance(height, int)):
 *             return types.PyERROR_CODE(self.camera.retrieveMeasure(py_mat.mat, measure.value, type.value, width, height))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Arguments must be of PyMEASURE, PyMEM and integer types.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_measure, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = ((sl::MEASURE)__Pyx_PyInt_As_sl_3a__3a_MEASURE(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_width); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_height); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.retrieveMeasure(__pyx_v_py_mat->mat, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_11) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":531
 *     def retrieve_measure(self, core.PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU,
 *                          width=0, height=0):
 *         if (isinstance(measure, defines.PyMEASURE) and isinstance(type, core.PyMEM) and isinstance(width, int) and             # <<<<<<<<<<<<<<
 *            isinstance(height, int)):
 *             return types.PyERROR_CODE(self.camera.retrieveMeasure(py_mat.mat, measure.value, type.value, width, height))
 */
  }

  /* "pyzed/camera.pyx":535
 *             return types.PyERROR_CODE(self.camera.retrieveMeasure(py_mat.mat, measure.value, type.value, width, height))
 *         else:
 *             raise TypeError("Arguments must be of PyMEASURE, PyMEM and integer types.")             # <<<<<<<<<<<<<<
 * 
 *     def set_confidence_threshold(self, int conf_treshold_value):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 535, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":529
 *             raise TypeError("Arguments must be of PyVIEW, PyMEM and integer types.")
 * 
 *     def retrieve_measure(self, core.PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU,             # <<<<<<<<<<<<<<
 *                          width=0, height=0):
 *         if (isinstance(measure, defines.PyMEASURE) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.retrieve_measure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":537
 *             raise TypeError("Arguments must be of PyMEASURE, PyMEM and integer types.")
 * 
 *     def set_confidence_threshold(self, int conf_treshold_value):             # <<<<<<<<<<<<<<
 *         self.camera.setConfidenceThreshold(conf_treshold_value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_15set_confidence_threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_conf_treshold_value); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_14set_confidence_threshold[] = "PyZEDCamera.set_confidence_threshold(self, int conf_treshold_value)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_15set_confidence_threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_conf_treshold_value) {
  int __pyx_v_conf_treshold_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_confidence_threshold (wrapper)", 0);
  assert(__pyx_arg_conf_treshold_value); {
    __pyx_v_conf_treshold_value = __Pyx_PyInt_As_int(__pyx_arg_conf_treshold_value); if (unlikely((__pyx_v_conf_treshold_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.set_confidence_threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_14set_confidence_threshold(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((int)__pyx_v_conf_treshold_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_14set_confidence_threshold(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, int __pyx_v_conf_treshold_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_confidence_threshold", 0);

  /* "pyzed/camera.pyx":538
 * 
 *     def set_confidence_threshold(self, int conf_treshold_value):
 *         self.camera.setConfidenceThreshold(conf_treshold_value)             # <<<<<<<<<<<<<<
 * 
 *     def get_confidence_threshold(self):
 */
  __pyx_v_self->camera.setConfidenceThreshold(__pyx_v_conf_treshold_value);

  /* "pyzed/camera.pyx":537
 *             raise TypeError("Arguments must be of PyMEASURE, PyMEM and integer types.")
 * 
 *     def set_confidence_threshold(self, int conf_treshold_value):             # <<<<<<<<<<<<<<
 *         self.camera.setConfidenceThreshold(conf_treshold_value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":540
 *         self.camera.setConfidenceThreshold(conf_treshold_value)
 * 
 *     def get_confidence_threshold(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getConfidenceThreshold()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_17get_confidence_threshold(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_16get_confidence_threshold[] = "PyZEDCamera.get_confidence_threshold(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_17get_confidence_threshold(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_confidence_threshold (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_16get_confidence_threshold(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_16get_confidence_threshold(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_confidence_threshold", 0);

  /* "pyzed/camera.pyx":541
 * 
 *     def get_confidence_threshold(self):
 *         return self.camera.getConfidenceThreshold()             # <<<<<<<<<<<<<<
 * 
 *     def get_resolution(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->camera.getConfidenceThreshold()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":540
 *         self.camera.setConfidenceThreshold(conf_treshold_value)
 * 
 *     def get_confidence_threshold(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getConfidenceThreshold()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_confidence_threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":543
 *         return self.camera.getConfidenceThreshold()
 * 
 *     def get_resolution(self):             # <<<<<<<<<<<<<<
 *         return core.PyResolution(self.camera.getResolution().width, self.camera.getResolution().height)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_19get_resolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_18get_resolution[] = "PyZEDCamera.get_resolution(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_19get_resolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_resolution (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_18get_resolution(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_18get_resolution(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("get_resolution", 0);

  /* "pyzed/camera.pyx":544
 * 
 *     def get_resolution(self):
 *         return core.PyResolution(self.camera.getResolution().width, self.camera.getResolution().height)             # <<<<<<<<<<<<<<
 * 
 *     def set_depth_max_range_value(self, float depth_max_range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_core); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyResolution); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->camera.getResolution().width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_self->camera.getResolution().height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":543
 *         return self.camera.getConfidenceThreshold()
 * 
 *     def get_resolution(self):             # <<<<<<<<<<<<<<
 *         return core.PyResolution(self.camera.getResolution().width, self.camera.getResolution().height)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":546
 *         return core.PyResolution(self.camera.getResolution().width, self.camera.getResolution().height)
 * 
 *     def set_depth_max_range_value(self, float depth_max_range):             # <<<<<<<<<<<<<<
 *         self.camera.setDepthMaxRangeValue(depth_max_range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_21set_depth_max_range_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth_max_range); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_20set_depth_max_range_value[] = "PyZEDCamera.set_depth_max_range_value(self, float depth_max_range)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_21set_depth_max_range_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth_max_range) {
  float __pyx_v_depth_max_range;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_depth_max_range_value (wrapper)", 0);
  assert(__pyx_arg_depth_max_range); {
    __pyx_v_depth_max_range = __pyx_PyFloat_AsFloat(__pyx_arg_depth_max_range); if (unlikely((__pyx_v_depth_max_range == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.set_depth_max_range_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_20set_depth_max_range_value(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((float)__pyx_v_depth_max_range));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_20set_depth_max_range_value(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, float __pyx_v_depth_max_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_depth_max_range_value", 0);

  /* "pyzed/camera.pyx":547
 * 
 *     def set_depth_max_range_value(self, float depth_max_range):
 *         self.camera.setDepthMaxRangeValue(depth_max_range)             # <<<<<<<<<<<<<<
 * 
 *     def get_depth_max_range_value(self):
 */
  __pyx_v_self->camera.setDepthMaxRangeValue(__pyx_v_depth_max_range);

  /* "pyzed/camera.pyx":546
 *         return core.PyResolution(self.camera.getResolution().width, self.camera.getResolution().height)
 * 
 *     def set_depth_max_range_value(self, float depth_max_range):             # <<<<<<<<<<<<<<
 *         self.camera.setDepthMaxRangeValue(depth_max_range)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":549
 *         self.camera.setDepthMaxRangeValue(depth_max_range)
 * 
 *     def get_depth_max_range_value(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getDepthMaxRangeValue()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_23get_depth_max_range_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_22get_depth_max_range_value[] = "PyZEDCamera.get_depth_max_range_value(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_23get_depth_max_range_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_depth_max_range_value (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_22get_depth_max_range_value(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_22get_depth_max_range_value(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_depth_max_range_value", 0);

  /* "pyzed/camera.pyx":550
 * 
 *     def get_depth_max_range_value(self):
 *         return self.camera.getDepthMaxRangeValue()             # <<<<<<<<<<<<<<
 * 
 *     def get_depth_min_range_value(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera.getDepthMaxRangeValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":549
 *         self.camera.setDepthMaxRangeValue(depth_max_range)
 * 
 *     def get_depth_max_range_value(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getDepthMaxRangeValue()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_depth_max_range_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":552
 *         return self.camera.getDepthMaxRangeValue()
 * 
 *     def get_depth_min_range_value(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getDepthMinRangeValue()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_25get_depth_min_range_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_24get_depth_min_range_value[] = "PyZEDCamera.get_depth_min_range_value(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_25get_depth_min_range_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_depth_min_range_value (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_24get_depth_min_range_value(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_24get_depth_min_range_value(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_depth_min_range_value", 0);

  /* "pyzed/camera.pyx":553
 * 
 *     def get_depth_min_range_value(self):
 *         return self.camera.getDepthMinRangeValue()             # <<<<<<<<<<<<<<
 * 
 *     def set_svo_position(self, int frame_number):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera.getDepthMinRangeValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":552
 *         return self.camera.getDepthMaxRangeValue()
 * 
 *     def get_depth_min_range_value(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getDepthMinRangeValue()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_depth_min_range_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":555
 *         return self.camera.getDepthMinRangeValue()
 * 
 *     def set_svo_position(self, int frame_number):             # <<<<<<<<<<<<<<
 *         self.camera.setSVOPosition(frame_number)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_27set_svo_position(PyObject *__pyx_v_self, PyObject *__pyx_arg_frame_number); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_26set_svo_position[] = "PyZEDCamera.set_svo_position(self, int frame_number)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_27set_svo_position(PyObject *__pyx_v_self, PyObject *__pyx_arg_frame_number) {
  int __pyx_v_frame_number;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_svo_position (wrapper)", 0);
  assert(__pyx_arg_frame_number); {
    __pyx_v_frame_number = __Pyx_PyInt_As_int(__pyx_arg_frame_number); if (unlikely((__pyx_v_frame_number == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 555, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.set_svo_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_26set_svo_position(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((int)__pyx_v_frame_number));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_26set_svo_position(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, int __pyx_v_frame_number) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_svo_position", 0);

  /* "pyzed/camera.pyx":556
 * 
 *     def set_svo_position(self, int frame_number):
 *         self.camera.setSVOPosition(frame_number)             # <<<<<<<<<<<<<<
 * 
 *     def get_svo_position(self):
 */
  __pyx_v_self->camera.setSVOPosition(__pyx_v_frame_number);

  /* "pyzed/camera.pyx":555
 *         return self.camera.getDepthMinRangeValue()
 * 
 *     def set_svo_position(self, int frame_number):             # <<<<<<<<<<<<<<
 *         self.camera.setSVOPosition(frame_number)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":558
 *         self.camera.setSVOPosition(frame_number)
 * 
 *     def get_svo_position(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getSVOPosition()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_29get_svo_position(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_28get_svo_position[] = "PyZEDCamera.get_svo_position(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_29get_svo_position(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_svo_position (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_28get_svo_position(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_28get_svo_position(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_svo_position", 0);

  /* "pyzed/camera.pyx":559
 * 
 *     def get_svo_position(self):
 *         return self.camera.getSVOPosition()             # <<<<<<<<<<<<<<
 * 
 *     def get_svo_number_of_frames(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->camera.getSVOPosition()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":558
 *         self.camera.setSVOPosition(frame_number)
 * 
 *     def get_svo_position(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getSVOPosition()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_svo_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":561
 *         return self.camera.getSVOPosition()
 * 
 *     def get_svo_number_of_frames(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getSVONumberOfFrames()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_31get_svo_number_of_frames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_30get_svo_number_of_frames[] = "PyZEDCamera.get_svo_number_of_frames(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_31get_svo_number_of_frames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_svo_number_of_frames (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_30get_svo_number_of_frames(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_30get_svo_number_of_frames(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_svo_number_of_frames", 0);

  /* "pyzed/camera.pyx":562
 * 
 *     def get_svo_number_of_frames(self):
 *         return self.camera.getSVONumberOfFrames()             # <<<<<<<<<<<<<<
 * 
 *     def set_camera_settings(self, settings, int value, use_default=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->camera.getSVONumberOfFrames()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":561
 *         return self.camera.getSVOPosition()
 * 
 *     def get_svo_number_of_frames(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getSVONumberOfFrames()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_svo_number_of_frames", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":564
 *         return self.camera.getSVONumberOfFrames()
 * 
 *     def set_camera_settings(self, settings, int value, use_default=False):             # <<<<<<<<<<<<<<
 *         if isinstance(settings, defines.PyCAMERA_SETTINGS) and isinstance(use_default, bool):
 *             self.camera.setCameraSettings(settings.value, value, use_default)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_33set_camera_settings(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_32set_camera_settings[] = "PyZEDCamera.set_camera_settings(self, settings, int value, use_default=False)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_33set_camera_settings(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_settings = 0;
  int __pyx_v_value;
  PyObject *__pyx_v_use_default = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_settings (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_settings,&__pyx_n_s_value,&__pyx_n_s_use_default,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_settings)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_settings", 0, 2, 3, 1); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_use_default);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_settings") < 0)) __PYX_ERR(0, 564, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_settings = values[0];
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_use_default = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_settings", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 564, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.set_camera_settings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_32set_camera_settings(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), __pyx_v_settings, __pyx_v_value, __pyx_v_use_default);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_32set_camera_settings(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_settings, int __pyx_v_value, PyObject *__pyx_v_use_default) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  sl::CAMERA_SETTINGS __pyx_t_6;
  bool __pyx_t_7;
  __Pyx_RefNannySetupContext("set_camera_settings", 0);

  /* "pyzed/camera.pyx":565
 * 
 *     def set_camera_settings(self, settings, int value, use_default=False):
 *         if isinstance(settings, defines.PyCAMERA_SETTINGS) and isinstance(use_default, bool):             # <<<<<<<<<<<<<<
 *             self.camera.setCameraSettings(settings.value, value, use_default)
 *         else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyCAMERA_SETTINGS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_settings, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_use_default, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":566
 *     def set_camera_settings(self, settings, int value, use_default=False):
 *         if isinstance(settings, defines.PyCAMERA_SETTINGS) and isinstance(use_default, bool):
 *             self.camera.setCameraSettings(settings.value, value, use_default)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Arguments must be of PyCAMERA_SETTINGS and boolean types.")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_settings, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = ((sl::CAMERA_SETTINGS)__Pyx_PyInt_As_sl_3a__3a_CAMERA_SETTINGS(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_use_default); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L1_error)
    __pyx_v_self->camera.setCameraSettings(__pyx_t_6, __pyx_v_value, __pyx_t_7);

    /* "pyzed/camera.pyx":565
 * 
 *     def set_camera_settings(self, settings, int value, use_default=False):
 *         if isinstance(settings, defines.PyCAMERA_SETTINGS) and isinstance(use_default, bool):             # <<<<<<<<<<<<<<
 *             self.camera.setCameraSettings(settings.value, value, use_default)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":568
 *             self.camera.setCameraSettings(settings.value, value, use_default)
 *         else:
 *             raise TypeError("Arguments must be of PyCAMERA_SETTINGS and boolean types.")             # <<<<<<<<<<<<<<
 * 
 *     def get_camera_settings(self, setting):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 568, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":564
 *         return self.camera.getSVONumberOfFrames()
 * 
 *     def set_camera_settings(self, settings, int value, use_default=False):             # <<<<<<<<<<<<<<
 *         if isinstance(settings, defines.PyCAMERA_SETTINGS) and isinstance(use_default, bool):
 *             self.camera.setCameraSettings(settings.value, value, use_default)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.set_camera_settings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":570
 *             raise TypeError("Arguments must be of PyCAMERA_SETTINGS and boolean types.")
 * 
 *     def get_camera_settings(self, setting):             # <<<<<<<<<<<<<<
 *         if isinstance(setting, defines.PyCAMERA_SETTINGS):
 *             return self.camera.getCameraSettings(setting.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_35get_camera_settings(PyObject *__pyx_v_self, PyObject *__pyx_v_setting); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_34get_camera_settings[] = "PyZEDCamera.get_camera_settings(self, setting)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_35get_camera_settings(PyObject *__pyx_v_self, PyObject *__pyx_v_setting) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_camera_settings (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_34get_camera_settings(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((PyObject *)__pyx_v_setting));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_34get_camera_settings(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_setting) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  sl::CAMERA_SETTINGS __pyx_t_5;
  __Pyx_RefNannySetupContext("get_camera_settings", 0);

  /* "pyzed/camera.pyx":571
 * 
 *     def get_camera_settings(self, setting):
 *         if isinstance(setting, defines.PyCAMERA_SETTINGS):             # <<<<<<<<<<<<<<
 *             return self.camera.getCameraSettings(setting.value)
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyCAMERA_SETTINGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_setting, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":572
 *     def get_camera_settings(self, setting):
 *         if isinstance(setting, defines.PyCAMERA_SETTINGS):
 *             return self.camera.getCameraSettings(setting.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyCAMERA_SETTINGS type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_setting, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((sl::CAMERA_SETTINGS)__Pyx_PyInt_As_sl_3a__3a_CAMERA_SETTINGS(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->camera.getCameraSettings(__pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":571
 * 
 *     def get_camera_settings(self, setting):
 *         if isinstance(setting, defines.PyCAMERA_SETTINGS):             # <<<<<<<<<<<<<<
 *             return self.camera.getCameraSettings(setting.value)
 *         else:
 */
  }

  /* "pyzed/camera.pyx":574
 *             return self.camera.getCameraSettings(setting.value)
 *         else:
 *             raise TypeError("Argument is not of PyCAMERA_SETTINGS type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_camera_fps(self):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 574, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":570
 *             raise TypeError("Arguments must be of PyCAMERA_SETTINGS and boolean types.")
 * 
 *     def get_camera_settings(self, setting):             # <<<<<<<<<<<<<<
 *         if isinstance(setting, defines.PyCAMERA_SETTINGS):
 *             return self.camera.getCameraSettings(setting.value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_camera_settings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":576
 *             raise TypeError("Argument is not of PyCAMERA_SETTINGS type.")
 * 
 *     def get_camera_fps(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getCameraFPS()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_37get_camera_fps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_36get_camera_fps[] = "PyZEDCamera.get_camera_fps(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_37get_camera_fps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_camera_fps (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_36get_camera_fps(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_36get_camera_fps(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_camera_fps", 0);

  /* "pyzed/camera.pyx":577
 * 
 *     def get_camera_fps(self):
 *         return self.camera.getCameraFPS()             # <<<<<<<<<<<<<<
 * 
 *     def set_camera_fps(self, int desired_fps):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera.getCameraFPS()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":576
 *             raise TypeError("Argument is not of PyCAMERA_SETTINGS type.")
 * 
 *     def get_camera_fps(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getCameraFPS()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_camera_fps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":579
 *         return self.camera.getCameraFPS()
 * 
 *     def set_camera_fps(self, int desired_fps):             # <<<<<<<<<<<<<<
 *         self.camera.setCameraFPS(desired_fps)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_39set_camera_fps(PyObject *__pyx_v_self, PyObject *__pyx_arg_desired_fps); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_38set_camera_fps[] = "PyZEDCamera.set_camera_fps(self, int desired_fps)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_39set_camera_fps(PyObject *__pyx_v_self, PyObject *__pyx_arg_desired_fps) {
  int __pyx_v_desired_fps;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_fps (wrapper)", 0);
  assert(__pyx_arg_desired_fps); {
    __pyx_v_desired_fps = __Pyx_PyInt_As_int(__pyx_arg_desired_fps); if (unlikely((__pyx_v_desired_fps == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.set_camera_fps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_38set_camera_fps(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((int)__pyx_v_desired_fps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_38set_camera_fps(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, int __pyx_v_desired_fps) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_fps", 0);

  /* "pyzed/camera.pyx":580
 * 
 *     def set_camera_fps(self, int desired_fps):
 *         self.camera.setCameraFPS(desired_fps)             # <<<<<<<<<<<<<<
 * 
 *     def get_current_fps(self):
 */
  __pyx_v_self->camera.setCameraFPS(__pyx_v_desired_fps);

  /* "pyzed/camera.pyx":579
 *         return self.camera.getCameraFPS()
 * 
 *     def set_camera_fps(self, int desired_fps):             # <<<<<<<<<<<<<<
 *         self.camera.setCameraFPS(desired_fps)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":582
 *         self.camera.setCameraFPS(desired_fps)
 * 
 *     def get_current_fps(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getCurrentFPS()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_41get_current_fps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_40get_current_fps[] = "PyZEDCamera.get_current_fps(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_41get_current_fps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_current_fps (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_40get_current_fps(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_40get_current_fps(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_current_fps", 0);

  /* "pyzed/camera.pyx":583
 * 
 *     def get_current_fps(self):
 *         return self.camera.getCurrentFPS()             # <<<<<<<<<<<<<<
 * 
 *     def get_camera_timestamp(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera.getCurrentFPS()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":582
 *         self.camera.setCameraFPS(desired_fps)
 * 
 *     def get_current_fps(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getCurrentFPS()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_current_fps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":585
 *         return self.camera.getCurrentFPS()
 * 
 *     def get_camera_timestamp(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getCameraTimestamp()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_43get_camera_timestamp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_42get_camera_timestamp[] = "PyZEDCamera.get_camera_timestamp(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_43get_camera_timestamp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_camera_timestamp (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_42get_camera_timestamp(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_42get_camera_timestamp(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_camera_timestamp", 0);

  /* "pyzed/camera.pyx":586
 * 
 *     def get_camera_timestamp(self):
 *         return self.camera.getCameraTimestamp()             # <<<<<<<<<<<<<<
 * 
 *     def get_current_timestamp(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_sl_3a__3a_timeStamp(__pyx_v_self->camera.getCameraTimestamp()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":585
 *         return self.camera.getCurrentFPS()
 * 
 *     def get_camera_timestamp(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getCameraTimestamp()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_camera_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":588
 *         return self.camera.getCameraTimestamp()
 * 
 *     def get_current_timestamp(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getCurrentTimestamp()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_45get_current_timestamp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_44get_current_timestamp[] = "PyZEDCamera.get_current_timestamp(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_45get_current_timestamp(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_current_timestamp (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_44get_current_timestamp(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_44get_current_timestamp(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_current_timestamp", 0);

  /* "pyzed/camera.pyx":589
 * 
 *     def get_current_timestamp(self):
 *         return self.camera.getCurrentTimestamp()             # <<<<<<<<<<<<<<
 * 
 *     def get_frame_dropped_count(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_sl_3a__3a_timeStamp(__pyx_v_self->camera.getCurrentTimestamp()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":588
 *         return self.camera.getCameraTimestamp()
 * 
 *     def get_current_timestamp(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getCurrentTimestamp()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_current_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":591
 *         return self.camera.getCurrentTimestamp()
 * 
 *     def get_frame_dropped_count(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getFrameDroppedCount()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_47get_frame_dropped_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_46get_frame_dropped_count[] = "PyZEDCamera.get_frame_dropped_count(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_47get_frame_dropped_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_frame_dropped_count (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_46get_frame_dropped_count(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_46get_frame_dropped_count(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_frame_dropped_count", 0);

  /* "pyzed/camera.pyx":592
 * 
 *     def get_frame_dropped_count(self):
 *         return self.camera.getFrameDroppedCount()             # <<<<<<<<<<<<<<
 * 
 *     def get_camera_information(self, resizer=core.PyResolution(0, 0)):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->camera.getFrameDroppedCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":591
 *         return self.camera.getCurrentTimestamp()
 * 
 *     def get_frame_dropped_count(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getFrameDroppedCount()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_frame_dropped_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":594
 *         return self.camera.getFrameDroppedCount()
 * 
 *     def get_camera_information(self, resizer=core.PyResolution(0, 0)):             # <<<<<<<<<<<<<<
 *         return core.PyCameraInformation(self, resizer)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_49get_camera_information(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_48get_camera_information[] = "PyZEDCamera.get_camera_information(self, resizer=core.PyResolution(0, 0))";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_49get_camera_information(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_resizer = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_camera_information (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resizer,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__47;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resizer);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_camera_information") < 0)) __PYX_ERR(0, 594, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_resizer = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_camera_information", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 594, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_camera_information", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_48get_camera_information(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), __pyx_v_resizer);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_48get_camera_information(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_resizer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_camera_information", 0);

  /* "pyzed/camera.pyx":595
 * 
 *     def get_camera_information(self, resizer=core.PyResolution(0, 0)):
 *         return core.PyCameraInformation(self, resizer)             # <<<<<<<<<<<<<<
 * 
 *     def get_self_calibration_state(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_resizer);
  __Pyx_GIVEREF(__pyx_v_resizer);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_resizer);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyCameraInformation), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":594
 *         return self.camera.getFrameDroppedCount()
 * 
 *     def get_camera_information(self, resizer=core.PyResolution(0, 0)):             # <<<<<<<<<<<<<<
 *         return core.PyCameraInformation(self, resizer)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_camera_information", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":597
 *         return core.PyCameraInformation(self, resizer)
 * 
 *     def get_self_calibration_state(self):             # <<<<<<<<<<<<<<
 *         return defines.PySELF_CALIBRATION_STATE(self.camera.getSelfCalibrationState())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_51get_self_calibration_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_50get_self_calibration_state[] = "PyZEDCamera.get_self_calibration_state(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_51get_self_calibration_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_self_calibration_state (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_50get_self_calibration_state(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_50get_self_calibration_state(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_self_calibration_state", 0);

  /* "pyzed/camera.pyx":598
 * 
 *     def get_self_calibration_state(self):
 *         return defines.PySELF_CALIBRATION_STATE(self.camera.getSelfCalibrationState())             # <<<<<<<<<<<<<<
 * 
 *     def reset_self_calibration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PySELF_CALIBRATION_STATE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(__pyx_v_self->camera.getSelfCalibrationState()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":597
 *         return core.PyCameraInformation(self, resizer)
 * 
 *     def get_self_calibration_state(self):             # <<<<<<<<<<<<<<
 *         return defines.PySELF_CALIBRATION_STATE(self.camera.getSelfCalibrationState())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_self_calibration_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":600
 *         return defines.PySELF_CALIBRATION_STATE(self.camera.getSelfCalibrationState())
 * 
 *     def reset_self_calibration(self):             # <<<<<<<<<<<<<<
 *         self.camera.resetSelfCalibration()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_53reset_self_calibration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_52reset_self_calibration[] = "PyZEDCamera.reset_self_calibration(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_53reset_self_calibration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_self_calibration (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_52reset_self_calibration(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_52reset_self_calibration(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_self_calibration", 0);

  /* "pyzed/camera.pyx":601
 * 
 *     def reset_self_calibration(self):
 *         self.camera.resetSelfCalibration()             # <<<<<<<<<<<<<<
 * 
 *     def enable_tracking(self, PyTrackingParameters py_tracking):
 */
  __pyx_v_self->camera.resetSelfCalibration();

  /* "pyzed/camera.pyx":600
 *         return defines.PySELF_CALIBRATION_STATE(self.camera.getSelfCalibrationState())
 * 
 *     def reset_self_calibration(self):             # <<<<<<<<<<<<<<
 *         self.camera.resetSelfCalibration()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":603
 *         self.camera.resetSelfCalibration()
 * 
 *     def enable_tracking(self, PyTrackingParameters py_tracking):             # <<<<<<<<<<<<<<
 *         if py_tracking:
 *             return types.PyERROR_CODE(self.camera.enableTracking(deref(py_tracking.tracking)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_55enable_tracking(PyObject *__pyx_v_self, PyObject *__pyx_v_py_tracking); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_54enable_tracking[] = "PyZEDCamera.enable_tracking(self, PyTrackingParameters py_tracking)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_55enable_tracking(PyObject *__pyx_v_self, PyObject *__pyx_v_py_tracking) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enable_tracking (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_tracking), __pyx_ptype_5pyzed_6camera_PyTrackingParameters, 1, "py_tracking", 0))) __PYX_ERR(0, 603, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_54enable_tracking(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *)__pyx_v_py_tracking));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_54enable_tracking(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyTrackingParameters *__pyx_v_py_tracking) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("enable_tracking", 0);

  /* "pyzed/camera.pyx":604
 * 
 *     def enable_tracking(self, PyTrackingParameters py_tracking):
 *         if py_tracking:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.enableTracking(deref(py_tracking.tracking)))
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_py_tracking)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 604, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":605
 *     def enable_tracking(self, PyTrackingParameters py_tracking):
 *         if py_tracking:
 *             return types.PyERROR_CODE(self.camera.enableTracking(deref(py_tracking.tracking)))             # <<<<<<<<<<<<<<
 *         else:
 *             print("TrackingParameters must be initialized first with PyTrackingParameters().")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.enableTracking((*__pyx_v_py_tracking->tracking))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 605, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":604
 * 
 *     def enable_tracking(self, PyTrackingParameters py_tracking):
 *         if py_tracking:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.enableTracking(deref(py_tracking.tracking)))
 *         else:
 */
  }

  /* "pyzed/camera.pyx":607
 *             return types.PyERROR_CODE(self.camera.enableTracking(deref(py_tracking.tracking)))
 *         else:
 *             print("TrackingParameters must be initialized first with PyTrackingParameters().")             # <<<<<<<<<<<<<<
 * 
 *     def get_position(self, PyPose py_pose, reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_WORLD):
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_TrackingParameters_must_be_initi) < 0) __PYX_ERR(0, 607, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":603
 *         self.camera.resetSelfCalibration()
 * 
 *     def enable_tracking(self, PyTrackingParameters py_tracking):             # <<<<<<<<<<<<<<
 *         if py_tracking:
 *             return types.PyERROR_CODE(self.camera.enableTracking(deref(py_tracking.tracking)))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.enable_tracking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":609
 *             print("TrackingParameters must be initialized first with PyTrackingParameters().")
 * 
 *     def get_position(self, PyPose py_pose, reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_WORLD):             # <<<<<<<<<<<<<<
 *         if isinstance(reference_frame, defines.PyREFERENCE_FRAME):
 *             return defines.PyTRACKING_STATE(self.camera.getPosition(py_pose.pose, reference_frame.value))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_57get_position(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_56get_position[] = "PyZEDCamera.get_position(self, PyPose py_pose, reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_WORLD)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_57get_position(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_py_pose = 0;
  PyObject *__pyx_v_reference_frame = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_position (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_pose,&__pyx_n_s_reference_frame,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k__48;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_pose)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reference_frame);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_position") < 0)) __PYX_ERR(0, 609, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_py_pose = ((struct __pyx_obj_5pyzed_6camera_PyPose *)values[0]);
    __pyx_v_reference_frame = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_position", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 609, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_pose), __pyx_ptype_5pyzed_6camera_PyPose, 1, "py_pose", 0))) __PYX_ERR(0, 609, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_56get_position(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), __pyx_v_py_pose, __pyx_v_reference_frame);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_56get_position(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyPose *__pyx_v_py_pose, PyObject *__pyx_v_reference_frame) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  sl::REFERENCE_FRAME __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("get_position", 0);

  /* "pyzed/camera.pyx":610
 * 
 *     def get_position(self, PyPose py_pose, reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_WORLD):
 *         if isinstance(reference_frame, defines.PyREFERENCE_FRAME):             # <<<<<<<<<<<<<<
 *             return defines.PyTRACKING_STATE(self.camera.getPosition(py_pose.pose, reference_frame.value))
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyREFERENCE_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_reference_frame, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":611
 *     def get_position(self, PyPose py_pose, reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_WORLD):
 *         if isinstance(reference_frame, defines.PyREFERENCE_FRAME):
 *             return defines.PyTRACKING_STATE(self.camera.getPosition(py_pose.pose, reference_frame.value))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyREFERENCE_FRAME type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyTRACKING_STATE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_reference_frame, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = ((sl::REFERENCE_FRAME)__Pyx_PyInt_As_sl_3a__3a_REFERENCE_FRAME(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(__pyx_v_self->camera.getPosition(__pyx_v_py_pose->pose, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 611, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":610
 * 
 *     def get_position(self, PyPose py_pose, reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_WORLD):
 *         if isinstance(reference_frame, defines.PyREFERENCE_FRAME):             # <<<<<<<<<<<<<<
 *             return defines.PyTRACKING_STATE(self.camera.getPosition(py_pose.pose, reference_frame.value))
 *         else:
 */
  }

  /* "pyzed/camera.pyx":613
 *             return defines.PyTRACKING_STATE(self.camera.getPosition(py_pose.pose, reference_frame.value))
 *         else:
 *             raise TypeError("Argument is not of PyREFERENCE_FRAME type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_area_export_state(self):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 613, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":609
 *             print("TrackingParameters must be initialized first with PyTrackingParameters().")
 * 
 *     def get_position(self, PyPose py_pose, reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_WORLD):             # <<<<<<<<<<<<<<
 *         if isinstance(reference_frame, defines.PyREFERENCE_FRAME):
 *             return defines.PyTRACKING_STATE(self.camera.getPosition(py_pose.pose, reference_frame.value))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":615
 *             raise TypeError("Argument is not of PyREFERENCE_FRAME type.")
 * 
 *     def get_area_export_state(self):             # <<<<<<<<<<<<<<
 *         return defines.PyAREA_EXPORT_STATE(self.camera.getAreaExportState())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_59get_area_export_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_58get_area_export_state[] = "PyZEDCamera.get_area_export_state(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_59get_area_export_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_area_export_state (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_58get_area_export_state(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_58get_area_export_state(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_area_export_state", 0);

  /* "pyzed/camera.pyx":616
 * 
 *     def get_area_export_state(self):
 *         return defines.PyAREA_EXPORT_STATE(self.camera.getAreaExportState())             # <<<<<<<<<<<<<<
 * 
 *     def disable_tracking(self, area_file_path=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyAREA_EXPORT_STATE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(__pyx_v_self->camera.getAreaExportState()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":615
 *             raise TypeError("Argument is not of PyREFERENCE_FRAME type.")
 * 
 *     def get_area_export_state(self):             # <<<<<<<<<<<<<<
 *         return defines.PyAREA_EXPORT_STATE(self.camera.getAreaExportState())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_area_export_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":618
 *         return defines.PyAREA_EXPORT_STATE(self.camera.getAreaExportState())
 * 
 *     def disable_tracking(self, area_file_path=None):             # <<<<<<<<<<<<<<
 *         if area_file_path is None:
 *             self.camera.disableTracking(types.String(""))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_61disable_tracking(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_60disable_tracking[] = "PyZEDCamera.disable_tracking(self, area_file_path=None)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_61disable_tracking(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_area_file_path = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disable_tracking (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_area_file_path,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_area_file_path);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "disable_tracking") < 0)) __PYX_ERR(0, 618, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_area_file_path = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("disable_tracking", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 618, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.disable_tracking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_60disable_tracking(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), __pyx_v_area_file_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_60disable_tracking(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_area_file_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("disable_tracking", 0);

  /* "pyzed/camera.pyx":619
 * 
 *     def disable_tracking(self, area_file_path=None):
 *         if area_file_path is None:             # <<<<<<<<<<<<<<
 *             self.camera.disableTracking(types.String(""))
 * 
 */
  __pyx_t_1 = (__pyx_v_area_file_path == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzed/camera.pyx":620
 *     def disable_tracking(self, area_file_path=None):
 *         if area_file_path is None:
 *             self.camera.disableTracking(types.String(""))             # <<<<<<<<<<<<<<
 * 
 *     def reset_tracking(self, core.PyTransform path):
 */
    __pyx_v_self->camera.disableTracking(sl::String(((char const *)"")));

    /* "pyzed/camera.pyx":619
 * 
 *     def disable_tracking(self, area_file_path=None):
 *         if area_file_path is None:             # <<<<<<<<<<<<<<
 *             self.camera.disableTracking(types.String(""))
 * 
 */
  }

  /* "pyzed/camera.pyx":618
 *         return defines.PyAREA_EXPORT_STATE(self.camera.getAreaExportState())
 * 
 *     def disable_tracking(self, area_file_path=None):             # <<<<<<<<<<<<<<
 *         if area_file_path is None:
 *             self.camera.disableTracking(types.String(""))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":622
 *             self.camera.disableTracking(types.String(""))
 * 
 *     def reset_tracking(self, core.PyTransform path):             # <<<<<<<<<<<<<<
 *         self.camera.resetTracking(path.transform)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_63reset_tracking(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_62reset_tracking[] = "PyZEDCamera.reset_tracking(self, PyTransform path)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_63reset_tracking(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_tracking (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_5pyzed_4core_PyTransform, 1, "path", 0))) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_62reset_tracking(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_62reset_tracking(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_tracking", 0);

  /* "pyzed/camera.pyx":623
 * 
 *     def reset_tracking(self, core.PyTransform path):
 *         self.camera.resetTracking(path.transform)             # <<<<<<<<<<<<<<
 * 
 *     def enable_spatial_mapping(self, PySpatialMappingParameters py_spatial):
 */
  __pyx_v_self->camera.resetTracking(__pyx_v_path->transform);

  /* "pyzed/camera.pyx":622
 *             self.camera.disableTracking(types.String(""))
 * 
 *     def reset_tracking(self, core.PyTransform path):             # <<<<<<<<<<<<<<
 *         self.camera.resetTracking(path.transform)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":625
 *         self.camera.resetTracking(path.transform)
 * 
 *     def enable_spatial_mapping(self, PySpatialMappingParameters py_spatial):             # <<<<<<<<<<<<<<
 *         if py_spatial:
 *             return types.PyERROR_CODE(self.camera.enableSpatialMapping(deref(py_spatial.spatial)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_65enable_spatial_mapping(PyObject *__pyx_v_self, PyObject *__pyx_v_py_spatial); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_64enable_spatial_mapping[] = "PyZEDCamera.enable_spatial_mapping(self, PySpatialMappingParameters py_spatial)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_65enable_spatial_mapping(PyObject *__pyx_v_self, PyObject *__pyx_v_py_spatial) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enable_spatial_mapping (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_spatial), __pyx_ptype_5pyzed_6camera_PySpatialMappingParameters, 1, "py_spatial", 0))) __PYX_ERR(0, 625, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_64enable_spatial_mapping(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *)__pyx_v_py_spatial));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_64enable_spatial_mapping(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters *__pyx_v_py_spatial) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("enable_spatial_mapping", 0);

  /* "pyzed/camera.pyx":626
 * 
 *     def enable_spatial_mapping(self, PySpatialMappingParameters py_spatial):
 *         if py_spatial:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.enableSpatialMapping(deref(py_spatial.spatial)))
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_py_spatial)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 626, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":627
 *     def enable_spatial_mapping(self, PySpatialMappingParameters py_spatial):
 *         if py_spatial:
 *             return types.PyERROR_CODE(self.camera.enableSpatialMapping(deref(py_spatial.spatial)))             # <<<<<<<<<<<<<<
 *         else:
 *             print("SpatialMappingParameters must be initialized first with PySpatialMappingParameters()")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.enableSpatialMapping((*__pyx_v_py_spatial->spatial))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 627, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":626
 * 
 *     def enable_spatial_mapping(self, PySpatialMappingParameters py_spatial):
 *         if py_spatial:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.enableSpatialMapping(deref(py_spatial.spatial)))
 *         else:
 */
  }

  /* "pyzed/camera.pyx":629
 *             return types.PyERROR_CODE(self.camera.enableSpatialMapping(deref(py_spatial.spatial)))
 *         else:
 *             print("SpatialMappingParameters must be initialized first with PySpatialMappingParameters()")             # <<<<<<<<<<<<<<
 * 
 *     def pause_spatial_mapping(self, status):
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_SpatialMappingParameters_must_be) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":625
 *         self.camera.resetTracking(path.transform)
 * 
 *     def enable_spatial_mapping(self, PySpatialMappingParameters py_spatial):             # <<<<<<<<<<<<<<
 *         if py_spatial:
 *             return types.PyERROR_CODE(self.camera.enableSpatialMapping(deref(py_spatial.spatial)))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.enable_spatial_mapping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":631
 *             print("SpatialMappingParameters must be initialized first with PySpatialMappingParameters()")
 * 
 *     def pause_spatial_mapping(self, status):             # <<<<<<<<<<<<<<
 *         if isinstance(status, bool):
 *             self.camera.pauseSpatialMapping(status)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_67pause_spatial_mapping(PyObject *__pyx_v_self, PyObject *__pyx_v_status); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_66pause_spatial_mapping[] = "PyZEDCamera.pause_spatial_mapping(self, status)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_67pause_spatial_mapping(PyObject *__pyx_v_self, PyObject *__pyx_v_status) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause_spatial_mapping (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_66pause_spatial_mapping(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((PyObject *)__pyx_v_status));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_66pause_spatial_mapping(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_status) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("pause_spatial_mapping", 0);

  /* "pyzed/camera.pyx":632
 * 
 *     def pause_spatial_mapping(self, status):
 *         if isinstance(status, bool):             # <<<<<<<<<<<<<<
 *             self.camera.pauseSpatialMapping(status)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_status, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzed/camera.pyx":633
 *     def pause_spatial_mapping(self, status):
 *         if isinstance(status, bool):
 *             self.camera.pauseSpatialMapping(status)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of boolean type.")
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_status); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 633, __pyx_L1_error)
    __pyx_v_self->camera.pauseSpatialMapping(__pyx_t_3);

    /* "pyzed/camera.pyx":632
 * 
 *     def pause_spatial_mapping(self, status):
 *         if isinstance(status, bool):             # <<<<<<<<<<<<<<
 *             self.camera.pauseSpatialMapping(status)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/camera.pyx":635
 *             self.camera.pauseSpatialMapping(status)
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_spatial_mapping_state(self):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 635, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/camera.pyx":631
 *             print("SpatialMappingParameters must be initialized first with PySpatialMappingParameters()")
 * 
 *     def pause_spatial_mapping(self, status):             # <<<<<<<<<<<<<<
 *         if isinstance(status, bool):
 *             self.camera.pauseSpatialMapping(status)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.pause_spatial_mapping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":637
 *             raise TypeError("Argument is not of boolean type.")
 * 
 *     def get_spatial_mapping_state(self):             # <<<<<<<<<<<<<<
 *         return defines.PySPATIAL_MAPPING_STATE(self.camera.getSpatialMappingState())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_69get_spatial_mapping_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_68get_spatial_mapping_state[] = "PyZEDCamera.get_spatial_mapping_state(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_69get_spatial_mapping_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_spatial_mapping_state (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_68get_spatial_mapping_state(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_68get_spatial_mapping_state(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_spatial_mapping_state", 0);

  /* "pyzed/camera.pyx":638
 * 
 *     def get_spatial_mapping_state(self):
 *         return defines.PySPATIAL_MAPPING_STATE(self.camera.getSpatialMappingState())             # <<<<<<<<<<<<<<
 * 
 *     def extract_whole_mesh(self, mesh.PyMesh py_mesh):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PySPATIAL_MAPPING_STATE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(__pyx_v_self->camera.getSpatialMappingState()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":637
 *             raise TypeError("Argument is not of boolean type.")
 * 
 *     def get_spatial_mapping_state(self):             # <<<<<<<<<<<<<<
 *         return defines.PySPATIAL_MAPPING_STATE(self.camera.getSpatialMappingState())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_spatial_mapping_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":640
 *         return defines.PySPATIAL_MAPPING_STATE(self.camera.getSpatialMappingState())
 * 
 *     def extract_whole_mesh(self, mesh.PyMesh py_mesh):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.camera.extractWholeMesh(deref(py_mesh.mesh)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_71extract_whole_mesh(PyObject *__pyx_v_self, PyObject *__pyx_v_py_mesh); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_70extract_whole_mesh[] = "PyZEDCamera.extract_whole_mesh(self, PyMesh py_mesh)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_71extract_whole_mesh(PyObject *__pyx_v_self, PyObject *__pyx_v_py_mesh) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_whole_mesh (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mesh), __pyx_ptype_5pyzed_4mesh_PyMesh, 1, "py_mesh", 0))) __PYX_ERR(0, 640, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_70extract_whole_mesh(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4mesh_PyMesh *)__pyx_v_py_mesh));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_70extract_whole_mesh(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4mesh_PyMesh *__pyx_v_py_mesh) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("extract_whole_mesh", 0);

  /* "pyzed/camera.pyx":641
 * 
 *     def extract_whole_mesh(self, mesh.PyMesh py_mesh):
 *         return types.PyERROR_CODE(self.camera.extractWholeMesh(deref(py_mesh.mesh)))             # <<<<<<<<<<<<<<
 * 
 *     def request_mesh_async(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.extractWholeMesh((*__pyx_v_py_mesh->mesh))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":640
 *         return defines.PySPATIAL_MAPPING_STATE(self.camera.getSpatialMappingState())
 * 
 *     def extract_whole_mesh(self, mesh.PyMesh py_mesh):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.camera.extractWholeMesh(deref(py_mesh.mesh)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.extract_whole_mesh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":643
 *         return types.PyERROR_CODE(self.camera.extractWholeMesh(deref(py_mesh.mesh)))
 * 
 *     def request_mesh_async(self):             # <<<<<<<<<<<<<<
 *         self.camera.requestMeshAsync()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_73request_mesh_async(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_72request_mesh_async[] = "PyZEDCamera.request_mesh_async(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_73request_mesh_async(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("request_mesh_async (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_72request_mesh_async(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_72request_mesh_async(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("request_mesh_async", 0);

  /* "pyzed/camera.pyx":644
 * 
 *     def request_mesh_async(self):
 *         self.camera.requestMeshAsync()             # <<<<<<<<<<<<<<
 * 
 *     def get_mesh_request_status_async(self):
 */
  __pyx_v_self->camera.requestMeshAsync();

  /* "pyzed/camera.pyx":643
 *         return types.PyERROR_CODE(self.camera.extractWholeMesh(deref(py_mesh.mesh)))
 * 
 *     def request_mesh_async(self):             # <<<<<<<<<<<<<<
 *         self.camera.requestMeshAsync()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":646
 *         self.camera.requestMeshAsync()
 * 
 *     def get_mesh_request_status_async(self):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.camera.getMeshRequestStatusAsync())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_75get_mesh_request_status_async(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_74get_mesh_request_status_async[] = "PyZEDCamera.get_mesh_request_status_async(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_75get_mesh_request_status_async(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mesh_request_status_async (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_74get_mesh_request_status_async(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_74get_mesh_request_status_async(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_mesh_request_status_async", 0);

  /* "pyzed/camera.pyx":647
 * 
 *     def get_mesh_request_status_async(self):
 *         return types.PyERROR_CODE(self.camera.getMeshRequestStatusAsync())             # <<<<<<<<<<<<<<
 * 
 *     def retrieve_mesh_async(self, mesh.PyMesh py_mesh):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.getMeshRequestStatusAsync()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":646
 *         self.camera.requestMeshAsync()
 * 
 *     def get_mesh_request_status_async(self):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.camera.getMeshRequestStatusAsync())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_mesh_request_status_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":649
 *         return types.PyERROR_CODE(self.camera.getMeshRequestStatusAsync())
 * 
 *     def retrieve_mesh_async(self, mesh.PyMesh py_mesh):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.camera.retrieveMeshAsync(deref(py_mesh.mesh)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_77retrieve_mesh_async(PyObject *__pyx_v_self, PyObject *__pyx_v_py_mesh); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_76retrieve_mesh_async[] = "PyZEDCamera.retrieve_mesh_async(self, PyMesh py_mesh)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_77retrieve_mesh_async(PyObject *__pyx_v_self, PyObject *__pyx_v_py_mesh) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("retrieve_mesh_async (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mesh), __pyx_ptype_5pyzed_4mesh_PyMesh, 1, "py_mesh", 0))) __PYX_ERR(0, 649, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_76retrieve_mesh_async(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4mesh_PyMesh *)__pyx_v_py_mesh));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_76retrieve_mesh_async(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, struct __pyx_obj_5pyzed_4mesh_PyMesh *__pyx_v_py_mesh) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("retrieve_mesh_async", 0);

  /* "pyzed/camera.pyx":650
 * 
 *     def retrieve_mesh_async(self, mesh.PyMesh py_mesh):
 *         return types.PyERROR_CODE(self.camera.retrieveMeshAsync(deref(py_mesh.mesh)))             # <<<<<<<<<<<<<<
 * 
 *     def disable_spatial_mapping(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.retrieveMeshAsync((*__pyx_v_py_mesh->mesh))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":649
 *         return types.PyERROR_CODE(self.camera.getMeshRequestStatusAsync())
 * 
 *     def retrieve_mesh_async(self, mesh.PyMesh py_mesh):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.camera.retrieveMeshAsync(deref(py_mesh.mesh)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.retrieve_mesh_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":652
 *         return types.PyERROR_CODE(self.camera.retrieveMeshAsync(deref(py_mesh.mesh)))
 * 
 *     def disable_spatial_mapping(self):             # <<<<<<<<<<<<<<
 *         self.camera.disableSpatialMapping()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_79disable_spatial_mapping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_78disable_spatial_mapping[] = "PyZEDCamera.disable_spatial_mapping(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_79disable_spatial_mapping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disable_spatial_mapping (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_78disable_spatial_mapping(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_78disable_spatial_mapping(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disable_spatial_mapping", 0);

  /* "pyzed/camera.pyx":653
 * 
 *     def disable_spatial_mapping(self):
 *         self.camera.disableSpatialMapping()             # <<<<<<<<<<<<<<
 * 
 *     def enable_recording(self, str video_filename,
 */
  __pyx_v_self->camera.disableSpatialMapping();

  /* "pyzed/camera.pyx":652
 *         return types.PyERROR_CODE(self.camera.retrieveMeshAsync(deref(py_mesh.mesh)))
 * 
 *     def disable_spatial_mapping(self):             # <<<<<<<<<<<<<<
 *         self.camera.disableSpatialMapping()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":655
 *         self.camera.disableSpatialMapping()
 * 
 *     def enable_recording(self, str video_filename,             # <<<<<<<<<<<<<<
 *                           compression_mode=defines.PySVO_COMPRESSION_MODE.PySVO_COMPRESSION_MODE_LOSSLESS):
 *         if isinstance(compression_mode, defines.PySVO_COMPRESSION_MODE):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_81enable_recording(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_80enable_recording[] = "PyZEDCamera.enable_recording(self, str video_filename, compression_mode=defines.PySVO_COMPRESSION_MODE.PySVO_COMPRESSION_MODE_LOSSLESS)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_81enable_recording(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_video_filename = 0;
  PyObject *__pyx_v_compression_mode = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enable_recording (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_video_filename,&__pyx_n_s_compression_mode,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k__51;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_video_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_compression_mode);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "enable_recording") < 0)) __PYX_ERR(0, 655, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_video_filename = ((PyObject*)values[0]);
    __pyx_v_compression_mode = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enable_recording", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 655, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.enable_recording", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_video_filename), (&PyString_Type), 1, "video_filename", 1))) __PYX_ERR(0, 655, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_80enable_recording(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), __pyx_v_video_filename, __pyx_v_compression_mode);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_80enable_recording(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, PyObject *__pyx_v_video_filename, PyObject *__pyx_v_compression_mode) {
  PyObject *__pyx_v_filename = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  sl::SVO_COMPRESSION_MODE __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("enable_recording", 0);

  /* "pyzed/camera.pyx":657
 *     def enable_recording(self, str video_filename,
 *                           compression_mode=defines.PySVO_COMPRESSION_MODE.PySVO_COMPRESSION_MODE_LOSSLESS):
 *         if isinstance(compression_mode, defines.PySVO_COMPRESSION_MODE):             # <<<<<<<<<<<<<<
 *             filename = video_filename.encode()
 *             return types.PyERROR_CODE(self.camera.enableRecording(types.String(<char*> filename),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PySVO_COMPRESSION_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_compression_mode, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":658
 *                           compression_mode=defines.PySVO_COMPRESSION_MODE.PySVO_COMPRESSION_MODE_LOSSLESS):
 *         if isinstance(compression_mode, defines.PySVO_COMPRESSION_MODE):
 *             filename = video_filename.encode()             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(self.camera.enableRecording(types.String(<char*> filename),
 *                                       compression_mode.value))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_video_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_filename = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pyzed/camera.pyx":659
 *         if isinstance(compression_mode, defines.PySVO_COMPRESSION_MODE):
 *             filename = video_filename.encode()
 *             return types.PyERROR_CODE(self.camera.enableRecording(types.String(<char*> filename),             # <<<<<<<<<<<<<<
 *                                       compression_mode.value))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 659, __pyx_L1_error)

    /* "pyzed/camera.pyx":660
 *             filename = video_filename.encode()
 *             return types.PyERROR_CODE(self.camera.enableRecording(types.String(<char*> filename),
 *                                       compression_mode.value))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PySVO_COMPRESSION_MODE type.")
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_compression_mode, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = ((sl::SVO_COMPRESSION_MODE)__Pyx_PyInt_As_sl_3a__3a_SVO_COMPRESSION_MODE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyzed/camera.pyx":659
 *         if isinstance(compression_mode, defines.PySVO_COMPRESSION_MODE):
 *             filename = video_filename.encode()
 *             return types.PyERROR_CODE(self.camera.enableRecording(types.String(<char*> filename),             # <<<<<<<<<<<<<<
 *                                       compression_mode.value))
 *         else:
 */
    __pyx_t_1 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.enableRecording(sl::String(((char *)__pyx_t_6)), __pyx_t_7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 659, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":657
 *     def enable_recording(self, str video_filename,
 *                           compression_mode=defines.PySVO_COMPRESSION_MODE.PySVO_COMPRESSION_MODE_LOSSLESS):
 *         if isinstance(compression_mode, defines.PySVO_COMPRESSION_MODE):             # <<<<<<<<<<<<<<
 *             filename = video_filename.encode()
 *             return types.PyERROR_CODE(self.camera.enableRecording(types.String(<char*> filename),
 */
  }

  /* "pyzed/camera.pyx":662
 *                                       compression_mode.value))
 *         else:
 *             raise TypeError("Argument is not of PySVO_COMPRESSION_MODE type.")             # <<<<<<<<<<<<<<
 * 
 *     def record(self):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 662, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":655
 *         self.camera.disableSpatialMapping()
 * 
 *     def enable_recording(self, str video_filename,             # <<<<<<<<<<<<<<
 *                           compression_mode=defines.PySVO_COMPRESSION_MODE.PySVO_COMPRESSION_MODE_LOSSLESS):
 *         if isinstance(compression_mode, defines.PySVO_COMPRESSION_MODE):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.enable_recording", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":664
 *             raise TypeError("Argument is not of PySVO_COMPRESSION_MODE type.")
 * 
 *     def record(self):             # <<<<<<<<<<<<<<
 *         return self.camera.record()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_83record(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_82record[] = "PyZEDCamera.record(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_83record(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("record (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_82record(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_82record(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("record", 0);

  /* "pyzed/camera.pyx":665
 * 
 *     def record(self):
 *         return self.camera.record()             # <<<<<<<<<<<<<<
 * 
 *     def disable_recording(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert__to_py_struct__sl_3a__3a_RecordingState(__pyx_v_self->camera.record()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":664
 *             raise TypeError("Argument is not of PySVO_COMPRESSION_MODE type.")
 * 
 *     def record(self):             # <<<<<<<<<<<<<<
 *         return self.camera.record()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.record", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":667
 *         return self.camera.record()
 * 
 *     def disable_recording(self):             # <<<<<<<<<<<<<<
 *         self.camera.disableRecording()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_85disable_recording(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_84disable_recording[] = "PyZEDCamera.disable_recording(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_85disable_recording(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disable_recording (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_84disable_recording(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_84disable_recording(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disable_recording", 0);

  /* "pyzed/camera.pyx":668
 * 
 *     def disable_recording(self):
 *         self.camera.disableRecording()             # <<<<<<<<<<<<<<
 * 
 *     def get_sdk_version(self):
 */
  __pyx_v_self->camera.disableRecording();

  /* "pyzed/camera.pyx":667
 *         return self.camera.record()
 * 
 *     def disable_recording(self):             # <<<<<<<<<<<<<<
 *         self.camera.disableRecording()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":670
 *         self.camera.disableRecording()
 * 
 *     def get_sdk_version(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getSDKVersion().get().decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_87get_sdk_version(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_86get_sdk_version[] = "PyZEDCamera.get_sdk_version(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_87get_sdk_version(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sdk_version (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_86get_sdk_version(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_86get_sdk_version(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_sdk_version", 0);

  /* "pyzed/camera.pyx":671
 * 
 *     def get_sdk_version(self):
 *         return self.camera.getSDKVersion().get().decode()             # <<<<<<<<<<<<<<
 * 
 *     def is_zed_connected(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->camera.getSDKVersion().get();
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":670
 *         self.camera.disableRecording()
 * 
 *     def get_sdk_version(self):             # <<<<<<<<<<<<<<
 *         return self.camera.getSDKVersion().get().decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.get_sdk_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":673
 *         return self.camera.getSDKVersion().get().decode()
 * 
 *     def is_zed_connected(self):             # <<<<<<<<<<<<<<
 *         return self.camera.isZEDconnected()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_89is_zed_connected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_88is_zed_connected[] = "PyZEDCamera.is_zed_connected(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_89is_zed_connected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_zed_connected (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_88is_zed_connected(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_88is_zed_connected(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_zed_connected", 0);

  /* "pyzed/camera.pyx":674
 * 
 *     def is_zed_connected(self):
 *         return self.camera.isZEDconnected()             # <<<<<<<<<<<<<<
 * 
 *     def stickto_cpu_core(self, int cpu_core):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->camera.isZEDconnected()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":673
 *         return self.camera.getSDKVersion().get().decode()
 * 
 *     def is_zed_connected(self):             # <<<<<<<<<<<<<<
 *         return self.camera.isZEDconnected()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.is_zed_connected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":676
 *         return self.camera.isZEDconnected()
 * 
 *     def stickto_cpu_core(self, int cpu_core):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.camera.sticktoCPUCore(cpu_core))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_91stickto_cpu_core(PyObject *__pyx_v_self, PyObject *__pyx_arg_cpu_core); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_90stickto_cpu_core[] = "PyZEDCamera.stickto_cpu_core(self, int cpu_core)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_91stickto_cpu_core(PyObject *__pyx_v_self, PyObject *__pyx_arg_cpu_core) {
  int __pyx_v_cpu_core;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stickto_cpu_core (wrapper)", 0);
  assert(__pyx_arg_cpu_core); {
    __pyx_v_cpu_core = __Pyx_PyInt_As_int(__pyx_arg_cpu_core); if (unlikely((__pyx_v_cpu_core == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.stickto_cpu_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_90stickto_cpu_core(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((int)__pyx_v_cpu_core));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_90stickto_cpu_core(struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, int __pyx_v_cpu_core) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("stickto_cpu_core", 0);

  /* "pyzed/camera.pyx":677
 * 
 *     def stickto_cpu_core(self, int cpu_core):
 *         return types.PyERROR_CODE(self.camera.sticktoCPUCore(cpu_core))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->camera.sticktoCPUCore(__pyx_v_cpu_core)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/camera.pyx":676
 *         return self.camera.isZEDconnected()
 * 
 *     def stickto_cpu_core(self, int cpu_core):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.camera.sticktoCPUCore(cpu_core))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.stickto_cpu_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_93__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_92__reduce_cython__[] = "PyZEDCamera.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_93__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_92__reduce_cython__(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_92__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_95__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_6camera_11PyZEDCamera_94__setstate_cython__[] = "PyZEDCamera.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_6camera_11PyZEDCamera_95__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_6camera_11PyZEDCamera_94__setstate_cython__(((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_11PyZEDCamera_94__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.camera.PyZEDCamera.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":680
 * 
 * 
 * def save_camera_depth_as(PyZEDCamera zed, format, str name, factor=1):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_1save_camera_depth_as(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_save_camera_depth_as[] = "save_camera_depth_as(PyZEDCamera zed, format, str name, factor=1)";
static PyMethodDef __pyx_mdef_5pyzed_6camera_1save_camera_depth_as = {"save_camera_depth_as", (PyCFunction)__pyx_pw_5pyzed_6camera_1save_camera_depth_as, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_save_camera_depth_as};
static PyObject *__pyx_pw_5pyzed_6camera_1save_camera_depth_as(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_zed = 0;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_factor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_camera_depth_as (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zed,&__pyx_n_s_format,&__pyx_n_s_name,&__pyx_n_s_factor,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zed)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_camera_depth_as", 0, 3, 4, 1); __PYX_ERR(0, 680, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_camera_depth_as", 0, 3, 4, 2); __PYX_ERR(0, 680, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factor);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save_camera_depth_as") < 0)) __PYX_ERR(0, 680, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_zed = ((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)values[0]);
    __pyx_v_format = values[1];
    __pyx_v_name = ((PyObject*)values[2]);
    __pyx_v_factor = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_camera_depth_as", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 680, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.save_camera_depth_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zed), __pyx_ptype_5pyzed_6camera_PyZEDCamera, 1, "zed", 0))) __PYX_ERR(0, 680, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 680, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_save_camera_depth_as(__pyx_self, __pyx_v_zed, __pyx_v_format, __pyx_v_name, __pyx_v_factor);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_save_camera_depth_as(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_zed, PyObject *__pyx_v_format, PyObject *__pyx_v_name, PyObject *__pyx_v_factor) {
  PyObject *__pyx_v_name_save = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  sl::DEPTH_FORMAT __pyx_t_7;
  char *__pyx_t_8;
  float __pyx_t_9;
  __Pyx_RefNannySetupContext("save_camera_depth_as", 0);

  /* "pyzed/camera.pyx":681
 * 
 * def save_camera_depth_as(PyZEDCamera zed, format, str name, factor=1):
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:             # <<<<<<<<<<<<<<
 *         name_save = name.encode()
 *         return saveDepthAs(zed.camera, format.value, types.String(<char*>name_save), factor)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyDEPTH_FORMAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_format, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_factor, __pyx_int_65536, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 681, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":682
 * def save_camera_depth_as(PyZEDCamera zed, format, str name, factor=1):
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()             # <<<<<<<<<<<<<<
 *         return saveDepthAs(zed.camera, format.value, types.String(<char*>name_save), factor)
 *     else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_name_save = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyzed/camera.pyx":683
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 *         return saveDepthAs(zed.camera, format.value, types.String(<char*>name_save), factor)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Arguments must be of PyDEPTH_FORMAT type and factor not over 65536.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = ((sl::DEPTH_FORMAT)__Pyx_PyInt_As_sl_3a__3a_DEPTH_FORMAT(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_name_save); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L1_error)
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_factor); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyBool_FromLong(sl::saveDepthAs(__pyx_v_zed->camera, __pyx_t_7, sl::String(((char *)__pyx_t_8)), __pyx_t_9)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":681
 * 
 * def save_camera_depth_as(PyZEDCamera zed, format, str name, factor=1):
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:             # <<<<<<<<<<<<<<
 *         name_save = name.encode()
 *         return saveDepthAs(zed.camera, format.value, types.String(<char*>name_save), factor)
 */
  }

  /* "pyzed/camera.pyx":685
 *         return saveDepthAs(zed.camera, format.value, types.String(<char*>name_save), factor)
 *     else:
 *         raise TypeError("Arguments must be of PyDEPTH_FORMAT type and factor not over 65536.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 685, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":680
 * 
 * 
 * def save_camera_depth_as(PyZEDCamera zed, format, str name, factor=1):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.camera.save_camera_depth_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name_save);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":688
 * 
 * 
 * def save_camera_point_cloud_as(PyZEDCamera zed, format, str name, with_color=False, keep_occluded_point=False):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_3save_camera_point_cloud_as(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_2save_camera_point_cloud_as[] = "save_camera_point_cloud_as(PyZEDCamera zed, format, str name, with_color=False, keep_occluded_point=False)";
static PyMethodDef __pyx_mdef_5pyzed_6camera_3save_camera_point_cloud_as = {"save_camera_point_cloud_as", (PyCFunction)__pyx_pw_5pyzed_6camera_3save_camera_point_cloud_as, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_2save_camera_point_cloud_as};
static PyObject *__pyx_pw_5pyzed_6camera_3save_camera_point_cloud_as(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_zed = 0;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_with_color = 0;
  PyObject *__pyx_v_keep_occluded_point = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_camera_point_cloud_as (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zed,&__pyx_n_s_format,&__pyx_n_s_name,&__pyx_n_s_with_color,&__pyx_n_s_keep_occluded_point,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zed)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_camera_point_cloud_as", 0, 3, 5, 1); __PYX_ERR(0, 688, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_camera_point_cloud_as", 0, 3, 5, 2); __PYX_ERR(0, 688, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_with_color);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_occluded_point);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save_camera_point_cloud_as") < 0)) __PYX_ERR(0, 688, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_zed = ((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)values[0]);
    __pyx_v_format = values[1];
    __pyx_v_name = ((PyObject*)values[2]);
    __pyx_v_with_color = values[3];
    __pyx_v_keep_occluded_point = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_camera_point_cloud_as", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 688, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.save_camera_point_cloud_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zed), __pyx_ptype_5pyzed_6camera_PyZEDCamera, 1, "zed", 0))) __PYX_ERR(0, 688, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 688, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_2save_camera_point_cloud_as(__pyx_self, __pyx_v_zed, __pyx_v_format, __pyx_v_name, __pyx_v_with_color, __pyx_v_keep_occluded_point);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_2save_camera_point_cloud_as(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_zed, PyObject *__pyx_v_format, PyObject *__pyx_v_name, PyObject *__pyx_v_with_color, PyObject *__pyx_v_keep_occluded_point) {
  PyObject *__pyx_v_name_save = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  sl::POINT_CLOUD_FORMAT __pyx_t_6;
  char *__pyx_t_7;
  bool __pyx_t_8;
  bool __pyx_t_9;
  __Pyx_RefNannySetupContext("save_camera_point_cloud_as", 0);

  /* "pyzed/camera.pyx":689
 * 
 * def save_camera_point_cloud_as(PyZEDCamera zed, format, str name, with_color=False, keep_occluded_point=False):
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):             # <<<<<<<<<<<<<<
 *         name_save = name.encode()
 *         return savePointCloudAs(zed.camera, format.value, types.String(<char*>name_save),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyPOINT_CLOUD_FORMAT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_format, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":690
 * def save_camera_point_cloud_as(PyZEDCamera zed, format, str name, with_color=False, keep_occluded_point=False):
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()             # <<<<<<<<<<<<<<
 *         return savePointCloudAs(zed.camera, format.value, types.String(<char*>name_save),
 *                                 with_color, keep_occluded_point)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 690, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 690, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_name_save = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pyzed/camera.pyx":691
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 *         return savePointCloudAs(zed.camera, format.value, types.String(<char*>name_save),             # <<<<<<<<<<<<<<
 *                                 with_color, keep_occluded_point)
 *     else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((sl::POINT_CLOUD_FORMAT)__Pyx_PyInt_As_sl_3a__3a_POINT_CLOUD_FORMAT(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_name_save); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 691, __pyx_L1_error)

    /* "pyzed/camera.pyx":692
 *         name_save = name.encode()
 *         return savePointCloudAs(zed.camera, format.value, types.String(<char*>name_save),
 *                                 with_color, keep_occluded_point)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")
 */
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_with_color); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_keep_occluded_point); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)

    /* "pyzed/camera.pyx":691
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 *         return savePointCloudAs(zed.camera, format.value, types.String(<char*>name_save),             # <<<<<<<<<<<<<<
 *                                 with_color, keep_occluded_point)
 *     else:
 */
    __pyx_t_2 = __Pyx_PyBool_FromLong(sl::savePointCloudAs(__pyx_v_zed->camera, __pyx_t_6, sl::String(((char *)__pyx_t_7)), __pyx_t_8, __pyx_t_9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":689
 * 
 * def save_camera_point_cloud_as(PyZEDCamera zed, format, str name, with_color=False, keep_occluded_point=False):
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):             # <<<<<<<<<<<<<<
 *         name_save = name.encode()
 *         return savePointCloudAs(zed.camera, format.value, types.String(<char*>name_save),
 */
  }

  /* "pyzed/camera.pyx":694
 *                                 with_color, keep_occluded_point)
 *     else:
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")             # <<<<<<<<<<<<<<
 * 
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 694, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":688
 * 
 * 
 * def save_camera_point_cloud_as(PyZEDCamera zed, format, str name, with_color=False, keep_occluded_point=False):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.save_camera_point_cloud_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name_save);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":696
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")
 * 
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_5save_mat_depth_as(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_4save_mat_depth_as[] = "save_mat_depth_as(PyMat py_mat, format, str name, factor=1)";
static PyMethodDef __pyx_mdef_5pyzed_6camera_5save_mat_depth_as = {"save_mat_depth_as", (PyCFunction)__pyx_pw_5pyzed_6camera_5save_mat_depth_as, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_4save_mat_depth_as};
static PyObject *__pyx_pw_5pyzed_6camera_5save_mat_depth_as(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat = 0;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_factor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_mat_depth_as (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_mat,&__pyx_n_s_format,&__pyx_n_s_name,&__pyx_n_s_factor,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_mat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_mat_depth_as", 0, 3, 4, 1); __PYX_ERR(0, 696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_mat_depth_as", 0, 3, 4, 2); __PYX_ERR(0, 696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factor);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save_mat_depth_as") < 0)) __PYX_ERR(0, 696, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_py_mat = ((struct __pyx_obj_5pyzed_4core_PyMat *)values[0]);
    __pyx_v_format = values[1];
    __pyx_v_name = ((PyObject*)values[2]);
    __pyx_v_factor = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_mat_depth_as", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 696, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.save_mat_depth_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mat), __pyx_ptype_5pyzed_4core_PyMat, 1, "py_mat", 0))) __PYX_ERR(0, 696, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 696, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_4save_mat_depth_as(__pyx_self, __pyx_v_py_mat, __pyx_v_format, __pyx_v_name, __pyx_v_factor);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_4save_mat_depth_as(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, PyObject *__pyx_v_format, PyObject *__pyx_v_name, PyObject *__pyx_v_factor) {
  PyObject *__pyx_v_name_save = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  sl::DEPTH_FORMAT __pyx_t_7;
  char *__pyx_t_8;
  float __pyx_t_9;
  __Pyx_RefNannySetupContext("save_mat_depth_as", 0);

  /* "pyzed/camera.pyx":697
 * 
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:             # <<<<<<<<<<<<<<
 *         name_save = name.encode()
 *         return saveMatDepthAs(py_mat.mat, format.value, types.String(<char*>name_save), factor)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyDEPTH_FORMAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_format, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_factor, __pyx_int_65536, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 697, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/camera.pyx":698
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()             # <<<<<<<<<<<<<<
 *         return saveMatDepthAs(py_mat.mat, format.value, types.String(<char*>name_save), factor)
 *     else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 698, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_name_save = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyzed/camera.pyx":699
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 *         return saveMatDepthAs(py_mat.mat, format.value, types.String(<char*>name_save), factor)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Arguments must be of PyDEPTH_FORMAT type and factor not over 65536.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = ((sl::DEPTH_FORMAT)__Pyx_PyInt_As_sl_3a__3a_DEPTH_FORMAT(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_v_name_save); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L1_error)
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_factor); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyBool_FromLong(sl::saveMatDepthAs(__pyx_v_py_mat->mat, __pyx_t_7, sl::String(((char *)__pyx_t_8)), __pyx_t_9)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":697
 * 
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:             # <<<<<<<<<<<<<<
 *         name_save = name.encode()
 *         return saveMatDepthAs(py_mat.mat, format.value, types.String(<char*>name_save), factor)
 */
  }

  /* "pyzed/camera.pyx":701
 *         return saveMatDepthAs(py_mat.mat, format.value, types.String(<char*>name_save), factor)
 *     else:
 *         raise TypeError("Arguments must be of PyDEPTH_FORMAT type and factor not over 65536.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 701, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":696
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")
 * 
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.camera.save_mat_depth_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name_save);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/camera.pyx":704
 * 
 * 
 * def save_mat_point_cloud_as(core.PyMat py_mat, format, str name, with_color=False, keep_occluded_point=False):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_6camera_7save_mat_point_cloud_as(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_6camera_6save_mat_point_cloud_as[] = "save_mat_point_cloud_as(PyMat py_mat, format, str name, with_color=False, keep_occluded_point=False)";
static PyMethodDef __pyx_mdef_5pyzed_6camera_7save_mat_point_cloud_as = {"save_mat_point_cloud_as", (PyCFunction)__pyx_pw_5pyzed_6camera_7save_mat_point_cloud_as, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_6save_mat_point_cloud_as};
static PyObject *__pyx_pw_5pyzed_6camera_7save_mat_point_cloud_as(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat = 0;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_with_color = 0;
  PyObject *__pyx_v_keep_occluded_point = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_mat_point_cloud_as (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_mat,&__pyx_n_s_format,&__pyx_n_s_name,&__pyx_n_s_with_color,&__pyx_n_s_keep_occluded_point,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_mat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_mat_point_cloud_as", 0, 3, 5, 1); __PYX_ERR(0, 704, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_mat_point_cloud_as", 0, 3, 5, 2); __PYX_ERR(0, 704, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_with_color);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_occluded_point);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save_mat_point_cloud_as") < 0)) __PYX_ERR(0, 704, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_py_mat = ((struct __pyx_obj_5pyzed_4core_PyMat *)values[0]);
    __pyx_v_format = values[1];
    __pyx_v_name = ((PyObject*)values[2]);
    __pyx_v_with_color = values[3];
    __pyx_v_keep_occluded_point = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_mat_point_cloud_as", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 704, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.camera.save_mat_point_cloud_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mat), __pyx_ptype_5pyzed_4core_PyMat, 1, "py_mat", 0))) __PYX_ERR(0, 704, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 704, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_6camera_6save_mat_point_cloud_as(__pyx_self, __pyx_v_py_mat, __pyx_v_format, __pyx_v_name, __pyx_v_with_color, __pyx_v_keep_occluded_point);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_6camera_6save_mat_point_cloud_as(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, PyObject *__pyx_v_format, PyObject *__pyx_v_name, PyObject *__pyx_v_with_color, PyObject *__pyx_v_keep_occluded_point) {
  PyObject *__pyx_v_name_save = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  sl::POINT_CLOUD_FORMAT __pyx_t_6;
  char *__pyx_t_7;
  bool __pyx_t_8;
  bool __pyx_t_9;
  __Pyx_RefNannySetupContext("save_mat_point_cloud_as", 0);

  /* "pyzed/camera.pyx":705
 * 
 * def save_mat_point_cloud_as(core.PyMat py_mat, format, str name, with_color=False, keep_occluded_point=False):
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):             # <<<<<<<<<<<<<<
 *         name_save = name.encode()
 *         return saveMatPointCloudAs(py_mat.mat, format.value, types.String(<char*>name_save),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyPOINT_CLOUD_FORMAT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_format, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/camera.pyx":706
 * def save_mat_point_cloud_as(core.PyMat py_mat, format, str name, with_color=False, keep_occluded_point=False):
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()             # <<<<<<<<<<<<<<
 *         return saveMatPointCloudAs(py_mat.mat, format.value, types.String(<char*>name_save),
 *                                 with_color, keep_occluded_point)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_name_save = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pyzed/camera.pyx":707
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 *         return saveMatPointCloudAs(py_mat.mat, format.value, types.String(<char*>name_save),             # <<<<<<<<<<<<<<
 *                                 with_color, keep_occluded_point)
 *     else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 707, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((sl::POINT_CLOUD_FORMAT)__Pyx_PyInt_As_sl_3a__3a_POINT_CLOUD_FORMAT(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 707, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_name_save); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 707, __pyx_L1_error)

    /* "pyzed/camera.pyx":708
 *         name_save = name.encode()
 *         return saveMatPointCloudAs(py_mat.mat, format.value, types.String(<char*>name_save),
 *                                 with_color, keep_occluded_point)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")
 */
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_with_color); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 708, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_keep_occluded_point); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 708, __pyx_L1_error)

    /* "pyzed/camera.pyx":707
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 *         return saveMatPointCloudAs(py_mat.mat, format.value, types.String(<char*>name_save),             # <<<<<<<<<<<<<<
 *                                 with_color, keep_occluded_point)
 *     else:
 */
    __pyx_t_2 = __Pyx_PyBool_FromLong(sl::saveMatPointCloudAs(__pyx_v_py_mat->mat, __pyx_t_6, sl::String(((char *)__pyx_t_7)), __pyx_t_8, __pyx_t_9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 707, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/camera.pyx":705
 * 
 * def save_mat_point_cloud_as(core.PyMat py_mat, format, str name, with_color=False, keep_occluded_point=False):
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):             # <<<<<<<<<<<<<<
 *         name_save = name.encode()
 *         return saveMatPointCloudAs(py_mat.mat, format.value, types.String(<char*>name_save),
 */
  }

  /* "pyzed/camera.pyx":710
 *                                 with_color, keep_occluded_point)
 *     else:
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 710, __pyx_L1_error)
  }

  /* "pyzed/camera.pyx":704
 * 
 * 
 * def save_mat_point_cloud_as(core.PyMat py_mat, format, str name, with_color=False, keep_occluded_point=False):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.camera.save_mat_point_cloud_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name_save);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":223
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":229
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":234
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 235, __pyx_L1_error)

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":238
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 239, __pyx_L1_error)

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":252
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":259
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":273
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 276, __pyx_L1_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":295
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 295, __pyx_L1_error)
      break;
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":299
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":301
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 302, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":789
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":792
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":798
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":800
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":800
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":807
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":814
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 818, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 818, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 819, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 819, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 820, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 820, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 820, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 822, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":823
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 823, __pyx_L1_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 827, __pyx_L1_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":845
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 847, __pyx_L1_error)

        /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":850
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":854
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 854, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 857, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 857, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 858, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 858, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 858, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":859
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 859, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 859, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 859, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":862
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 862, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 862, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 862, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":863
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":864
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":865
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":866
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":868
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(2, 868, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 873, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":874
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":990
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":993
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":996
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":998
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":990
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1004
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1011
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1011, __pyx_L3_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1012, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1013
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1013, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1013, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1015
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1017
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1017, __pyx_L3_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1018
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1018, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1019
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1019, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1019, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1015
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1023, __pyx_L3_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1024, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1025, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1025, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_float____float")
 * cdef object __pyx_convert_pair_to_py_float____float(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_float____float(std::pair<float,float>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_float____float", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_float____float")
 * cdef object __pyx_convert_pair_to_py_float____float(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_float____float")
 * cdef object __pyx_convert_pair_to_py_float____float(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_float____float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_float__and_float")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_float__and_float(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<float,float>  __pyx_convert_pair_from_py_float__and_float(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<float,float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  float __pyx_t_5;
  float __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_float__and_float", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_float__and_float")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_float__and_float(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_float__and_float(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_y); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_r = std::pair<float,float> (((float)__pyx_t_5), ((float)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_float__and_float")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_float__and_float(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_float__and_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5pyzed_6camera_PyZEDCamera(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pyzed_6camera_PyZEDCamera *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)o);
  new((void*)&(p->camera)) sl::Camera();
  if (unlikely(__pyx_pw_5pyzed_6camera_11PyZEDCamera_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_6camera_PyZEDCamera(PyObject *o) {
  struct __pyx_obj_5pyzed_6camera_PyZEDCamera *p = (struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->camera);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzed_6camera_PyZEDCamera[] = {
  {"close", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_3close, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_2close},
  {"open", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_5open, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_4open},
  {"is_opened", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_7is_opened, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_6is_opened},
  {"grab", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_9grab, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_8grab},
  {"retrieve_image", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_11retrieve_image, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_10retrieve_image},
  {"retrieve_measure", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_13retrieve_measure, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_12retrieve_measure},
  {"set_confidence_threshold", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_15set_confidence_threshold, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_14set_confidence_threshold},
  {"get_confidence_threshold", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_17get_confidence_threshold, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_16get_confidence_threshold},
  {"get_resolution", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_19get_resolution, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_18get_resolution},
  {"set_depth_max_range_value", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_21set_depth_max_range_value, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_20set_depth_max_range_value},
  {"get_depth_max_range_value", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_23get_depth_max_range_value, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_22get_depth_max_range_value},
  {"get_depth_min_range_value", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_25get_depth_min_range_value, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_24get_depth_min_range_value},
  {"set_svo_position", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_27set_svo_position, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_26set_svo_position},
  {"get_svo_position", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_29get_svo_position, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_28get_svo_position},
  {"get_svo_number_of_frames", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_31get_svo_number_of_frames, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_30get_svo_number_of_frames},
  {"set_camera_settings", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_33set_camera_settings, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_32set_camera_settings},
  {"get_camera_settings", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_35get_camera_settings, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_34get_camera_settings},
  {"get_camera_fps", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_37get_camera_fps, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_36get_camera_fps},
  {"set_camera_fps", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_39set_camera_fps, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_38set_camera_fps},
  {"get_current_fps", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_41get_current_fps, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_40get_current_fps},
  {"get_camera_timestamp", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_43get_camera_timestamp, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_42get_camera_timestamp},
  {"get_current_timestamp", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_45get_current_timestamp, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_44get_current_timestamp},
  {"get_frame_dropped_count", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_47get_frame_dropped_count, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_46get_frame_dropped_count},
  {"get_camera_information", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_49get_camera_information, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_48get_camera_information},
  {"get_self_calibration_state", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_51get_self_calibration_state, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_50get_self_calibration_state},
  {"reset_self_calibration", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_53reset_self_calibration, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_52reset_self_calibration},
  {"enable_tracking", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_55enable_tracking, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_54enable_tracking},
  {"get_position", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_57get_position, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_56get_position},
  {"get_area_export_state", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_59get_area_export_state, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_58get_area_export_state},
  {"disable_tracking", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_61disable_tracking, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_60disable_tracking},
  {"reset_tracking", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_63reset_tracking, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_62reset_tracking},
  {"enable_spatial_mapping", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_65enable_spatial_mapping, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_64enable_spatial_mapping},
  {"pause_spatial_mapping", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_67pause_spatial_mapping, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_66pause_spatial_mapping},
  {"get_spatial_mapping_state", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_69get_spatial_mapping_state, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_68get_spatial_mapping_state},
  {"extract_whole_mesh", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_71extract_whole_mesh, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_70extract_whole_mesh},
  {"request_mesh_async", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_73request_mesh_async, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_72request_mesh_async},
  {"get_mesh_request_status_async", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_75get_mesh_request_status_async, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_74get_mesh_request_status_async},
  {"retrieve_mesh_async", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_77retrieve_mesh_async, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_76retrieve_mesh_async},
  {"disable_spatial_mapping", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_79disable_spatial_mapping, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_78disable_spatial_mapping},
  {"enable_recording", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_81enable_recording, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_80enable_recording},
  {"record", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_83record, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_82record},
  {"disable_recording", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_85disable_recording, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_84disable_recording},
  {"get_sdk_version", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_87get_sdk_version, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_86get_sdk_version},
  {"is_zed_connected", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_89is_zed_connected, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_88is_zed_connected},
  {"stickto_cpu_core", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_91stickto_cpu_core, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_90stickto_cpu_core},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_93__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_6camera_11PyZEDCamera_92__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_11PyZEDCamera_95__setstate_cython__, METH_O, __pyx_doc_5pyzed_6camera_11PyZEDCamera_94__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_6camera_PyZEDCamera = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.camera.PyZEDCamera", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_6camera_PyZEDCamera), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_6camera_PyZEDCamera, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_6camera_PyZEDCamera, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_6camera_PyZEDCamera, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_6camera_PyInitParameters(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzed_6camera_16PyInitParameters_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_6camera_PyInitParameters(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_resolution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_resolution_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_resolution(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_resolution_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_fps(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_10camera_fps_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_fps(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_10camera_fps_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_linux_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_15camera_linux_id_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_linux_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_15camera_linux_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_svo_input_filename(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_input_filename_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_svo_input_filename(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_input_filename_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_svo_real_time_mode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_svo_real_time_mode(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_18svo_real_time_mode_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_depth_mode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_10depth_mode_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_depth_mode(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_10depth_mode_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_coordinate_units(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_16coordinate_units_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_coordinate_units(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_16coordinate_units_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_coordinate_system(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_17coordinate_system_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_coordinate_system(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_17coordinate_system_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_sdk_verbose(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_11sdk_verbose_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_sdk_verbose(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_11sdk_verbose_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_sdk_gpu_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_sdk_gpu_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_10sdk_gpu_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_depth_minimum_distance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_depth_minimum_distance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_22depth_minimum_distance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_disable_self_calib(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_disable_self_calib(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_disable_self_calib_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_image_flip(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_image_flip_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_image_flip(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_17camera_image_flip_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_enable_right_side_measure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_enable_right_side_measure(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_25enable_right_side_measure_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_buffer_count_linux(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_buffer_count_linux(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_25camera_buffer_count_linux_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_sdk_verbose_log_file(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_sdk_verbose_log_file(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_20sdk_verbose_log_file_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_16PyInitParameters_depth_stabilization(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_16PyInitParameters_19depth_stabilization_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_16PyInitParameters_depth_stabilization(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_16PyInitParameters_19depth_stabilization_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzed_6camera_PyInitParameters[] = {
  {"save", (PyCFunction)__pyx_pw_5pyzed_6camera_16PyInitParameters_3save, METH_O, __pyx_doc_5pyzed_6camera_16PyInitParameters_2save},
  {"load", (PyCFunction)__pyx_pw_5pyzed_6camera_16PyInitParameters_5load, METH_O, __pyx_doc_5pyzed_6camera_16PyInitParameters_4load},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_16PyInitParameters_7__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_6camera_16PyInitParameters_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_16PyInitParameters_9__setstate_cython__, METH_O, __pyx_doc_5pyzed_6camera_16PyInitParameters_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_6camera_PyInitParameters[] = {
  {(char *)"camera_resolution", __pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_resolution, __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_resolution, (char *)0, 0},
  {(char *)"camera_fps", __pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_fps, __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_fps, (char *)0, 0},
  {(char *)"camera_linux_id", __pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_linux_id, __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_linux_id, (char *)0, 0},
  {(char *)"svo_input_filename", __pyx_getprop_5pyzed_6camera_16PyInitParameters_svo_input_filename, __pyx_setprop_5pyzed_6camera_16PyInitParameters_svo_input_filename, (char *)0, 0},
  {(char *)"svo_real_time_mode", __pyx_getprop_5pyzed_6camera_16PyInitParameters_svo_real_time_mode, __pyx_setprop_5pyzed_6camera_16PyInitParameters_svo_real_time_mode, (char *)0, 0},
  {(char *)"depth_mode", __pyx_getprop_5pyzed_6camera_16PyInitParameters_depth_mode, __pyx_setprop_5pyzed_6camera_16PyInitParameters_depth_mode, (char *)0, 0},
  {(char *)"coordinate_units", __pyx_getprop_5pyzed_6camera_16PyInitParameters_coordinate_units, __pyx_setprop_5pyzed_6camera_16PyInitParameters_coordinate_units, (char *)0, 0},
  {(char *)"coordinate_system", __pyx_getprop_5pyzed_6camera_16PyInitParameters_coordinate_system, __pyx_setprop_5pyzed_6camera_16PyInitParameters_coordinate_system, (char *)0, 0},
  {(char *)"sdk_verbose", __pyx_getprop_5pyzed_6camera_16PyInitParameters_sdk_verbose, __pyx_setprop_5pyzed_6camera_16PyInitParameters_sdk_verbose, (char *)0, 0},
  {(char *)"sdk_gpu_id", __pyx_getprop_5pyzed_6camera_16PyInitParameters_sdk_gpu_id, __pyx_setprop_5pyzed_6camera_16PyInitParameters_sdk_gpu_id, (char *)0, 0},
  {(char *)"depth_minimum_distance", __pyx_getprop_5pyzed_6camera_16PyInitParameters_depth_minimum_distance, __pyx_setprop_5pyzed_6camera_16PyInitParameters_depth_minimum_distance, (char *)0, 0},
  {(char *)"camera_disable_self_calib", __pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_disable_self_calib, __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_disable_self_calib, (char *)0, 0},
  {(char *)"camera_image_flip", __pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_image_flip, __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_image_flip, (char *)0, 0},
  {(char *)"enable_right_side_measure", __pyx_getprop_5pyzed_6camera_16PyInitParameters_enable_right_side_measure, __pyx_setprop_5pyzed_6camera_16PyInitParameters_enable_right_side_measure, (char *)0, 0},
  {(char *)"camera_buffer_count_linux", __pyx_getprop_5pyzed_6camera_16PyInitParameters_camera_buffer_count_linux, __pyx_setprop_5pyzed_6camera_16PyInitParameters_camera_buffer_count_linux, (char *)0, 0},
  {(char *)"sdk_verbose_log_file", __pyx_getprop_5pyzed_6camera_16PyInitParameters_sdk_verbose_log_file, __pyx_setprop_5pyzed_6camera_16PyInitParameters_sdk_verbose_log_file, (char *)0, 0},
  {(char *)"depth_stabilization", __pyx_getprop_5pyzed_6camera_16PyInitParameters_depth_stabilization, __pyx_setprop_5pyzed_6camera_16PyInitParameters_depth_stabilization, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_6camera_PyInitParameters = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.camera.PyInitParameters", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_6camera_PyInitParameters), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_6camera_PyInitParameters, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_6camera_PyInitParameters, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_6camera_PyInitParameters, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_6camera_PyInitParameters, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_6camera_PyRuntimeParameters(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_6camera_PyRuntimeParameters(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_19PyRuntimeParameters_sensing_mode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_19PyRuntimeParameters_sensing_mode(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12sensing_mode_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_19PyRuntimeParameters_enable_depth(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_19PyRuntimeParameters_enable_depth(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_12enable_depth_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_19PyRuntimeParameters_measure3D_reference_frame(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_19PyRuntimeParameters_measure3D_reference_frame(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_19PyRuntimeParameters_25measure3D_reference_frame_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzed_6camera_PyRuntimeParameters[] = {
  {"save", (PyCFunction)__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_3save, METH_O, __pyx_doc_5pyzed_6camera_19PyRuntimeParameters_2save},
  {"load", (PyCFunction)__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_5load, METH_O, __pyx_doc_5pyzed_6camera_19PyRuntimeParameters_4load},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_7__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_6camera_19PyRuntimeParameters_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_19PyRuntimeParameters_9__setstate_cython__, METH_O, __pyx_doc_5pyzed_6camera_19PyRuntimeParameters_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_6camera_PyRuntimeParameters[] = {
  {(char *)"sensing_mode", __pyx_getprop_5pyzed_6camera_19PyRuntimeParameters_sensing_mode, __pyx_setprop_5pyzed_6camera_19PyRuntimeParameters_sensing_mode, (char *)0, 0},
  {(char *)"enable_depth", __pyx_getprop_5pyzed_6camera_19PyRuntimeParameters_enable_depth, __pyx_setprop_5pyzed_6camera_19PyRuntimeParameters_enable_depth, (char *)0, 0},
  {(char *)"measure3D_reference_frame", __pyx_getprop_5pyzed_6camera_19PyRuntimeParameters_measure3D_reference_frame, __pyx_setprop_5pyzed_6camera_19PyRuntimeParameters_measure3D_reference_frame, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_6camera_PyRuntimeParameters = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.camera.PyRuntimeParameters", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_6camera_PyRuntimeParameters), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_6camera_PyRuntimeParameters, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_6camera_PyRuntimeParameters, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_6camera_PyRuntimeParameters, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_6camera_PyRuntimeParameters, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_6camera_PyTrackingParameters(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzed_6camera_20PyTrackingParameters_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_6camera_PyTrackingParameters(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_20PyTrackingParameters_enable_spatial_memory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_20PyTrackingParameters_enable_spatial_memory(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_20PyTrackingParameters_21enable_spatial_memory_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_20PyTrackingParameters_area_file_path(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_20PyTrackingParameters_14area_file_path_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_20PyTrackingParameters_area_file_path(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_20PyTrackingParameters_14area_file_path_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzed_6camera_PyTrackingParameters[] = {
  {"save", (PyCFunction)__pyx_pw_5pyzed_6camera_20PyTrackingParameters_3save, METH_O, __pyx_doc_5pyzed_6camera_20PyTrackingParameters_2save},
  {"load", (PyCFunction)__pyx_pw_5pyzed_6camera_20PyTrackingParameters_5load, METH_O, __pyx_doc_5pyzed_6camera_20PyTrackingParameters_4load},
  {"initial_world_transform", (PyCFunction)__pyx_pw_5pyzed_6camera_20PyTrackingParameters_7initial_world_transform, METH_O, __pyx_doc_5pyzed_6camera_20PyTrackingParameters_6initial_world_transform},
  {"set_initial_world_transform", (PyCFunction)__pyx_pw_5pyzed_6camera_20PyTrackingParameters_9set_initial_world_transform, METH_O, __pyx_doc_5pyzed_6camera_20PyTrackingParameters_8set_initial_world_transform},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_20PyTrackingParameters_11__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_6camera_20PyTrackingParameters_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_20PyTrackingParameters_13__setstate_cython__, METH_O, __pyx_doc_5pyzed_6camera_20PyTrackingParameters_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_6camera_PyTrackingParameters[] = {
  {(char *)"enable_spatial_memory", __pyx_getprop_5pyzed_6camera_20PyTrackingParameters_enable_spatial_memory, __pyx_setprop_5pyzed_6camera_20PyTrackingParameters_enable_spatial_memory, (char *)0, 0},
  {(char *)"area_file_path", __pyx_getprop_5pyzed_6camera_20PyTrackingParameters_area_file_path, __pyx_setprop_5pyzed_6camera_20PyTrackingParameters_area_file_path, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_6camera_PyTrackingParameters = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.camera.PyTrackingParameters", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_6camera_PyTrackingParameters), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_6camera_PyTrackingParameters, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_6camera_PyTrackingParameters, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_6camera_PyTrackingParameters, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_6camera_PyTrackingParameters, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_6camera_PySpatialMappingParameters(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_6camera_PySpatialMappingParameters(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_max_memory_usage(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_max_memory_usage(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16max_memory_usage_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_save_texture(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_save_texture(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_12save_texture_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_keep_mesh_consistent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_keep_mesh_consistent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_20keep_mesh_consistent_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_inverse_triangle_vertices_order(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_inverse_triangle_vertices_order(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_31inverse_triangle_vertices_order_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_allowed_min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11allowed_min_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_allowed_max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11allowed_max_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_range_meter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_range_meter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11range_meter_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_allowed_resolution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_18allowed_resolution_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_resolution_meter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_1__get__(o);
}

static int __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_resolution_meter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_16resolution_meter_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzed_6camera_PySpatialMappingParameters[] = {
  {"get_resolution", (PyCFunction)__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_3get_resolution, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_2get_resolution},
  {"set_resolution", (PyCFunction)__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_5set_resolution, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_4set_resolution},
  {"get_range", (PyCFunction)__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_7get_range, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_6get_range},
  {"set_range", (PyCFunction)__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_9set_range, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_8set_range},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_11__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_26PySpatialMappingParameters_13__setstate_cython__, METH_O, __pyx_doc_5pyzed_6camera_26PySpatialMappingParameters_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_6camera_PySpatialMappingParameters[] = {
  {(char *)"max_memory_usage", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_max_memory_usage, __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_max_memory_usage, (char *)0, 0},
  {(char *)"save_texture", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_save_texture, __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_save_texture, (char *)0, 0},
  {(char *)"keep_mesh_consistent", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_keep_mesh_consistent, __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_keep_mesh_consistent, (char *)0, 0},
  {(char *)"inverse_triangle_vertices_order", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_inverse_triangle_vertices_order, __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_inverse_triangle_vertices_order, (char *)0, 0},
  {(char *)"allowed_min", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_allowed_min, 0, (char *)0, 0},
  {(char *)"allowed_max", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_allowed_max, 0, (char *)0, 0},
  {(char *)"range_meter", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_range_meter, __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_range_meter, (char *)0, 0},
  {(char *)"allowed_resolution", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_allowed_resolution, 0, (char *)0, 0},
  {(char *)"resolution_meter", __pyx_getprop_5pyzed_6camera_26PySpatialMappingParameters_resolution_meter, __pyx_setprop_5pyzed_6camera_26PySpatialMappingParameters_resolution_meter, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_6camera_PySpatialMappingParameters = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.camera.PySpatialMappingParameters", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_6camera_PySpatialMappingParameters), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_6camera_PySpatialMappingParameters, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_6camera_PySpatialMappingParameters, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_6camera_PySpatialMappingParameters, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_6camera_PySpatialMappingParameters, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_6camera_PyPose(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pyzed_6camera_PyPose *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_6camera_PyPose *)o);
  new((void*)&(p->pose)) sl::Pose();
  if (unlikely(__pyx_pw_5pyzed_6camera_6PyPose_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_6camera_PyPose(PyObject *o) {
  struct __pyx_obj_5pyzed_6camera_PyPose *p = (struct __pyx_obj_5pyzed_6camera_PyPose *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->pose);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_6PyPose_valid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_6PyPose_5valid_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_6PyPose_timestamp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_6PyPose_9timestamp_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_6camera_6PyPose_pose_confidence(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_6camera_6PyPose_15pose_confidence_1__get__(o);
}

static PyMethodDef __pyx_methods_5pyzed_6camera_PyPose[] = {
  {"init_pose", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_3init_pose, METH_O, __pyx_doc_5pyzed_6camera_6PyPose_2init_pose},
  {"init_transform", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_5init_transform, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_6PyPose_4init_transform},
  {"get_translation", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_7get_translation, METH_O, __pyx_doc_5pyzed_6camera_6PyPose_6get_translation},
  {"get_orientation", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_9get_orientation, METH_O, __pyx_doc_5pyzed_6camera_6PyPose_8get_orientation},
  {"get_rotation_matrix", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_11get_rotation_matrix, METH_O, __pyx_doc_5pyzed_6camera_6PyPose_10get_rotation_matrix},
  {"get_rotation_vector", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_13get_rotation_vector, METH_NOARGS, __pyx_doc_5pyzed_6camera_6PyPose_12get_rotation_vector},
  {"get_euler_angles", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_15get_euler_angles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_6camera_6PyPose_14get_euler_angles},
  {"pose_data", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_17pose_data, METH_O, __pyx_doc_5pyzed_6camera_6PyPose_16pose_data},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_19__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_6camera_6PyPose_18__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_6camera_6PyPose_21__setstate_cython__, METH_O, __pyx_doc_5pyzed_6camera_6PyPose_20__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_6camera_PyPose[] = {
  {(char *)"valid", __pyx_getprop_5pyzed_6camera_6PyPose_valid, 0, (char *)0, 0},
  {(char *)"timestamp", __pyx_getprop_5pyzed_6camera_6PyPose_timestamp, 0, (char *)0, 0},
  {(char *)"pose_confidence", __pyx_getprop_5pyzed_6camera_6PyPose_pose_confidence, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_6camera_PyPose = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.camera.PyPose", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_6camera_PyPose), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_6camera_PyPose, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_6camera_PyPose, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_6camera_PyPose, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_6camera_PyPose, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_camera(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_camera},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "camera",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Argument_init_pos_must_be_initia, __pyx_k_Argument_init_pos_must_be_initia, sizeof(__pyx_k_Argument_init_pos_must_be_initia), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_PyCAMERA_SETT, __pyx_k_Argument_is_not_of_PyCAMERA_SETT, sizeof(__pyx_k_Argument_is_not_of_PyCAMERA_SETT), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_PyPOINT_CLOUD, __pyx_k_Argument_is_not_of_PyPOINT_CLOUD, sizeof(__pyx_k_Argument_is_not_of_PyPOINT_CLOUD), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_PyRANGE_type, __pyx_k_Argument_is_not_of_PyRANGE_type, sizeof(__pyx_k_Argument_is_not_of_PyRANGE_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_PyREFERENCE_F, __pyx_k_Argument_is_not_of_PyREFERENCE_F, sizeof(__pyx_k_Argument_is_not_of_PyREFERENCE_F), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_PyRESOLUTION, __pyx_k_Argument_is_not_of_PyRESOLUTION, sizeof(__pyx_k_Argument_is_not_of_PyRESOLUTION), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_PySVO_COMPRES, __pyx_k_Argument_is_not_of_PySVO_COMPRES, sizeof(__pyx_k_Argument_is_not_of_PySVO_COMPRES), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_bool_type, __pyx_k_Argument_is_not_of_bool_type, sizeof(__pyx_k_Argument_is_not_of_bool_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_boolean_type, __pyx_k_Argument_is_not_of_boolean_type, sizeof(__pyx_k_Argument_is_not_of_boolean_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_right_type, __pyx_k_Argument_is_not_of_right_type, sizeof(__pyx_k_Argument_is_not_of_right_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_must_be_of_PyCOORDINATE, __pyx_k_Argument_must_be_of_PyCOORDINATE, sizeof(__pyx_k_Argument_must_be_of_PyCOORDINATE), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_must_be_of_PyDEPTH_MODE, __pyx_k_Argument_must_be_of_PyDEPTH_MODE, sizeof(__pyx_k_Argument_must_be_of_PyDEPTH_MODE), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_must_be_of_PyREFERENCE, __pyx_k_Argument_must_be_of_PyREFERENCE, sizeof(__pyx_k_Argument_must_be_of_PyREFERENCE), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_must_be_of_PyRESOLUTION, __pyx_k_Argument_must_be_of_PyRESOLUTION, sizeof(__pyx_k_Argument_must_be_of_PyRESOLUTION), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_must_be_of_PySENSING_MO, __pyx_k_Argument_must_be_of_PySENSING_MO, sizeof(__pyx_k_Argument_must_be_of_PySENSING_MO), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_must_be_of_PyUNIT_type, __pyx_k_Argument_must_be_of_PyUNIT_type, sizeof(__pyx_k_Argument_must_be_of_PyUNIT_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Arguments_must_be_of_PyCAMERA_SE, __pyx_k_Arguments_must_be_of_PyCAMERA_SE, sizeof(__pyx_k_Arguments_must_be_of_PyCAMERA_SE), 0, 0, 1, 0},
  {&__pyx_kp_s_Arguments_must_be_of_PyDEPTH_FOR, __pyx_k_Arguments_must_be_of_PyDEPTH_FOR, sizeof(__pyx_k_Arguments_must_be_of_PyDEPTH_FOR), 0, 0, 1, 0},
  {&__pyx_kp_s_Arguments_must_be_of_PyMEASURE_P, __pyx_k_Arguments_must_be_of_PyMEASURE_P, sizeof(__pyx_k_Arguments_must_be_of_PyMEASURE_P), 0, 0, 1, 0},
  {&__pyx_kp_s_Arguments_must_be_of_PyVIEW_PyME, __pyx_k_Arguments_must_be_of_PyVIEW_PyME, sizeof(__pyx_k_Arguments_must_be_of_PyVIEW_PyME), 0, 0, 1, 0},
  {&__pyx_n_s_Enum, __pyx_k_Enum, sizeof(__pyx_k_Enum), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_InitParameters_must_be_initializ, __pyx_k_InitParameters_must_be_initializ, sizeof(__pyx_k_InitParameters_must_be_initializ), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_PyAREA_EXPORT_STATE, __pyx_k_PyAREA_EXPORT_STATE, sizeof(__pyx_k_PyAREA_EXPORT_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS, __pyx_k_PyCAMERA_SETTINGS, sizeof(__pyx_k_PyCAMERA_SETTINGS), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM, __pyx_k_PyCOORDINATE_SYSTEM, sizeof(__pyx_k_PyCOORDINATE_SYSTEM), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM_IMAGE, __pyx_k_PyCOORDINATE_SYSTEM_IMAGE, sizeof(__pyx_k_PyCOORDINATE_SYSTEM_IMAGE), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_FORMAT, __pyx_k_PyDEPTH_FORMAT, sizeof(__pyx_k_PyDEPTH_FORMAT), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE, __pyx_k_PyDEPTH_MODE, sizeof(__pyx_k_PyDEPTH_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE_PERFORMANCE, __pyx_k_PyDEPTH_MODE_PERFORMANCE, sizeof(__pyx_k_PyDEPTH_MODE_PERFORMANCE), 0, 0, 1, 1},
  {&__pyx_n_s_PyERROR_CODE, __pyx_k_PyERROR_CODE, sizeof(__pyx_k_PyERROR_CODE), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE, __pyx_k_PyMEASURE, sizeof(__pyx_k_PyMEASURE), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_DEPTH, __pyx_k_PyMEASURE_DEPTH, sizeof(__pyx_k_PyMEASURE_DEPTH), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEM, __pyx_k_PyMEM, sizeof(__pyx_k_PyMEM), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEM_CPU, __pyx_k_PyMEM_CPU, sizeof(__pyx_k_PyMEM_CPU), 0, 0, 1, 1},
  {&__pyx_n_s_PyPOINT_CLOUD_FORMAT, __pyx_k_PyPOINT_CLOUD_FORMAT, sizeof(__pyx_k_PyPOINT_CLOUD_FORMAT), 0, 0, 1, 1},
  {&__pyx_n_s_PyRANGE, __pyx_k_PyRANGE, sizeof(__pyx_k_PyRANGE), 0, 0, 1, 1},
  {&__pyx_n_s_PyRANGE_FAR, __pyx_k_PyRANGE_FAR, sizeof(__pyx_k_PyRANGE_FAR), 0, 0, 1, 1},
  {&__pyx_n_s_PyRANGE_MEDIUM, __pyx_k_PyRANGE_MEDIUM, sizeof(__pyx_k_PyRANGE_MEDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_PyRANGE_NEAR, __pyx_k_PyRANGE_NEAR, sizeof(__pyx_k_PyRANGE_NEAR), 0, 0, 1, 1},
  {&__pyx_n_s_PyREFERENCE_FRAME, __pyx_k_PyREFERENCE_FRAME, sizeof(__pyx_k_PyREFERENCE_FRAME), 0, 0, 1, 1},
  {&__pyx_n_s_PyREFERENCE_FRAME_CAMERA, __pyx_k_PyREFERENCE_FRAME_CAMERA, sizeof(__pyx_k_PyREFERENCE_FRAME_CAMERA), 0, 0, 1, 1},
  {&__pyx_n_s_PyREFERENCE_FRAME_WORLD, __pyx_k_PyREFERENCE_FRAME_WORLD, sizeof(__pyx_k_PyREFERENCE_FRAME_WORLD), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION, __pyx_k_PyRESOLUTION, sizeof(__pyx_k_PyRESOLUTION), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_HD720, __pyx_k_PyRESOLUTION_HD720, sizeof(__pyx_k_PyRESOLUTION_HD720), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_HIGH, __pyx_k_PyRESOLUTION_HIGH, sizeof(__pyx_k_PyRESOLUTION_HIGH), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_LOW, __pyx_k_PyRESOLUTION_LOW, sizeof(__pyx_k_PyRESOLUTION_LOW), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_MEDIUM, __pyx_k_PyRESOLUTION_MEDIUM, sizeof(__pyx_k_PyRESOLUTION_MEDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_PyResolution, __pyx_k_PyResolution, sizeof(__pyx_k_PyResolution), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE, __pyx_k_PySELF_CALIBRATION_STATE, sizeof(__pyx_k_PySELF_CALIBRATION_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_PySENSING_MODE, __pyx_k_PySENSING_MODE, sizeof(__pyx_k_PySENSING_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_PySENSING_MODE_STANDARD, __pyx_k_PySENSING_MODE_STANDARD, sizeof(__pyx_k_PySENSING_MODE_STANDARD), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE, __pyx_k_PySPATIAL_MAPPING_STATE, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_PySVO_COMPRESSION_MODE, __pyx_k_PySVO_COMPRESSION_MODE, sizeof(__pyx_k_PySVO_COMPRESSION_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_PySVO_COMPRESSION_MODE_LOSSLESS, __pyx_k_PySVO_COMPRESSION_MODE_LOSSLESS, sizeof(__pyx_k_PySVO_COMPRESSION_MODE_LOSSLESS), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE, __pyx_k_PyTRACKING_STATE, sizeof(__pyx_k_PyTRACKING_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT, __pyx_k_PyUNIT, sizeof(__pyx_k_PyUNIT), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT_MILLIMETER, __pyx_k_PyUNIT_MILLIMETER, sizeof(__pyx_k_PyUNIT_MILLIMETER), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW, __pyx_k_PyVIEW, sizeof(__pyx_k_PyVIEW), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_LEFT, __pyx_k_PyVIEW_LEFT, sizeof(__pyx_k_PyVIEW_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_RuntimeParameters_must_be_initia, __pyx_k_RuntimeParameters_must_be_initia, sizeof(__pyx_k_RuntimeParameters_must_be_initia), 0, 0, 1, 0},
  {&__pyx_kp_s_SpatialMappingParameters_must_be, __pyx_k_SpatialMappingParameters_must_be, sizeof(__pyx_k_SpatialMappingParameters_must_be), 0, 0, 1, 0},
  {&__pyx_kp_s_TrackingParameters_must_be_initi, __pyx_k_TrackingParameters_must_be_initi, sizeof(__pyx_k_TrackingParameters_must_be_initi), 0, 0, 1, 0},
  {&__pyx_kp_s_Tuple_values_must_fit_in_min_and, __pyx_k_Tuple_values_must_fit_in_min_and, sizeof(__pyx_k_Tuple_values_must_fit_in_min_and), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_n_s__68, __pyx_k__68, sizeof(__pyx_k__68), 0, 0, 1, 1},
  {&__pyx_n_s_allowed_max, __pyx_k_allowed_max, sizeof(__pyx_k_allowed_max), 0, 0, 1, 1},
  {&__pyx_n_s_allowed_min, __pyx_k_allowed_min, sizeof(__pyx_k_allowed_min), 0, 0, 1, 1},
  {&__pyx_n_s_area_file_path, __pyx_k_area_file_path, sizeof(__pyx_k_area_file_path), 0, 0, 1, 1},
  {&__pyx_n_s_area_path, __pyx_k_area_path, sizeof(__pyx_k_area_path), 0, 0, 1, 1},
  {&__pyx_n_s_average_compression_ratio, __pyx_k_average_compression_ratio, sizeof(__pyx_k_average_compression_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_average_compression_time, __pyx_k_average_compression_time, sizeof(__pyx_k_average_compression_time), 0, 0, 1, 1},
  {&__pyx_n_s_camera_buffer_count_linux, __pyx_k_camera_buffer_count_linux, sizeof(__pyx_k_camera_buffer_count_linux), 0, 0, 1, 1},
  {&__pyx_n_s_camera_disable_self_calib, __pyx_k_camera_disable_self_calib, sizeof(__pyx_k_camera_disable_self_calib), 0, 0, 1, 1},
  {&__pyx_n_s_camera_fps, __pyx_k_camera_fps, sizeof(__pyx_k_camera_fps), 0, 0, 1, 1},
  {&__pyx_n_s_camera_image_flip, __pyx_k_camera_image_flip, sizeof(__pyx_k_camera_image_flip), 0, 0, 1, 1},
  {&__pyx_n_s_camera_linux_id, __pyx_k_camera_linux_id, sizeof(__pyx_k_camera_linux_id), 0, 0, 1, 1},
  {&__pyx_n_s_camera_resolution, __pyx_k_camera_resolution, sizeof(__pyx_k_camera_resolution), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_compression_mode, __pyx_k_compression_mode, sizeof(__pyx_k_compression_mode), 0, 0, 1, 1},
  {&__pyx_n_s_coordinate_system, __pyx_k_coordinate_system, sizeof(__pyx_k_coordinate_system), 0, 0, 1, 1},
  {&__pyx_n_s_coordinate_units, __pyx_k_coordinate_units, sizeof(__pyx_k_coordinate_units), 0, 0, 1, 1},
  {&__pyx_n_s_core, __pyx_k_core, sizeof(__pyx_k_core), 0, 0, 1, 1},
  {&__pyx_n_s_current_compression_ratio, __pyx_k_current_compression_ratio, sizeof(__pyx_k_current_compression_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_current_compression_time, __pyx_k_current_compression_time, sizeof(__pyx_k_current_compression_time), 0, 0, 1, 1},
  {&__pyx_n_s_defines, __pyx_k_defines, sizeof(__pyx_k_defines), 0, 0, 1, 1},
  {&__pyx_n_s_depth_minimum_distance, __pyx_k_depth_minimum_distance, sizeof(__pyx_k_depth_minimum_distance), 0, 0, 1, 1},
  {&__pyx_n_s_depth_mode, __pyx_k_depth_mode, sizeof(__pyx_k_depth_mode), 0, 0, 1, 1},
  {&__pyx_n_s_depth_stabilization, __pyx_k_depth_stabilization, sizeof(__pyx_k_depth_stabilization), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_enable_depth, __pyx_k_enable_depth, sizeof(__pyx_k_enable_depth), 0, 0, 1, 1},
  {&__pyx_n_s_enable_memory, __pyx_k_enable_memory, sizeof(__pyx_k_enable_memory), 0, 0, 1, 1},
  {&__pyx_n_s_enable_point_cloud, __pyx_k_enable_point_cloud, sizeof(__pyx_k_enable_point_cloud), 0, 0, 1, 1},
  {&__pyx_n_s_enable_right_side_measure, __pyx_k_enable_right_side_measure, sizeof(__pyx_k_enable_right_side_measure), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
  {&__pyx_n_s_factor, __pyx_k_factor, sizeof(__pyx_k_factor), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init_pos, __pyx_k_init_pos, sizeof(__pyx_k_init_pos), 0, 0, 1, 1},
  {&__pyx_n_s_inverse_triangle_vertices_order, __pyx_k_inverse_triangle_vertices_order, sizeof(__pyx_k_inverse_triangle_vertices_order), 0, 0, 1, 1},
  {&__pyx_n_s_keep_mesh_consistent, __pyx_k_keep_mesh_consistent, sizeof(__pyx_k_keep_mesh_consistent), 0, 0, 1, 1},
  {&__pyx_n_s_keep_occluded_point, __pyx_k_keep_occluded_point, sizeof(__pyx_k_keep_occluded_point), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_memory_usage, __pyx_k_max_memory_usage, sizeof(__pyx_k_max_memory_usage), 0, 0, 1, 1},
  {&__pyx_n_s_mconfidence, __pyx_k_mconfidence, sizeof(__pyx_k_mconfidence), 0, 0, 1, 1},
  {&__pyx_n_s_measure, __pyx_k_measure, sizeof(__pyx_k_measure), 0, 0, 1, 1},
  {&__pyx_n_s_measure3D_reference_frame, __pyx_k_measure3D_reference_frame, sizeof(__pyx_k_measure3D_reference_frame), 0, 0, 1, 1},
  {&__pyx_n_s_mesh, __pyx_k_mesh, sizeof(__pyx_k_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mtimestamp, __pyx_k_mtimestamp, sizeof(__pyx_k_mtimestamp), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_name_save, __pyx_k_name_save, sizeof(__pyx_k_name_save), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_pose_data, __pyx_k_pose_data, sizeof(__pyx_k_pose_data), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_py_mat, __pyx_k_py_mat, sizeof(__pyx_k_py_mat), 0, 0, 1, 1},
  {&__pyx_n_s_py_pose, __pyx_k_py_pose, sizeof(__pyx_k_py_pose), 0, 0, 1, 1},
  {&__pyx_n_s_pyzed_camera, __pyx_k_pyzed_camera, sizeof(__pyx_k_pyzed_camera), 0, 0, 1, 1},
  {&__pyx_kp_s_pyzed_camera_pyx, __pyx_k_pyzed_camera_pyx, sizeof(__pyx_k_pyzed_camera_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyzed_core, __pyx_k_pyzed_core, sizeof(__pyx_k_pyzed_core), 0, 0, 1, 1},
  {&__pyx_n_s_pyzed_defines, __pyx_k_pyzed_defines, sizeof(__pyx_k_pyzed_defines), 0, 0, 1, 1},
  {&__pyx_n_s_pyzed_mesh, __pyx_k_pyzed_mesh, sizeof(__pyx_k_pyzed_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_pyzed_types, __pyx_k_pyzed_types, sizeof(__pyx_k_pyzed_types), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_radian, __pyx_k_radian, sizeof(__pyx_k_radian), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reference_frame, __pyx_k_reference_frame, sizeof(__pyx_k_reference_frame), 0, 0, 1, 1},
  {&__pyx_n_s_resizer, __pyx_k_resizer, sizeof(__pyx_k_resizer), 0, 0, 1, 1},
  {&__pyx_n_s_resolution, __pyx_k_resolution, sizeof(__pyx_k_resolution), 0, 0, 1, 1},
  {&__pyx_n_s_save_camera_depth_as, __pyx_k_save_camera_depth_as, sizeof(__pyx_k_save_camera_depth_as), 0, 0, 1, 1},
  {&__pyx_n_s_save_camera_point_cloud_as, __pyx_k_save_camera_point_cloud_as, sizeof(__pyx_k_save_camera_point_cloud_as), 0, 0, 1, 1},
  {&__pyx_n_s_save_mat_depth_as, __pyx_k_save_mat_depth_as, sizeof(__pyx_k_save_mat_depth_as), 0, 0, 1, 1},
  {&__pyx_n_s_save_mat_point_cloud_as, __pyx_k_save_mat_point_cloud_as, sizeof(__pyx_k_save_mat_point_cloud_as), 0, 0, 1, 1},
  {&__pyx_n_s_save_texture, __pyx_k_save_texture, sizeof(__pyx_k_save_texture), 0, 0, 1, 1},
  {&__pyx_n_s_sdk_gpu_id, __pyx_k_sdk_gpu_id, sizeof(__pyx_k_sdk_gpu_id), 0, 0, 1, 1},
  {&__pyx_n_s_sdk_verbose, __pyx_k_sdk_verbose, sizeof(__pyx_k_sdk_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_sdk_verbose_log_file, __pyx_k_sdk_verbose_log_file, sizeof(__pyx_k_sdk_verbose_log_file), 0, 0, 1, 1},
  {&__pyx_n_s_sensing_mode, __pyx_k_sensing_mode, sizeof(__pyx_k_sensing_mode), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_settings, __pyx_k_settings, sizeof(__pyx_k_settings), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_s_svo_input_filename, __pyx_k_svo_input_filename, sizeof(__pyx_k_svo_input_filename), 0, 0, 1, 1},
  {&__pyx_n_s_svo_real_time_mode, __pyx_k_svo_real_time_mode, sizeof(__pyx_k_svo_real_time_mode), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_use_default, __pyx_k_use_default, sizeof(__pyx_k_use_default), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_video_filename, __pyx_k_video_filename, sizeof(__pyx_k_video_filename), 0, 0, 1, 1},
  {&__pyx_n_s_view, __pyx_k_view, sizeof(__pyx_k_view), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_with_color, __pyx_k_with_color, sizeof(__pyx_k_with_color), 0, 0, 1, 1},
  {&__pyx_n_s_zed, __pyx_k_zed, sizeof(__pyx_k_zed), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 468, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 235, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 823, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1013, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyzed/camera.pyx":77
 *                                            types.String(<char*> filelog), depth_stabilization)
 *         else:
 *             raise TypeError("Argument is not of right type.")             # <<<<<<<<<<<<<<
 * 
 *     def save(self, str filename):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_right_type); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pyzed/camera.pyx":96
 *             self.init.camera_resolution = value.value
 *         else:
 *             raise TypeError("Argument must be of PyRESOLUTION type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Argument_must_be_of_PyRESOLUTION); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pyzed/camera.pyx":143
 *             self.init.depth_mode = value.value
 *         else:
 *             raise TypeError("Argument must be of PyDEPTH_MODE type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Argument_must_be_of_PyDEPTH_MODE); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pyzed/camera.pyx":154
 *             self.init.coordinate_units = value.value
 *         else:
 *             raise TypeError("Argument must be of PyUNIT type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Argument_must_be_of_PyUNIT_type); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pyzed/camera.pyx":165
 *             self.init.coordinate_system = value.value
 *         else:
 *             raise TypeError("Argument must be of PyCOORDINATE_SYSTEM type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Argument_must_be_of_PyCOORDINATE); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pyzed/camera.pyx":275
 *             self.runtime.sensing_mode = value.value
 *         else:
 *             raise TypeError("Argument must be of PySENSING_MODE type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Argument_must_be_of_PySENSING_MO); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "pyzed/camera.pyx":294
 *             self.runtime.measure3D_reference_frame = value.value
 *         else:
 *             raise TypeError("Argument must be of PyREFERENCE type.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Argument_must_be_of_PyREFERENCE); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pyzed/camera.pyx":303
 *             self.tracking = new TrackingParameters(init_pos.transform, _enable_memory, types.String())
 *         else:
 *             raise TypeError("Argument init_pos must be initialized first with PyTransform().")             # <<<<<<<<<<<<<<
 * 
 *     def save(self, str filename):
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_Argument_init_pos_must_be_initia); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "pyzed/camera.pyx":357
 *             return self.spatial.get(<RESOLUTION> resolution.value)
 *         else:
 *             raise TypeError("Argument is not of PyRESOLUTION type.")             # <<<<<<<<<<<<<<
 * 
 *     def set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyRESOLUTION); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "pyzed/camera.pyx":363
 *             self.spatial.set(<RESOLUTION> resolution.value)
 *         else:
 *             raise TypeError("Argument is not of PyRESOLUTION type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyRESOLUTION); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "pyzed/camera.pyx":369
 *             return self.spatial.get(<RANGE> range.value)
 *         else:
 *             raise TypeError("Argument is not of PyRANGE type.")             # <<<<<<<<<<<<<<
 * 
 *     def set_range(self, range=PyRANGE.PyRANGE_MEDIUM):
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyRANGE_type); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "pyzed/camera.pyx":375
 *             self.spatial.set(<RANGE> range.value)
 *         else:
 *             raise TypeError("Argument is not of PyRANGE type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyRANGE_type); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "pyzed/camera.pyx":467
 * 
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.pose.getRotationVector()[i]
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "pyzed/camera.pyx":473
 * 
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             for i in range(3):
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "pyzed/camera.pyx":478
 *                 arr[i] = self.pose.getEulerAngles(radian)[i]
 *         else:
 *             raise TypeError("Argument is not of bool type.")             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_bool_type); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "pyzed/camera.pyx":527
 *             return types.PyERROR_CODE(self.camera.retrieveImage(py_mat.mat, view.value, type.value, width, height))
 *         else:
 *             raise TypeError("Arguments must be of PyVIEW, PyMEM and integer types.")             # <<<<<<<<<<<<<<
 * 
 *     def retrieve_measure(self, core.PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU,
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_Arguments_must_be_of_PyVIEW_PyME); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "pyzed/camera.pyx":535
 *             return types.PyERROR_CODE(self.camera.retrieveMeasure(py_mat.mat, measure.value, type.value, width, height))
 *         else:
 *             raise TypeError("Arguments must be of PyMEASURE, PyMEM and integer types.")             # <<<<<<<<<<<<<<
 * 
 *     def set_confidence_threshold(self, int conf_treshold_value):
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_Arguments_must_be_of_PyMEASURE_P); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "pyzed/camera.pyx":568
 *             self.camera.setCameraSettings(settings.value, value, use_default)
 *         else:
 *             raise TypeError("Arguments must be of PyCAMERA_SETTINGS and boolean types.")             # <<<<<<<<<<<<<<
 * 
 *     def get_camera_settings(self, setting):
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_Arguments_must_be_of_PyCAMERA_SE); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "pyzed/camera.pyx":574
 *             return self.camera.getCameraSettings(setting.value)
 *         else:
 *             raise TypeError("Argument is not of PyCAMERA_SETTINGS type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_camera_fps(self):
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyCAMERA_SETT); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "pyzed/camera.pyx":613
 *             return defines.PyTRACKING_STATE(self.camera.getPosition(py_pose.pose, reference_frame.value))
 *         else:
 *             raise TypeError("Argument is not of PyREFERENCE_FRAME type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_area_export_state(self):
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyREFERENCE_F); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "pyzed/camera.pyx":635
 *             self.camera.pauseSpatialMapping(status)
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_spatial_mapping_state(self):
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_boolean_type); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "pyzed/camera.pyx":662
 *                                       compression_mode.value))
 *         else:
 *             raise TypeError("Argument is not of PySVO_COMPRESSION_MODE type.")             # <<<<<<<<<<<<<<
 * 
 *     def record(self):
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PySVO_COMPRES); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "pyzed/camera.pyx":685
 *         return saveDepthAs(zed.camera, format.value, types.String(<char*>name_save), factor)
 *     else:
 *         raise TypeError("Arguments must be of PyDEPTH_FORMAT type and factor not over 65536.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_Arguments_must_be_of_PyDEPTH_FOR); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "pyzed/camera.pyx":694
 *                                 with_color, keep_occluded_point)
 *     else:
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")             # <<<<<<<<<<<<<<
 * 
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyPOINT_CLOUD); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "pyzed/camera.pyx":701
 *         return saveMatDepthAs(py_mat.mat, format.value, types.String(<char*>name_save), factor)
 *     else:
 *         raise TypeError("Arguments must be of PyDEPTH_FORMAT type and factor not over 65536.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_Arguments_must_be_of_PyDEPTH_FOR); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "pyzed/camera.pyx":710
 *                                 with_color, keep_occluded_point)
 *     else:
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyPOINT_CLOUD); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(2, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(2, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":823
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(2, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(2, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1013
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(2, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1019
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(2, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(2, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "pyzed/camera.pyx":594
 *         return self.camera.getFrameDroppedCount()
 * 
 *     def get_camera_information(self, resizer=core.PyResolution(0, 0)):             # <<<<<<<<<<<<<<
 *         return core.PyCameraInformation(self, resizer)
 * 
 */
  __pyx_tuple__69 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "pyzed/camera.pyx":680
 * 
 * 
 * def save_camera_depth_as(PyZEDCamera zed, format, str name, factor=1):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 */
  __pyx_tuple__70 = PyTuple_Pack(5, __pyx_n_s_zed, __pyx_n_s_format, __pyx_n_s_name, __pyx_n_s_factor, __pyx_n_s_name_save); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_camera_pyx, __pyx_n_s_save_camera_depth_as, 680, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 680, __pyx_L1_error)

  /* "pyzed/camera.pyx":688
 * 
 * 
 * def save_camera_point_cloud_as(PyZEDCamera zed, format, str name, with_color=False, keep_occluded_point=False):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 */
  __pyx_tuple__72 = PyTuple_Pack(6, __pyx_n_s_zed, __pyx_n_s_format, __pyx_n_s_name, __pyx_n_s_with_color, __pyx_n_s_keep_occluded_point, __pyx_n_s_name_save); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_camera_pyx, __pyx_n_s_save_camera_point_cloud_as, 688, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 688, __pyx_L1_error)

  /* "pyzed/camera.pyx":696
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")
 * 
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 */
  __pyx_tuple__74 = PyTuple_Pack(5, __pyx_n_s_py_mat, __pyx_n_s_format, __pyx_n_s_name, __pyx_n_s_factor, __pyx_n_s_name_save); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_camera_pyx, __pyx_n_s_save_mat_depth_as, 696, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 696, __pyx_L1_error)

  /* "pyzed/camera.pyx":704
 * 
 * 
 * def save_mat_point_cloud_as(core.PyMat py_mat, format, str name, with_color=False, keep_occluded_point=False):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 */
  __pyx_tuple__76 = PyTuple_Pack(6, __pyx_n_s_py_mat, __pyx_n_s_format, __pyx_n_s_name, __pyx_n_s_with_color, __pyx_n_s_keep_occluded_point, __pyx_n_s_name_save); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_camera_pyx, __pyx_n_s_save_mat_point_cloud_as, 704, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_neg_1_0 = PyFloat_FromDouble(-1.0); if (unlikely(!__pyx_float_neg_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2048 = PyInt_FromLong(2048); if (unlikely(!__pyx_int_2048)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_65536 = PyInt_FromLong(65536L); if (unlikely(!__pyx_int_65536)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcamera(void); /*proto*/
PyMODINIT_FUNC initcamera(void)
#else
PyMODINIT_FUNC PyInit_camera(void); /*proto*/
PyMODINIT_FUNC PyInit_camera(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_camera(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_camera(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("camera", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyzed__camera) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyzed.camera")) {
      if (unlikely(PyDict_SetItemString(modules, "pyzed.camera", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5pyzed_6camera_PyZEDCamera) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_type_5pyzed_6camera_PyZEDCamera.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyZEDCamera", (PyObject *)&__pyx_type_5pyzed_6camera_PyZEDCamera) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_6camera_PyZEDCamera) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_ptype_5pyzed_6camera_PyZEDCamera = &__pyx_type_5pyzed_6camera_PyZEDCamera;
  if (PyType_Ready(&__pyx_type_5pyzed_6camera_PyInitParameters) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_type_5pyzed_6camera_PyInitParameters.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyInitParameters", (PyObject *)&__pyx_type_5pyzed_6camera_PyInitParameters) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_6camera_PyInitParameters) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_ptype_5pyzed_6camera_PyInitParameters = &__pyx_type_5pyzed_6camera_PyInitParameters;
  if (PyType_Ready(&__pyx_type_5pyzed_6camera_PyRuntimeParameters) < 0) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_type_5pyzed_6camera_PyRuntimeParameters.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyRuntimeParameters", (PyObject *)&__pyx_type_5pyzed_6camera_PyRuntimeParameters) < 0) __PYX_ERR(0, 244, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_6camera_PyRuntimeParameters) < 0) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_ptype_5pyzed_6camera_PyRuntimeParameters = &__pyx_type_5pyzed_6camera_PyRuntimeParameters;
  if (PyType_Ready(&__pyx_type_5pyzed_6camera_PyTrackingParameters) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_type_5pyzed_6camera_PyTrackingParameters.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyTrackingParameters", (PyObject *)&__pyx_type_5pyzed_6camera_PyTrackingParameters) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_6camera_PyTrackingParameters) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_ptype_5pyzed_6camera_PyTrackingParameters = &__pyx_type_5pyzed_6camera_PyTrackingParameters;
  if (PyType_Ready(&__pyx_type_5pyzed_6camera_PySpatialMappingParameters) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  __pyx_type_5pyzed_6camera_PySpatialMappingParameters.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PySpatialMappingParameters", (PyObject *)&__pyx_type_5pyzed_6camera_PySpatialMappingParameters) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_6camera_PySpatialMappingParameters) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  __pyx_ptype_5pyzed_6camera_PySpatialMappingParameters = &__pyx_type_5pyzed_6camera_PySpatialMappingParameters;
  if (PyType_Ready(&__pyx_type_5pyzed_6camera_PyPose) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  __pyx_type_5pyzed_6camera_PyPose.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyPose", (PyObject *)&__pyx_type_5pyzed_6camera_PyPose) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_6camera_PyPose) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  __pyx_ptype_5pyzed_6camera_PyPose = &__pyx_type_5pyzed_6camera_PyPose;
  /*--- Type import code ---*/
  __pyx_ptype_5pyzed_5types_PyMatrix3f = __Pyx_ImportType("pyzed.types", "PyMatrix3f", sizeof(struct __pyx_obj_5pyzed_5types_PyMatrix3f), 1); if (unlikely(!__pyx_ptype_5pyzed_5types_PyMatrix3f)) __PYX_ERR(3, 191, __pyx_L1_error)
  __pyx_ptype_5pyzed_5types_PyMatrix4f = __Pyx_ImportType("pyzed.types", "PyMatrix4f", sizeof(struct __pyx_obj_5pyzed_5types_PyMatrix4f), 1); if (unlikely(!__pyx_ptype_5pyzed_5types_PyMatrix4f)) __PYX_ERR(3, 195, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyMat = __Pyx_ImportType("pyzed.core", "PyMat", sizeof(struct __pyx_obj_5pyzed_4core_PyMat), 1); if (unlikely(!__pyx_ptype_5pyzed_4core_PyMat)) __PYX_ERR(4, 274, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyRotation = __Pyx_ImportType("pyzed.core", "PyRotation", sizeof(struct __pyx_obj_5pyzed_4core_PyRotation), 1); if (unlikely(!__pyx_ptype_5pyzed_4core_PyRotation)) __PYX_ERR(4, 277, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyTranslation = __Pyx_ImportType("pyzed.core", "PyTranslation", sizeof(struct __pyx_obj_5pyzed_4core_PyTranslation), 1); if (unlikely(!__pyx_ptype_5pyzed_4core_PyTranslation)) __PYX_ERR(4, 281, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyOrientation = __Pyx_ImportType("pyzed.core", "PyOrientation", sizeof(struct __pyx_obj_5pyzed_4core_PyOrientation), 1); if (unlikely(!__pyx_ptype_5pyzed_4core_PyOrientation)) __PYX_ERR(4, 285, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyTransform = __Pyx_ImportType("pyzed.core", "PyTransform", sizeof(struct __pyx_obj_5pyzed_4core_PyTransform), 1); if (unlikely(!__pyx_ptype_5pyzed_4core_PyTransform)) __PYX_ERR(4, 289, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyCameraParameters = __Pyx_ImportType("pyzed.core", "PyCameraParameters", sizeof(struct __pyx_obj_5pyzed_4core_PyCameraParameters), 1); if (unlikely(!__pyx_ptype_5pyzed_4core_PyCameraParameters)) __PYX_ERR(4, 293, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyCalibrationParameters = __Pyx_ImportType("pyzed.core", "PyCalibrationParameters", sizeof(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters), 1); if (unlikely(!__pyx_ptype_5pyzed_4core_PyCalibrationParameters)) __PYX_ERR(4, 297, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyCameraInformation = __Pyx_ImportType("pyzed.core", "PyCameraInformation", sizeof(struct __pyx_obj_5pyzed_4core_PyCameraInformation), 1); if (unlikely(!__pyx_ptype_5pyzed_4core_PyCameraInformation)) __PYX_ERR(4, 305, __pyx_L1_error)
  __pyx_ptype_5pyzed_4mesh_PyTexture = __Pyx_ImportType("pyzed.mesh", "PyTexture", sizeof(struct __pyx_obj_5pyzed_4mesh_PyTexture), 1); if (unlikely(!__pyx_ptype_5pyzed_4mesh_PyTexture)) __PYX_ERR(5, 100, __pyx_L1_error)
  __pyx_ptype_5pyzed_4mesh_PyChunk = __Pyx_ImportType("pyzed.mesh", "PyChunk", sizeof(struct __pyx_obj_5pyzed_4mesh_PyChunk), 1); if (unlikely(!__pyx_ptype_5pyzed_4mesh_PyChunk)) __PYX_ERR(5, 103, __pyx_L1_error)
  __pyx_ptype_5pyzed_4mesh_PyMesh = __Pyx_ImportType("pyzed.mesh", "PyMesh", sizeof(struct __pyx_obj_5pyzed_4mesh_PyMesh), 1); if (unlikely(!__pyx_ptype_5pyzed_4mesh_PyMesh)) __PYX_ERR(5, 106, __pyx_L1_error)
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(6, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(7, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(8, 15, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 163, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 185, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 189, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 198, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 885, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pyzed/camera.pyx":26
 * from cpython cimport bool
 * 
 * import enum             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_enum, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_enum, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":27
 * 
 * import enum
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":30
 * cimport numpy as np
 * 
 * import pyzed.core as core             # <<<<<<<<<<<<<<
 * import pyzed.mesh as mesh
 * import pyzed.defines as defines
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__68);
  __Pyx_GIVEREF(__pyx_n_s__68);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__68);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pyzed_core, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_core, __pyx_t_2) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzed/camera.pyx":31
 * 
 * import pyzed.core as core
 * import pyzed.mesh as mesh             # <<<<<<<<<<<<<<
 * import pyzed.defines as defines
 * import pyzed.types as types
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__68);
  __Pyx_GIVEREF(__pyx_n_s__68);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__68);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyzed_mesh, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mesh, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":32
 * import pyzed.core as core
 * import pyzed.mesh as mesh
 * import pyzed.defines as defines             # <<<<<<<<<<<<<<
 * import pyzed.types as types
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__68);
  __Pyx_GIVEREF(__pyx_n_s__68);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__68);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pyzed_defines, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_defines, __pyx_t_2) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzed/camera.pyx":33
 * import pyzed.mesh as mesh
 * import pyzed.defines as defines
 * import pyzed.types as types             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__68);
  __Pyx_GIVEREF(__pyx_n_s__68);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__68);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyzed_types, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":36
 * 
 * 
 * class PyRESOLUTION(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_HIGH = RESOLUTION_HIGH
 *     PyRESOLUTION_MEDIUM  = RESOLUTION_MEDIUM
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyRESOLUTION, __pyx_n_s_PyRESOLUTION, (PyObject *) NULL, __pyx_n_s_pyzed_camera, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/camera.pyx":37
 * 
 * class PyRESOLUTION(enum.Enum):
 *     PyRESOLUTION_HIGH = RESOLUTION_HIGH             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_MEDIUM  = RESOLUTION_MEDIUM
 *     PyRESOLUTION_LOW = RESOLUTION_LOW
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(sl::SpatialMappingParameters::RESOLUTION::RESOLUTION_HIGH); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRESOLUTION_HIGH, __pyx_t_4) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/camera.pyx":38
 * class PyRESOLUTION(enum.Enum):
 *     PyRESOLUTION_HIGH = RESOLUTION_HIGH
 *     PyRESOLUTION_MEDIUM  = RESOLUTION_MEDIUM             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_LOW = RESOLUTION_LOW
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(sl::SpatialMappingParameters::RESOLUTION::RESOLUTION_MEDIUM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRESOLUTION_MEDIUM, __pyx_t_4) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/camera.pyx":39
 *     PyRESOLUTION_HIGH = RESOLUTION_HIGH
 *     PyRESOLUTION_MEDIUM  = RESOLUTION_MEDIUM
 *     PyRESOLUTION_LOW = RESOLUTION_LOW             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(sl::SpatialMappingParameters::RESOLUTION::RESOLUTION_LOW); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRESOLUTION_LOW, __pyx_t_4) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/camera.pyx":36
 * 
 * 
 * class PyRESOLUTION(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_HIGH = RESOLUTION_HIGH
 *     PyRESOLUTION_MEDIUM  = RESOLUTION_MEDIUM
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyRESOLUTION, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyRESOLUTION, __pyx_t_4) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":42
 * 
 * 
 * class PyRANGE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyRANGE_NEAR = RANGE_NEAR
 *     PyRANGE_MEDIUM = RANGE_MEDIUM
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyRANGE, __pyx_n_s_PyRANGE, (PyObject *) NULL, __pyx_n_s_pyzed_camera, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/camera.pyx":43
 * 
 * class PyRANGE(enum.Enum):
 *     PyRANGE_NEAR = RANGE_NEAR             # <<<<<<<<<<<<<<
 *     PyRANGE_MEDIUM = RANGE_MEDIUM
 *     PyRANGE_FAR = RANGE_FAR
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(sl::SpatialMappingParameters::RANGE::RANGE_NEAR); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRANGE_NEAR, __pyx_t_4) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/camera.pyx":44
 * class PyRANGE(enum.Enum):
 *     PyRANGE_NEAR = RANGE_NEAR
 *     PyRANGE_MEDIUM = RANGE_MEDIUM             # <<<<<<<<<<<<<<
 *     PyRANGE_FAR = RANGE_FAR
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(sl::SpatialMappingParameters::RANGE::RANGE_MEDIUM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRANGE_MEDIUM, __pyx_t_4) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/camera.pyx":45
 *     PyRANGE_NEAR = RANGE_NEAR
 *     PyRANGE_MEDIUM = RANGE_MEDIUM
 *     PyRANGE_FAR = RANGE_FAR             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(sl::SpatialMappingParameters::RANGE::RANGE_FAR); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRANGE_FAR, __pyx_t_4) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/camera.pyx":42
 * 
 * 
 * class PyRANGE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyRANGE_NEAR = RANGE_NEAR
 *     PyRANGE_MEDIUM = RANGE_MEDIUM
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyRANGE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyRANGE, __pyx_t_4) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":50
 * cdef class PyInitParameters:
 *     cdef InitParameters* init
 *     def __cinit__(self, camera_resolution=defines.PyRESOLUTION.PyRESOLUTION_HD720, camera_fps=0,             # <<<<<<<<<<<<<<
 *                   camera_linux_id=0, svo_input_filename="", svo_real_time_mode=False,
 *                   depth_mode=defines.PyDEPTH_MODE.PyDEPTH_MODE_PERFORMANCE,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyRESOLUTION_HD720); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k_ = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":52
 *     def __cinit__(self, camera_resolution=defines.PyRESOLUTION.PyRESOLUTION_HD720, camera_fps=0,
 *                   camera_linux_id=0, svo_input_filename="", svo_real_time_mode=False,
 *                   depth_mode=defines.PyDEPTH_MODE.PyDEPTH_MODE_PERFORMANCE,             # <<<<<<<<<<<<<<
 *                   coordinate_units=defines.PyUNIT.PyUNIT_MILLIMETER,
 *                   coordinate_system=defines.PyCOORDINATE_SYSTEM.PyCOORDINATE_SYSTEM_IMAGE,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyDEPTH_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyDEPTH_MODE_PERFORMANCE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__3 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":53
 *                   camera_linux_id=0, svo_input_filename="", svo_real_time_mode=False,
 *                   depth_mode=defines.PyDEPTH_MODE.PyDEPTH_MODE_PERFORMANCE,
 *                   coordinate_units=defines.PyUNIT.PyUNIT_MILLIMETER,             # <<<<<<<<<<<<<<
 *                   coordinate_system=defines.PyCOORDINATE_SYSTEM.PyCOORDINATE_SYSTEM_IMAGE,
 *                   sdk_verbose=False, sdk_gpu_id=-1, depth_minimum_distance=-1.0, camera_disable_self_calib=False,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyUNIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyUNIT_MILLIMETER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__4 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":54
 *                   depth_mode=defines.PyDEPTH_MODE.PyDEPTH_MODE_PERFORMANCE,
 *                   coordinate_units=defines.PyUNIT.PyUNIT_MILLIMETER,
 *                   coordinate_system=defines.PyCOORDINATE_SYSTEM.PyCOORDINATE_SYSTEM_IMAGE,             # <<<<<<<<<<<<<<
 *                   sdk_verbose=False, sdk_gpu_id=-1, depth_minimum_distance=-1.0, camera_disable_self_calib=False,
 *                   camera_image_flip=False, enable_right_side_measure=False, camera_buffer_count_linux=4,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyCOORDINATE_SYSTEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyCOORDINATE_SYSTEM_IMAGE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__5 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":246
 * cdef class PyRuntimeParameters:
 *     cdef RuntimeParameters* runtime
 *     def __cinit__(self, sensing_mode=defines.PySENSING_MODE.PySENSING_MODE_STANDARD, enable_depth=True,             # <<<<<<<<<<<<<<
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PySENSING_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PySENSING_MODE_STANDARD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__13 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":248
 *     def __cinit__(self, sensing_mode=defines.PySENSING_MODE.PySENSING_MODE_STANDARD, enable_depth=True,
 *                   enable_point_cloud=True,
 *                   measure3D_reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_CAMERA):             # <<<<<<<<<<<<<<
 *         if (isinstance(sensing_mode, defines.PySENSING_MODE) and isinstance(enable_depth, bool)
 *             and isinstance(enable_point_cloud, bool) and
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyREFERENCE_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyREFERENCE_FRAME_CAMERA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__14 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":343
 * cdef class PySpatialMappingParameters:
 *     cdef SpatialMappingParameters* spatial
 *     def __cinit__(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH, range=PyRANGE.PyRANGE_MEDIUM,             # <<<<<<<<<<<<<<
 *                   max_memory_usage=2048, save_texture=True, keep_mesh_consistent=True,
 *                   inverse_triangle_vertices_order=False):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyRESOLUTION_HIGH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__22 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRANGE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyRANGE_MEDIUM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__23 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":353
 *             raise TypeError()
 * 
 *     def get_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):             # <<<<<<<<<<<<<<
 *         if isinstance(resolution, PyRESOLUTION):
 *             return self.spatial.get(<RESOLUTION> resolution.value)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyRESOLUTION_HIGH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__24 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/camera.pyx":359
 *             raise TypeError("Argument is not of PyRESOLUTION type.")
 * 
 *     def set_resolution(self, resolution=PyRESOLUTION.PyRESOLUTION_HIGH):             # <<<<<<<<<<<<<<
 *         if isinstance(resolution, PyRESOLUTION):
 *             self.spatial.set(<RESOLUTION> resolution.value)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyRESOLUTION_HIGH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__26 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":365
 *             raise TypeError("Argument is not of PyRESOLUTION type.")
 * 
 *     def get_range(self, range=PyRANGE.PyRANGE_MEDIUM):             # <<<<<<<<<<<<<<
 *         if isinstance(range, PyRANGE):
 *             return self.spatial.get(<RANGE> range.value)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRANGE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyRANGE_MEDIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__28 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/camera.pyx":371
 *             raise TypeError("Argument is not of PyRANGE type.")
 * 
 *     def set_range(self, range=PyRANGE.PyRANGE_MEDIUM):             # <<<<<<<<<<<<<<
 *         if isinstance(range, PyRANGE):
 *             self.spatial.set(<RANGE> range.value)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyRANGE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyRANGE_MEDIUM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__30 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":521
 *             print("RuntimeParameters must be initialized first with PyRuntimeParameters().")
 * 
 *     def retrieve_image(self, core.PyMat py_mat, view=defines.PyVIEW.PyVIEW_LEFT, type=core.PyMEM.PyMEM_CPU, width=0,             # <<<<<<<<<<<<<<
 *                        height=0):
 *         if (isinstance(view, defines.PyVIEW) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyVIEW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyVIEW_LEFT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__39 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__40 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":529
 *             raise TypeError("Arguments must be of PyVIEW, PyMEM and integer types.")
 * 
 *     def retrieve_measure(self, core.PyMat py_mat, measure=defines.PyMEASURE.PyMEASURE_DEPTH, type=core.PyMEM.PyMEM_CPU,             # <<<<<<<<<<<<<<
 *                          width=0, height=0):
 *         if (isinstance(measure, defines.PyMEASURE) and isinstance(type, core.PyMEM) and isinstance(width, int) and
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEASURE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEASURE_DEPTH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__42 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__43 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":594
 *         return self.camera.getFrameDroppedCount()
 * 
 *     def get_camera_information(self, resizer=core.PyResolution(0, 0)):             # <<<<<<<<<<<<<<
 *         return core.PyCameraInformation(self, resizer)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyResolution); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__47 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":609
 *             print("TrackingParameters must be initialized first with PyTrackingParameters().")
 * 
 *     def get_position(self, PyPose py_pose, reference_frame=defines.PyREFERENCE_FRAME.PyREFERENCE_FRAME_WORLD):             # <<<<<<<<<<<<<<
 *         if isinstance(reference_frame, defines.PyREFERENCE_FRAME):
 *             return defines.PyTRACKING_STATE(self.camera.getPosition(py_pose.pose, reference_frame.value))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyREFERENCE_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyREFERENCE_FRAME_WORLD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__48 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":656
 * 
 *     def enable_recording(self, str video_filename,
 *                           compression_mode=defines.PySVO_COMPRESSION_MODE.PySVO_COMPRESSION_MODE_LOSSLESS):             # <<<<<<<<<<<<<<
 *         if isinstance(compression_mode, defines.PySVO_COMPRESSION_MODE):
 *             filename = video_filename.encode()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PySVO_COMPRESSION_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PySVO_COMPRESSION_MODE_LOSSLESS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__51 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":680
 * 
 * 
 * def save_camera_depth_as(PyZEDCamera zed, format, str name, factor=1):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_6camera_1save_camera_depth_as, NULL, __pyx_n_s_pyzed_camera); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_camera_depth_as, __pyx_t_1) < 0) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":688
 * 
 * 
 * def save_camera_point_cloud_as(PyZEDCamera zed, format, str name, with_color=False, keep_occluded_point=False):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_6camera_3save_camera_point_cloud_as, NULL, __pyx_n_s_pyzed_camera); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_camera_point_cloud_as, __pyx_t_1) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":696
 *         raise TypeError("Argument is not of PyPOINT_CLOUD_FORMAT type.")
 * 
 * def save_mat_depth_as(core.PyMat py_mat, format, str name, factor=1):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyDEPTH_FORMAT) and factor <= 65536:
 *         name_save = name.encode()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_6camera_5save_mat_depth_as, NULL, __pyx_n_s_pyzed_camera); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_mat_depth_as, __pyx_t_1) < 0) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":704
 * 
 * 
 * def save_mat_point_cloud_as(core.PyMat py_mat, format, str name, with_color=False, keep_occluded_point=False):             # <<<<<<<<<<<<<<
 *     if isinstance(format, defines.PyPOINT_CLOUD_FORMAT):
 *         name_save = name.encode()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_6camera_7save_mat_point_cloud_as, NULL, __pyx_n_s_pyzed_camera); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_mat_point_cloud_as, __pyx_t_1) < 0) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/camera.pyx":1
 * ########################################################################             # <<<<<<<<<<<<<<
 * #
 * # Copyright (c) 2017, STEREOLABS.
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_float__and_float")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_float__and_float(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyzed.camera", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyzed.camera");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
    static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* decode_c_string */
    static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetItemInt */
    static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* KeywordStringCheck */
    static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* SetItemInt */
    static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* IterFinish */
        static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* SetupReduce */
        static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CalculateMetaclass */
        static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
        static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
        static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject *use_cline;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        __Pyx_PyThreadState_Current, /*PyThreadState *tstate,*/
        py_code,                     /*PyCodeObject *code,*/
        __pyx_d,              /*PyObject *globals,*/
        0                            /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(sl::SpatialMappingParameters::RESOLUTION value) {
    const sl::SpatialMappingParameters::RESOLUTION neg_one = (sl::SpatialMappingParameters::RESOLUTION) -1, const_zero = (sl::SpatialMappingParameters::RESOLUTION) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SpatialMappingParameters::RESOLUTION) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SpatialMappingParameters::RESOLUTION) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SpatialMappingParameters::RESOLUTION) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SpatialMappingParameters::RESOLUTION) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SpatialMappingParameters::RESOLUTION) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SpatialMappingParameters::RESOLUTION),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(sl::SpatialMappingParameters::RANGE value) {
    const sl::SpatialMappingParameters::RANGE neg_one = (sl::SpatialMappingParameters::RANGE) -1, const_zero = (sl::SpatialMappingParameters::RANGE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SpatialMappingParameters::RANGE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SpatialMappingParameters::RANGE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SpatialMappingParameters::RANGE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SpatialMappingParameters::RANGE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SpatialMappingParameters::RANGE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SpatialMappingParameters::RANGE),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION value) {
    const sl::RESOLUTION neg_one = (sl::RESOLUTION) -1, const_zero = (sl::RESOLUTION) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::RESOLUTION) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::RESOLUTION) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::RESOLUTION) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::RESOLUTION) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::RESOLUTION) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::RESOLUTION),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE value) {
    const sl::DEPTH_MODE neg_one = (sl::DEPTH_MODE) -1, const_zero = (sl::DEPTH_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::DEPTH_MODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::DEPTH_MODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::DEPTH_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::DEPTH_MODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::DEPTH_MODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::DEPTH_MODE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT value) {
    const sl::UNIT neg_one = (sl::UNIT) -1, const_zero = (sl::UNIT) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::UNIT) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::UNIT) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::UNIT) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::UNIT) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::UNIT) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::UNIT),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM value) {
    const sl::COORDINATE_SYSTEM neg_one = (sl::COORDINATE_SYSTEM) -1, const_zero = (sl::COORDINATE_SYSTEM) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::COORDINATE_SYSTEM) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::COORDINATE_SYSTEM),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SENSING_MODE(sl::SENSING_MODE value) {
    const sl::SENSING_MODE neg_one = (sl::SENSING_MODE) -1, const_zero = (sl::SENSING_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SENSING_MODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SENSING_MODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SENSING_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SENSING_MODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SENSING_MODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SENSING_MODE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_REFERENCE_FRAME(sl::REFERENCE_FRAME value) {
    const sl::REFERENCE_FRAME neg_one = (sl::REFERENCE_FRAME) -1, const_zero = (sl::REFERENCE_FRAME) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::REFERENCE_FRAME) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::REFERENCE_FRAME) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::REFERENCE_FRAME) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::REFERENCE_FRAME) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::REFERENCE_FRAME) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::REFERENCE_FRAME),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Print */
        #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::ERROR_CODE value) {
    const sl::ERROR_CODE neg_one = (sl::ERROR_CODE) -1, const_zero = (sl::ERROR_CODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::ERROR_CODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::ERROR_CODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::ERROR_CODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::ERROR_CODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::ERROR_CODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::ERROR_CODE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_timeStamp(sl::timeStamp value) {
    const sl::timeStamp neg_one = (sl::timeStamp) -1, const_zero = (sl::timeStamp) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::timeStamp) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::timeStamp) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::timeStamp) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::timeStamp) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::timeStamp) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::timeStamp),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE value) {
    const sl::SELF_CALIBRATION_STATE neg_one = (sl::SELF_CALIBRATION_STATE) -1, const_zero = (sl::SELF_CALIBRATION_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SELF_CALIBRATION_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SELF_CALIBRATION_STATE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE value) {
    const sl::TRACKING_STATE neg_one = (sl::TRACKING_STATE) -1, const_zero = (sl::TRACKING_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::TRACKING_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::TRACKING_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::TRACKING_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::TRACKING_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::TRACKING_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::TRACKING_STATE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE value) {
    const sl::AREA_EXPORT_STATE neg_one = (sl::AREA_EXPORT_STATE) -1, const_zero = (sl::AREA_EXPORT_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::AREA_EXPORT_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::AREA_EXPORT_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::AREA_EXPORT_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::AREA_EXPORT_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::AREA_EXPORT_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::AREA_EXPORT_STATE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE value) {
    const sl::SPATIAL_MAPPING_STATE neg_one = (sl::SPATIAL_MAPPING_STATE) -1, const_zero = (sl::SPATIAL_MAPPING_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SPATIAL_MAPPING_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SPATIAL_MAPPING_STATE),
                                     little, !is_unsigned);
    }
}

static PyObject* __pyx_convert__to_py_struct__sl_3a__3a_RecordingState(struct sl::RecordingState s) {
          PyObject* res;
          PyObject* member;
          res = __Pyx_PyDict_NewPresized(5); if (unlikely(!res)) return NULL;
          member = __Pyx_PyBool_FromLong(s.status); if (unlikely(!member)) goto bad;
          if (unlikely(PyDict_SetItem(res, __pyx_n_s_status, member) < 0)) goto bad;
          Py_DECREF(member);
          member = PyFloat_FromDouble(s.current_compression_time); if (unlikely(!member)) goto bad;
          if (unlikely(PyDict_SetItem(res, __pyx_n_s_current_compression_time, member) < 0)) goto bad;
          Py_DECREF(member);
          member = PyFloat_FromDouble(s.current_compression_ratio); if (unlikely(!member)) goto bad;
          if (unlikely(PyDict_SetItem(res, __pyx_n_s_current_compression_ratio, member) < 0)) goto bad;
          Py_DECREF(member);
          member = PyFloat_FromDouble(s.average_compression_time); if (unlikely(!member)) goto bad;
          if (unlikely(PyDict_SetItem(res, __pyx_n_s_average_compression_time, member) < 0)) goto bad;
          Py_DECREF(member);
          member = PyFloat_FromDouble(s.average_compression_ratio); if (unlikely(!member)) goto bad;
          if (unlikely(PyDict_SetItem(res, __pyx_n_s_average_compression_ratio, member) < 0)) goto bad;
          Py_DECREF(member);
          return res;
          bad:
          Py_XDECREF(member);
          Py_DECREF(res);
          return NULL;
        }
        /* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::RESOLUTION __Pyx_PyInt_As_sl_3a__3a_RESOLUTION(PyObject *x) {
    const sl::RESOLUTION neg_one = (sl::RESOLUTION) -1, const_zero = (sl::RESOLUTION) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::RESOLUTION) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::RESOLUTION) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::RESOLUTION) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::RESOLUTION) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) >= 2 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((((sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::RESOLUTION) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) >= 3 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((((((sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::RESOLUTION) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) >= 4 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((((((((sl::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::RESOLUTION) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::RESOLUTION) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::RESOLUTION, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::RESOLUTION) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::RESOLUTION, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::RESOLUTION) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::RESOLUTION,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::RESOLUTION) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((sl::RESOLUTION)-1)*(((((sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::RESOLUTION) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) ((((((sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((sl::RESOLUTION)-1)*(((((((sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::RESOLUTION) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) ((((((((sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((sl::RESOLUTION)-1)*(((((((((sl::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::RESOLUTION) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) ((((((((((sl::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::RESOLUTION) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::RESOLUTION, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::RESOLUTION) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::RESOLUTION, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::RESOLUTION val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::RESOLUTION) -1;
        }
    } else {
        sl::RESOLUTION val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::RESOLUTION) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_RESOLUTION(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::RESOLUTION");
    return (sl::RESOLUTION) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::RESOLUTION");
    return (sl::RESOLUTION) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::DEPTH_MODE __Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(PyObject *x) {
    const sl::DEPTH_MODE neg_one = (sl::DEPTH_MODE) -1, const_zero = (sl::DEPTH_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::DEPTH_MODE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::DEPTH_MODE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::DEPTH_MODE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::DEPTH_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) >= 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((((sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::DEPTH_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) >= 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((((((sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::DEPTH_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) >= 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((((((((sl::DEPTH_MODE)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::DEPTH_MODE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::DEPTH_MODE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_MODE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::DEPTH_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_MODE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::DEPTH_MODE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::DEPTH_MODE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((sl::DEPTH_MODE)-1)*(((((sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::DEPTH_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) ((((((sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::DEPTH_MODE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((sl::DEPTH_MODE)-1)*(((((((sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::DEPTH_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) ((((((((sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::DEPTH_MODE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((sl::DEPTH_MODE)-1)*(((((((((sl::DEPTH_MODE)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::DEPTH_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) ((((((((((sl::DEPTH_MODE)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::DEPTH_MODE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_MODE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::DEPTH_MODE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_MODE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::DEPTH_MODE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::DEPTH_MODE) -1;
        }
    } else {
        sl::DEPTH_MODE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::DEPTH_MODE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::DEPTH_MODE");
    return (sl::DEPTH_MODE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::DEPTH_MODE");
    return (sl::DEPTH_MODE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::UNIT __Pyx_PyInt_As_sl_3a__3a_UNIT(PyObject *x) {
    const sl::UNIT neg_one = (sl::UNIT) -1, const_zero = (sl::UNIT) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::UNIT) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::UNIT, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::UNIT) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::UNIT) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::UNIT, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::UNIT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) >= 2 * PyLong_SHIFT) {
                            return (sl::UNIT) (((((sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::UNIT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) >= 3 * PyLong_SHIFT) {
                            return (sl::UNIT) (((((((sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::UNIT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) >= 4 * PyLong_SHIFT) {
                            return (sl::UNIT) (((((((((sl::UNIT)digits[3]) << PyLong_SHIFT) | (sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::UNIT) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::UNIT) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::UNIT, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::UNIT) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::UNIT, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::UNIT) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::UNIT, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::UNIT,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::UNIT) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::UNIT) (((sl::UNIT)-1)*(((((sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::UNIT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::UNIT) ((((((sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::UNIT) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::UNIT) (((sl::UNIT)-1)*(((((((sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::UNIT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::UNIT) ((((((((sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::UNIT) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::UNIT) (((sl::UNIT)-1)*(((((((((sl::UNIT)digits[3]) << PyLong_SHIFT) | (sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::UNIT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::UNIT) ((((((((((sl::UNIT)digits[3]) << PyLong_SHIFT) | (sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::UNIT) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::UNIT, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::UNIT) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::UNIT, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::UNIT val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::UNIT) -1;
        }
    } else {
        sl::UNIT val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::UNIT) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_UNIT(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::UNIT");
    return (sl::UNIT) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::UNIT");
    return (sl::UNIT) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::COORDINATE_SYSTEM __Pyx_PyInt_As_sl_3a__3a_COORDINATE_SYSTEM(PyObject *x) {
    const sl::COORDINATE_SYSTEM neg_one = (sl::COORDINATE_SYSTEM) -1, const_zero = (sl::COORDINATE_SYSTEM) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::COORDINATE_SYSTEM) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::COORDINATE_SYSTEM) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::COORDINATE_SYSTEM) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) >= 2 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) (((((sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) >= 3 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) (((((((sl::COORDINATE_SYSTEM)digits[2]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) >= 4 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) (((((((((sl::COORDINATE_SYSTEM)digits[3]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[2]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::COORDINATE_SYSTEM) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::COORDINATE_SYSTEM, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::COORDINATE_SYSTEM, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::COORDINATE_SYSTEM) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) (((sl::COORDINATE_SYSTEM)-1)*(((((sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) ((((((sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) (((sl::COORDINATE_SYSTEM)-1)*(((((((sl::COORDINATE_SYSTEM)digits[2]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) ((((((((sl::COORDINATE_SYSTEM)digits[2]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) (((sl::COORDINATE_SYSTEM)-1)*(((((((((sl::COORDINATE_SYSTEM)digits[3]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[2]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::COORDINATE_SYSTEM) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::COORDINATE_SYSTEM, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::COORDINATE_SYSTEM) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::COORDINATE_SYSTEM) ((((((((((sl::COORDINATE_SYSTEM)digits[3]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[2]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[1]) << PyLong_SHIFT) | (sl::COORDINATE_SYSTEM)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::COORDINATE_SYSTEM, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::COORDINATE_SYSTEM, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::COORDINATE_SYSTEM val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::COORDINATE_SYSTEM) -1;
        }
    } else {
        sl::COORDINATE_SYSTEM val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::COORDINATE_SYSTEM) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_COORDINATE_SYSTEM(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::COORDINATE_SYSTEM");
    return (sl::COORDINATE_SYSTEM) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::COORDINATE_SYSTEM");
    return (sl::COORDINATE_SYSTEM) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::SENSING_MODE __Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(PyObject *x) {
    const sl::SENSING_MODE neg_one = (sl::SENSING_MODE) -1, const_zero = (sl::SENSING_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::SENSING_MODE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::SENSING_MODE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SENSING_MODE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::SENSING_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) >= 2 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((((sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SENSING_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) >= 3 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((((((sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SENSING_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) >= 4 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((((((((sl::SENSING_MODE)digits[3]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::SENSING_MODE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::SENSING_MODE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SENSING_MODE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SENSING_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SENSING_MODE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SENSING_MODE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::SENSING_MODE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((sl::SENSING_MODE)-1)*(((((sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::SENSING_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) ((((((sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::SENSING_MODE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((sl::SENSING_MODE)-1)*(((((((sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SENSING_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) ((((((((sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::SENSING_MODE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((sl::SENSING_MODE)-1)*(((((((((sl::SENSING_MODE)digits[3]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SENSING_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) ((((((((((sl::SENSING_MODE)digits[3]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::SENSING_MODE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SENSING_MODE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SENSING_MODE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SENSING_MODE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::SENSING_MODE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::SENSING_MODE) -1;
        }
    } else {
        sl::SENSING_MODE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::SENSING_MODE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::SENSING_MODE");
    return (sl::SENSING_MODE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::SENSING_MODE");
    return (sl::SENSING_MODE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::REFERENCE_FRAME __Pyx_PyInt_As_sl_3a__3a_REFERENCE_FRAME(PyObject *x) {
    const sl::REFERENCE_FRAME neg_one = (sl::REFERENCE_FRAME) -1, const_zero = (sl::REFERENCE_FRAME) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::REFERENCE_FRAME) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::REFERENCE_FRAME) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::REFERENCE_FRAME) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::REFERENCE_FRAME) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) >= 2 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) (((((sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::REFERENCE_FRAME) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) >= 3 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) (((((((sl::REFERENCE_FRAME)digits[2]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::REFERENCE_FRAME) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) >= 4 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) (((((((((sl::REFERENCE_FRAME)digits[3]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[2]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::REFERENCE_FRAME) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::REFERENCE_FRAME) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::REFERENCE_FRAME, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::REFERENCE_FRAME) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::REFERENCE_FRAME, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::REFERENCE_FRAME) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) (((sl::REFERENCE_FRAME)-1)*(((((sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::REFERENCE_FRAME) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) ((((((sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) (((sl::REFERENCE_FRAME)-1)*(((((((sl::REFERENCE_FRAME)digits[2]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::REFERENCE_FRAME) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) ((((((((sl::REFERENCE_FRAME)digits[2]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) (((sl::REFERENCE_FRAME)-1)*(((((((((sl::REFERENCE_FRAME)digits[3]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[2]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::REFERENCE_FRAME) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::REFERENCE_FRAME, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::REFERENCE_FRAME) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::REFERENCE_FRAME) ((((((((((sl::REFERENCE_FRAME)digits[3]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[2]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[1]) << PyLong_SHIFT) | (sl::REFERENCE_FRAME)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::REFERENCE_FRAME) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::REFERENCE_FRAME, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::REFERENCE_FRAME) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::REFERENCE_FRAME, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::REFERENCE_FRAME val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::REFERENCE_FRAME) -1;
        }
    } else {
        sl::REFERENCE_FRAME val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::REFERENCE_FRAME) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_REFERENCE_FRAME(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::REFERENCE_FRAME");
    return (sl::REFERENCE_FRAME) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::REFERENCE_FRAME");
    return (sl::REFERENCE_FRAME) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::SpatialMappingParameters::RESOLUTION __Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(PyObject *x) {
    const sl::SpatialMappingParameters::RESOLUTION neg_one = (sl::SpatialMappingParameters::RESOLUTION) -1, const_zero = (sl::SpatialMappingParameters::RESOLUTION) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::SpatialMappingParameters::RESOLUTION) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::SpatialMappingParameters::RESOLUTION) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SpatialMappingParameters::RESOLUTION) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) >= 2 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) (((((sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) >= 3 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) (((((((sl::SpatialMappingParameters::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) >= 4 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) (((((((((sl::SpatialMappingParameters::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::SpatialMappingParameters::RESOLUTION) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::SpatialMappingParameters::RESOLUTION) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SpatialMappingParameters::RESOLUTION, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SpatialMappingParameters::RESOLUTION) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SpatialMappingParameters::RESOLUTION, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SpatialMappingParameters::RESOLUTION) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) (((sl::SpatialMappingParameters::RESOLUTION)-1)*(((((sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) ((((((sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) (((sl::SpatialMappingParameters::RESOLUTION)-1)*(((((((sl::SpatialMappingParameters::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) ((((((((sl::SpatialMappingParameters::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) (((sl::SpatialMappingParameters::RESOLUTION)-1)*(((((((((sl::SpatialMappingParameters::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RESOLUTION, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RESOLUTION) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RESOLUTION) ((((((((((sl::SpatialMappingParameters::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RESOLUTION)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::SpatialMappingParameters::RESOLUTION) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SpatialMappingParameters::RESOLUTION, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SpatialMappingParameters::RESOLUTION) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SpatialMappingParameters::RESOLUTION, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::SpatialMappingParameters::RESOLUTION val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::SpatialMappingParameters::RESOLUTION) -1;
        }
    } else {
        sl::SpatialMappingParameters::RESOLUTION val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::SpatialMappingParameters::RESOLUTION) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RESOLUTION(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::SpatialMappingParameters::RESOLUTION");
    return (sl::SpatialMappingParameters::RESOLUTION) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::SpatialMappingParameters::RESOLUTION");
    return (sl::SpatialMappingParameters::RESOLUTION) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::SpatialMappingParameters::RANGE __Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(PyObject *x) {
    const sl::SpatialMappingParameters::RANGE neg_one = (sl::SpatialMappingParameters::RANGE) -1, const_zero = (sl::SpatialMappingParameters::RANGE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::SpatialMappingParameters::RANGE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::SpatialMappingParameters::RANGE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SpatialMappingParameters::RANGE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) >= 2 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) (((((sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) >= 3 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) (((((((sl::SpatialMappingParameters::RANGE)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) >= 4 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) (((((((((sl::SpatialMappingParameters::RANGE)digits[3]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::SpatialMappingParameters::RANGE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::SpatialMappingParameters::RANGE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SpatialMappingParameters::RANGE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SpatialMappingParameters::RANGE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SpatialMappingParameters::RANGE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SpatialMappingParameters::RANGE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) (((sl::SpatialMappingParameters::RANGE)-1)*(((((sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) ((((((sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) (((sl::SpatialMappingParameters::RANGE)-1)*(((((((sl::SpatialMappingParameters::RANGE)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) ((((((((sl::SpatialMappingParameters::RANGE)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) (((sl::SpatialMappingParameters::RANGE)-1)*(((((((((sl::SpatialMappingParameters::RANGE)digits[3]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SpatialMappingParameters::RANGE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SpatialMappingParameters::RANGE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SpatialMappingParameters::RANGE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SpatialMappingParameters::RANGE) ((((((((((sl::SpatialMappingParameters::RANGE)digits[3]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[2]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[1]) << PyLong_SHIFT) | (sl::SpatialMappingParameters::RANGE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::SpatialMappingParameters::RANGE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SpatialMappingParameters::RANGE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SpatialMappingParameters::RANGE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SpatialMappingParameters::RANGE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::SpatialMappingParameters::RANGE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::SpatialMappingParameters::RANGE) -1;
        }
    } else {
        sl::SpatialMappingParameters::RANGE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::SpatialMappingParameters::RANGE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_SpatialMappingParameters_3a__3a_RANGE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::SpatialMappingParameters::RANGE");
    return (sl::SpatialMappingParameters::RANGE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::SpatialMappingParameters::RANGE");
    return (sl::SpatialMappingParameters::RANGE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned PY_LONG_LONG) -1;
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::VIEW __Pyx_PyInt_As_sl_3a__3a_VIEW(PyObject *x) {
    const sl::VIEW neg_one = (sl::VIEW) -1, const_zero = (sl::VIEW) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::VIEW) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::VIEW, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::VIEW) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::VIEW) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::VIEW, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::VIEW) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) >= 2 * PyLong_SHIFT) {
                            return (sl::VIEW) (((((sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::VIEW) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) >= 3 * PyLong_SHIFT) {
                            return (sl::VIEW) (((((((sl::VIEW)digits[2]) << PyLong_SHIFT) | (sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::VIEW) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) >= 4 * PyLong_SHIFT) {
                            return (sl::VIEW) (((((((((sl::VIEW)digits[3]) << PyLong_SHIFT) | (sl::VIEW)digits[2]) << PyLong_SHIFT) | (sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::VIEW) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::VIEW) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::VIEW, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::VIEW) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::VIEW, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::VIEW) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::VIEW, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::VIEW,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::VIEW) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::VIEW) (((sl::VIEW)-1)*(((((sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::VIEW) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::VIEW) ((((((sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::VIEW) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::VIEW) (((sl::VIEW)-1)*(((((((sl::VIEW)digits[2]) << PyLong_SHIFT) | (sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::VIEW) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::VIEW) ((((((((sl::VIEW)digits[2]) << PyLong_SHIFT) | (sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::VIEW) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::VIEW) (((sl::VIEW)-1)*(((((((((sl::VIEW)digits[3]) << PyLong_SHIFT) | (sl::VIEW)digits[2]) << PyLong_SHIFT) | (sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::VIEW) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::VIEW, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::VIEW) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::VIEW) ((((((((((sl::VIEW)digits[3]) << PyLong_SHIFT) | (sl::VIEW)digits[2]) << PyLong_SHIFT) | (sl::VIEW)digits[1]) << PyLong_SHIFT) | (sl::VIEW)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::VIEW) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::VIEW, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::VIEW) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::VIEW, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::VIEW val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::VIEW) -1;
        }
    } else {
        sl::VIEW val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::VIEW) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_VIEW(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::VIEW");
    return (sl::VIEW) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::VIEW");
    return (sl::VIEW) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE enum sl::MEM __Pyx_PyInt_As_enum__sl_3a__3a_MEM(PyObject *x) {
    const enum sl::MEM neg_one = (enum sl::MEM) -1, const_zero = (enum sl::MEM) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum sl::MEM) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum sl::MEM, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum sl::MEM) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum sl::MEM) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum sl::MEM, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum sl::MEM) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) >= 2 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((((enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum sl::MEM) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) >= 3 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((((((enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum sl::MEM) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) >= 4 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((((((((enum sl::MEM)digits[3]) << PyLong_SHIFT) | (enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum sl::MEM) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum sl::MEM) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MEM, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum sl::MEM) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MEM, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum sl::MEM) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum sl::MEM, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum sl::MEM,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum sl::MEM) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 2 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((enum sl::MEM)-1)*(((((enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum sl::MEM) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 2 * PyLong_SHIFT) {
                            return (enum sl::MEM) ((((((enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum sl::MEM) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 3 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((enum sl::MEM)-1)*(((((((enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum sl::MEM) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 3 * PyLong_SHIFT) {
                            return (enum sl::MEM) ((((((((enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum sl::MEM) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 4 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((enum sl::MEM)-1)*(((((((((enum sl::MEM)digits[3]) << PyLong_SHIFT) | (enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum sl::MEM) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 4 * PyLong_SHIFT) {
                            return (enum sl::MEM) ((((((((((enum sl::MEM)digits[3]) << PyLong_SHIFT) | (enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum sl::MEM) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MEM, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum sl::MEM) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MEM, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum sl::MEM val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum sl::MEM) -1;
        }
    } else {
        enum sl::MEM val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum sl::MEM) -1;
        val = __Pyx_PyInt_As_enum__sl_3a__3a_MEM(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum sl::MEM");
    return (enum sl::MEM) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum sl::MEM");
    return (enum sl::MEM) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::MEASURE __Pyx_PyInt_As_sl_3a__3a_MEASURE(PyObject *x) {
    const sl::MEASURE neg_one = (sl::MEASURE) -1, const_zero = (sl::MEASURE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::MEASURE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::MEASURE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::MEASURE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::MEASURE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::MEASURE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::MEASURE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) >= 2 * PyLong_SHIFT) {
                            return (sl::MEASURE) (((((sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::MEASURE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) >= 3 * PyLong_SHIFT) {
                            return (sl::MEASURE) (((((((sl::MEASURE)digits[2]) << PyLong_SHIFT) | (sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::MEASURE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) >= 4 * PyLong_SHIFT) {
                            return (sl::MEASURE) (((((((((sl::MEASURE)digits[3]) << PyLong_SHIFT) | (sl::MEASURE)digits[2]) << PyLong_SHIFT) | (sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::MEASURE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::MEASURE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::MEASURE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::MEASURE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::MEASURE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::MEASURE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::MEASURE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::MEASURE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::MEASURE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::MEASURE) (((sl::MEASURE)-1)*(((((sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::MEASURE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::MEASURE) ((((((sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::MEASURE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::MEASURE) (((sl::MEASURE)-1)*(((((((sl::MEASURE)digits[2]) << PyLong_SHIFT) | (sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::MEASURE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::MEASURE) ((((((((sl::MEASURE)digits[2]) << PyLong_SHIFT) | (sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::MEASURE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::MEASURE) (((sl::MEASURE)-1)*(((((((((sl::MEASURE)digits[3]) << PyLong_SHIFT) | (sl::MEASURE)digits[2]) << PyLong_SHIFT) | (sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::MEASURE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::MEASURE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::MEASURE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::MEASURE) ((((((((((sl::MEASURE)digits[3]) << PyLong_SHIFT) | (sl::MEASURE)digits[2]) << PyLong_SHIFT) | (sl::MEASURE)digits[1]) << PyLong_SHIFT) | (sl::MEASURE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::MEASURE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::MEASURE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::MEASURE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::MEASURE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::MEASURE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::MEASURE) -1;
        }
    } else {
        sl::MEASURE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::MEASURE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_MEASURE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::MEASURE");
    return (sl::MEASURE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::MEASURE");
    return (sl::MEASURE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::CAMERA_SETTINGS __Pyx_PyInt_As_sl_3a__3a_CAMERA_SETTINGS(PyObject *x) {
    const sl::CAMERA_SETTINGS neg_one = (sl::CAMERA_SETTINGS) -1, const_zero = (sl::CAMERA_SETTINGS) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::CAMERA_SETTINGS) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::CAMERA_SETTINGS) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::CAMERA_SETTINGS) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) >= 2 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) (((((sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) >= 3 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) (((((((sl::CAMERA_SETTINGS)digits[2]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) >= 4 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) (((((((((sl::CAMERA_SETTINGS)digits[3]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[2]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::CAMERA_SETTINGS) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::CAMERA_SETTINGS) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::CAMERA_SETTINGS, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::CAMERA_SETTINGS) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::CAMERA_SETTINGS, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::CAMERA_SETTINGS) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) (((sl::CAMERA_SETTINGS)-1)*(((((sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) ((((((sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) (((sl::CAMERA_SETTINGS)-1)*(((((((sl::CAMERA_SETTINGS)digits[2]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) ((((((((sl::CAMERA_SETTINGS)digits[2]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) (((sl::CAMERA_SETTINGS)-1)*(((((((((sl::CAMERA_SETTINGS)digits[3]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[2]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::CAMERA_SETTINGS) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::CAMERA_SETTINGS, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::CAMERA_SETTINGS) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::CAMERA_SETTINGS) ((((((((((sl::CAMERA_SETTINGS)digits[3]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[2]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[1]) << PyLong_SHIFT) | (sl::CAMERA_SETTINGS)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::CAMERA_SETTINGS) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::CAMERA_SETTINGS, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::CAMERA_SETTINGS) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::CAMERA_SETTINGS, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::CAMERA_SETTINGS val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::CAMERA_SETTINGS) -1;
        }
    } else {
        sl::CAMERA_SETTINGS val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::CAMERA_SETTINGS) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_CAMERA_SETTINGS(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::CAMERA_SETTINGS");
    return (sl::CAMERA_SETTINGS) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::CAMERA_SETTINGS");
    return (sl::CAMERA_SETTINGS) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::SVO_COMPRESSION_MODE __Pyx_PyInt_As_sl_3a__3a_SVO_COMPRESSION_MODE(PyObject *x) {
    const sl::SVO_COMPRESSION_MODE neg_one = (sl::SVO_COMPRESSION_MODE) -1, const_zero = (sl::SVO_COMPRESSION_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::SVO_COMPRESSION_MODE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::SVO_COMPRESSION_MODE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SVO_COMPRESSION_MODE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) >= 2 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) (((((sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) >= 3 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) (((((((sl::SVO_COMPRESSION_MODE)digits[2]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) >= 4 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) (((((((((sl::SVO_COMPRESSION_MODE)digits[3]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[2]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::SVO_COMPRESSION_MODE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::SVO_COMPRESSION_MODE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SVO_COMPRESSION_MODE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SVO_COMPRESSION_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SVO_COMPRESSION_MODE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SVO_COMPRESSION_MODE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) (((sl::SVO_COMPRESSION_MODE)-1)*(((((sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) ((((((sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) (((sl::SVO_COMPRESSION_MODE)-1)*(((((((sl::SVO_COMPRESSION_MODE)digits[2]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) ((((((((sl::SVO_COMPRESSION_MODE)digits[2]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) (((sl::SVO_COMPRESSION_MODE)-1)*(((((((((sl::SVO_COMPRESSION_MODE)digits[3]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[2]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SVO_COMPRESSION_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SVO_COMPRESSION_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SVO_COMPRESSION_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SVO_COMPRESSION_MODE) ((((((((((sl::SVO_COMPRESSION_MODE)digits[3]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[2]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[1]) << PyLong_SHIFT) | (sl::SVO_COMPRESSION_MODE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::SVO_COMPRESSION_MODE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SVO_COMPRESSION_MODE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SVO_COMPRESSION_MODE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SVO_COMPRESSION_MODE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::SVO_COMPRESSION_MODE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::SVO_COMPRESSION_MODE) -1;
        }
    } else {
        sl::SVO_COMPRESSION_MODE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::SVO_COMPRESSION_MODE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_SVO_COMPRESSION_MODE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::SVO_COMPRESSION_MODE");
    return (sl::SVO_COMPRESSION_MODE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::SVO_COMPRESSION_MODE");
    return (sl::SVO_COMPRESSION_MODE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::DEPTH_FORMAT __Pyx_PyInt_As_sl_3a__3a_DEPTH_FORMAT(PyObject *x) {
    const sl::DEPTH_FORMAT neg_one = (sl::DEPTH_FORMAT) -1, const_zero = (sl::DEPTH_FORMAT) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::DEPTH_FORMAT) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::DEPTH_FORMAT) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::DEPTH_FORMAT) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::DEPTH_FORMAT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) >= 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) (((((sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::DEPTH_FORMAT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) >= 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) (((((((sl::DEPTH_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::DEPTH_FORMAT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) >= 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) (((((((((sl::DEPTH_FORMAT)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::DEPTH_FORMAT) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::DEPTH_FORMAT) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_FORMAT, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::DEPTH_FORMAT) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_FORMAT, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::DEPTH_FORMAT) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) (((sl::DEPTH_FORMAT)-1)*(((((sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::DEPTH_FORMAT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) ((((((sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) (((sl::DEPTH_FORMAT)-1)*(((((((sl::DEPTH_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::DEPTH_FORMAT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) ((((((((sl::DEPTH_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) (((sl::DEPTH_FORMAT)-1)*(((((((((sl::DEPTH_FORMAT)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::DEPTH_FORMAT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_FORMAT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_FORMAT) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_FORMAT) ((((((((((sl::DEPTH_FORMAT)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_FORMAT)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::DEPTH_FORMAT) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_FORMAT, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::DEPTH_FORMAT) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_FORMAT, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::DEPTH_FORMAT val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::DEPTH_FORMAT) -1;
        }
    } else {
        sl::DEPTH_FORMAT val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::DEPTH_FORMAT) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_DEPTH_FORMAT(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::DEPTH_FORMAT");
    return (sl::DEPTH_FORMAT) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::DEPTH_FORMAT");
    return (sl::DEPTH_FORMAT) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::POINT_CLOUD_FORMAT __Pyx_PyInt_As_sl_3a__3a_POINT_CLOUD_FORMAT(PyObject *x) {
    const sl::POINT_CLOUD_FORMAT neg_one = (sl::POINT_CLOUD_FORMAT) -1, const_zero = (sl::POINT_CLOUD_FORMAT) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::POINT_CLOUD_FORMAT) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::POINT_CLOUD_FORMAT) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::POINT_CLOUD_FORMAT) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) >= 2 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) (((((sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) >= 3 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) (((((((sl::POINT_CLOUD_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) >= 4 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) (((((((((sl::POINT_CLOUD_FORMAT)digits[3]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::POINT_CLOUD_FORMAT) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::POINT_CLOUD_FORMAT) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::POINT_CLOUD_FORMAT, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::POINT_CLOUD_FORMAT) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::POINT_CLOUD_FORMAT, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::POINT_CLOUD_FORMAT) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) (((sl::POINT_CLOUD_FORMAT)-1)*(((((sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) ((((((sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) (((sl::POINT_CLOUD_FORMAT)-1)*(((((((sl::POINT_CLOUD_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) ((((((((sl::POINT_CLOUD_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) (((sl::POINT_CLOUD_FORMAT)-1)*(((((((((sl::POINT_CLOUD_FORMAT)digits[3]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::POINT_CLOUD_FORMAT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::POINT_CLOUD_FORMAT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::POINT_CLOUD_FORMAT) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::POINT_CLOUD_FORMAT) ((((((((((sl::POINT_CLOUD_FORMAT)digits[3]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[2]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[1]) << PyLong_SHIFT) | (sl::POINT_CLOUD_FORMAT)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::POINT_CLOUD_FORMAT) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::POINT_CLOUD_FORMAT, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::POINT_CLOUD_FORMAT) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::POINT_CLOUD_FORMAT, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::POINT_CLOUD_FORMAT val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::POINT_CLOUD_FORMAT) -1;
        }
    } else {
        sl::POINT_CLOUD_FORMAT val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::POINT_CLOUD_FORMAT) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_POINT_CLOUD_FORMAT(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::POINT_CLOUD_FORMAT");
    return (sl::POINT_CLOUD_FORMAT) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::POINT_CLOUD_FORMAT");
    return (sl::POINT_CLOUD_FORMAT) -1;
}

/* PrintOne */
        #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* FastTypeChecks */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
        #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
