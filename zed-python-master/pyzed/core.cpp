/* Generated by Cython 0.27.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\Camera.hpp",
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\Core.hpp",
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\Mesh.hpp",
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\defines.hpp",
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\types.hpp",
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include\\numpy\\arrayobject.h",
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include\\numpy\\ufuncobject.h",
            "pyzed\\Utils.cpp"
        ],
        "include_dirs": [
            "pyzed",
            ".\\pyzed",
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include",
            "C:\\Program Files (x86)\\ZED SDK\\include",
            "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0/include"
        ],
        "language": "c++",
        "libraries": [
            "sl_core64",
            "sl_scanning64",
            "sl_zed64"
        ],
        "library_dirs": [
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include",
            "C:\\Program Files (x86)\\ZED SDK\\lib",
            "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0/lib/x64"
        ],
        "name": "pyzed.core",
        "sources": [
            "pyzed/core.pyx"
        ]
    },
    "module_name": "pyzed.core"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_1"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyzed__core
#define __PYX_HAVE_API__pyzed__core
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string.h>
#include <string>
#include "sl/types.hpp"
#include "sl/Core.hpp"
#include "Utils.cpp"
#include <stdio.h>
#include "pythread.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <utility>
#include "sl/defines.hpp"
#include "sl/Mesh.hpp"
#include "sl/Camera.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "pyzed\\core.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "pyzed\\mesh.pxd",
  "pyzed\\camera.pxd",
};

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":743
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":746
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "pyzed/mesh.pxd":31
 * 
 * 
 * ctypedef unsigned int uint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "sl/Mesh.hpp" namespace "sl":
 */
typedef unsigned int __pyx_t_5pyzed_4mesh_uint;

/* "pyzed/core.pxd":217
 * 
 * 
 * ctypedef unsigned char uchar1             # <<<<<<<<<<<<<<
 * ctypedef types.Vector2[unsigned char] uchar2
 * ctypedef types.Vector3[unsigned char] uchar3
 */
typedef unsigned char __pyx_t_5pyzed_4core_uchar1;

/* "pyzed/core.pxd":222
 * ctypedef types.Vector4[unsigned char] uchar4
 * 
 * ctypedef float float1             # <<<<<<<<<<<<<<
 * ctypedef types.Vector2[float] float2
 * ctypedef types.Vector3[float] float3
 */
typedef float __pyx_t_5pyzed_4core_float1;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_5pyzed_5types_PyMatrix3f;
struct __pyx_obj_5pyzed_5types_PyMatrix4f;
struct __pyx_obj_5pyzed_4mesh_PyTexture;
struct __pyx_obj_5pyzed_4mesh_PyChunk;
struct __pyx_obj_5pyzed_4mesh_PyMesh;
struct __pyx_obj_5pyzed_6camera_PyZEDCamera;
struct __pyx_obj_5pyzed_4core_PyMat;
struct __pyx_obj_5pyzed_4core_PyRotation;
struct __pyx_obj_5pyzed_4core_PyTranslation;
struct __pyx_obj_5pyzed_4core_PyOrientation;
struct __pyx_obj_5pyzed_4core_PyTransform;
struct __pyx_obj_5pyzed_4core_PyCameraParameters;
struct __pyx_obj_5pyzed_4core_PyCalibrationParameters;
struct __pyx_obj_5pyzed_4core_PyCameraInformation;
struct __pyx_obj_5pyzed_4core_PyResolution;
struct __pyx_obj_5pyzed_4core_PyTextureImage;
struct __pyx_obj_5pyzed_4core_PyTextureImagePool;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "pyzed/core.pxd":218
 * 
 * ctypedef unsigned char uchar1
 * ctypedef types.Vector2[unsigned char] uchar2             # <<<<<<<<<<<<<<
 * ctypedef types.Vector3[unsigned char] uchar3
 * ctypedef types.Vector4[unsigned char] uchar4
 */
typedef sl::Vector2<unsigned char>  __pyx_t_5pyzed_4core_uchar2;

/* "pyzed/core.pxd":219
 * ctypedef unsigned char uchar1
 * ctypedef types.Vector2[unsigned char] uchar2
 * ctypedef types.Vector3[unsigned char] uchar3             # <<<<<<<<<<<<<<
 * ctypedef types.Vector4[unsigned char] uchar4
 * 
 */
typedef sl::Vector3<unsigned char>  __pyx_t_5pyzed_4core_uchar3;

/* "pyzed/core.pxd":220
 * ctypedef types.Vector2[unsigned char] uchar2
 * ctypedef types.Vector3[unsigned char] uchar3
 * ctypedef types.Vector4[unsigned char] uchar4             # <<<<<<<<<<<<<<
 * 
 * ctypedef float float1
 */
typedef sl::Vector4<unsigned char>  __pyx_t_5pyzed_4core_uchar4;

/* "pyzed/core.pxd":223
 * 
 * ctypedef float float1
 * ctypedef types.Vector2[float] float2             # <<<<<<<<<<<<<<
 * ctypedef types.Vector3[float] float3
 * ctypedef types.Vector4[float] float4
 */
typedef sl::Vector2<float>  __pyx_t_5pyzed_4core_float2;

/* "pyzed/core.pxd":224
 * ctypedef float float1
 * ctypedef types.Vector2[float] float2
 * ctypedef types.Vector3[float] float3             # <<<<<<<<<<<<<<
 * ctypedef types.Vector4[float] float4
 * 
 */
typedef sl::Vector3<float>  __pyx_t_5pyzed_4core_float3;

/* "pyzed/core.pxd":225
 * ctypedef types.Vector2[float] float2
 * ctypedef types.Vector3[float] float3
 * ctypedef types.Vector4[float] float4             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef sl::Vector4<float>  __pyx_t_5pyzed_4core_float4;

/* "pyzed/types.pxd":191
 * 
 * 
 * cdef class PyMatrix3f:             # <<<<<<<<<<<<<<
 *     cdef Matrix3f mat
 * 
 */
struct __pyx_obj_5pyzed_5types_PyMatrix3f {
  PyObject_HEAD
  sl::Matrix3f mat;
};


/* "pyzed/types.pxd":195
 * 
 * 
 * cdef class PyMatrix4f:             # <<<<<<<<<<<<<<
 *     cdef Matrix4f mat
 */
struct __pyx_obj_5pyzed_5types_PyMatrix4f {
  PyObject_HEAD
  sl::Matrix4f mat;
};


/* "pyzed/mesh.pxd":100
 * 
 * 
 * cdef class PyTexture:             # <<<<<<<<<<<<<<
 *     cdef Texture texture
 * 
 */
struct __pyx_obj_5pyzed_4mesh_PyTexture {
  PyObject_HEAD
  sl::Texture texture;
};


/* "pyzed/mesh.pxd":103
 *     cdef Texture texture
 * 
 * cdef class PyChunk:             # <<<<<<<<<<<<<<
 *     cdef Chunk chunk
 * 
 */
struct __pyx_obj_5pyzed_4mesh_PyChunk {
  PyObject_HEAD
  sl::Chunk chunk;
};


/* "pyzed/mesh.pxd":106
 *     cdef Chunk chunk
 * 
 * cdef class PyMesh:             # <<<<<<<<<<<<<<
 *     cdef Mesh* mesh
 */
struct __pyx_obj_5pyzed_4mesh_PyMesh {
  PyObject_HEAD
  sl::Mesh *mesh;
};


/* "pyzed/camera.pxd":238
 * 
 * 
 * cdef class PyZEDCamera:             # <<<<<<<<<<<<<<
 *     cdef Camera camera
 */
struct __pyx_obj_5pyzed_6camera_PyZEDCamera {
  PyObject_HEAD
  sl::Camera camera;
};


/* "pyzed/core.pxd":274
 * 
 * 
 * cdef class PyMat:             # <<<<<<<<<<<<<<
 *     cdef Mat mat
 * 
 */
struct __pyx_obj_5pyzed_4core_PyMat {
  PyObject_HEAD
  sl::Mat mat;
};


/* "pyzed/core.pxd":277
 *     cdef Mat mat
 * 
 * cdef class PyRotation(types.PyMatrix3f):             # <<<<<<<<<<<<<<
 *     cdef Rotation rotation
 * 
 */
struct __pyx_obj_5pyzed_4core_PyRotation {
  struct __pyx_obj_5pyzed_5types_PyMatrix3f __pyx_base;
  sl::Rotation rotation;
};


/* "pyzed/core.pxd":281
 * 
 * 
 * cdef class PyTranslation:             # <<<<<<<<<<<<<<
 *     cdef Translation translation
 * 
 */
struct __pyx_obj_5pyzed_4core_PyTranslation {
  PyObject_HEAD
  sl::Translation translation;
};


/* "pyzed/core.pxd":285
 * 
 * 
 * cdef class PyOrientation:             # <<<<<<<<<<<<<<
 *     cdef Orientation orientation
 * 
 */
struct __pyx_obj_5pyzed_4core_PyOrientation {
  PyObject_HEAD
  sl::Orientation orientation;
};


/* "pyzed/core.pxd":289
 * 
 * 
 * cdef class PyTransform(types.PyMatrix4f):             # <<<<<<<<<<<<<<
 *     cdef Transform transform
 * 
 */
struct __pyx_obj_5pyzed_4core_PyTransform {
  struct __pyx_obj_5pyzed_5types_PyMatrix4f __pyx_base;
  sl::Transform transform;
};


/* "pyzed/core.pxd":293
 * 
 * 
 * cdef class PyCameraParameters:             # <<<<<<<<<<<<<<
 *     cdef CameraParameters camera_params
 * 
 */
struct __pyx_obj_5pyzed_4core_PyCameraParameters {
  PyObject_HEAD
  struct sl::CameraParameters camera_params;
};


/* "pyzed/core.pxd":297
 * 
 * 
 * cdef class PyCalibrationParameters:             # <<<<<<<<<<<<<<
 *     cdef CalibrationParameters calibration
 *     cdef PyCameraParameters py_left_cam
 */
struct __pyx_obj_5pyzed_4core_PyCalibrationParameters {
  PyObject_HEAD
  struct sl::CalibrationParameters calibration;
  struct __pyx_obj_5pyzed_4core_PyCameraParameters *py_left_cam;
  struct __pyx_obj_5pyzed_4core_PyCameraParameters *py_right_cam;
  sl::Vector3<float>  R;
  sl::Vector3<float>  T;
};


/* "pyzed/core.pxd":305
 * 
 * 
 * cdef class PyCameraInformation:             # <<<<<<<<<<<<<<
 *     cdef PyCalibrationParameters py_calib
 *     cdef PyCalibrationParameters py_calib_raw
 */
struct __pyx_obj_5pyzed_4core_PyCameraInformation {
  PyObject_HEAD
  struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *py_calib;
  struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *py_calib_raw;
  unsigned int serial_number;
  unsigned int firmware_version;
};


/* "pyzed/core.pyx":62
 * 
 * 
 * cdef class PyResolution:             # <<<<<<<<<<<<<<
 *     cdef size_t width
 *     cdef size_t height
 */
struct __pyx_obj_5pyzed_4core_PyResolution {
  PyObject_HEAD
  size_t width;
  size_t height;
};


/* "pyzed/core.pyx":690
 *             raise TypeError("Argument is not of boolean type.")
 * 
 * cdef class PyTextureImage:             # <<<<<<<<<<<<<<
 *     cdef TextureImage* texture_img
 *     def __cinit__(self, PyMat py_mat, PyTransform py_transform):
 */
struct __pyx_obj_5pyzed_4core_PyTextureImage {
  PyObject_HEAD
  sl::TextureImage *texture_img;
};


/* "pyzed/core.pyx":719
 * 
 * 
 * cdef class PyTextureImagePool:             # <<<<<<<<<<<<<<
 *     cdef TextureImagePool texture_img_pool
 *     def __cinit__(self):
 */
struct __pyx_obj_5pyzed_4core_PyTextureImagePool {
  PyObject_HEAD
  sl::TextureImagePool texture_img_pool;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__sl_3a__3a_MEM(enum sl::MEM value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__sl_3a__3a_COPY_TYPE(enum sl::COPY_TYPE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(enum sl::MAT_TYPE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_timeStamp(sl::timeStamp value);

static PyObject* __pyx_convert__to_py_struct__sl_3a__3a_Resolution(struct sl::Resolution s);
/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::ERROR_CODE value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum sl::MAT_TYPE __Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum sl::MEM __Pyx_PyInt_As_enum__sl_3a__3a_MEM(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum sl::COPY_TYPE __Pyx_PyInt_As_enum__sl_3a__3a_COPY_TYPE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pyzed.types' */
static PyTypeObject *__pyx_ptype_5pyzed_5types_PyMatrix3f = 0;
static PyTypeObject *__pyx_ptype_5pyzed_5types_PyMatrix4f = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'pyzed.defines' */

/* Module declarations from 'pyzed.mesh' */
static PyTypeObject *__pyx_ptype_5pyzed_4mesh_PyTexture = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4mesh_PyChunk = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4mesh_PyMesh = 0;

/* Module declarations from 'pyzed.camera' */
static PyTypeObject *__pyx_ptype_5pyzed_6camera_PyZEDCamera = 0;

/* Module declarations from 'pyzed.core' */
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyMat = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyRotation = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyTranslation = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyOrientation = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyTransform = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyCameraParameters = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyCalibrationParameters = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyCameraInformation = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyResolution = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyTextureImage = 0;
static PyTypeObject *__pyx_ptype_5pyzed_4core_PyTextureImagePool = 0;
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *, Py_ssize_t); /*proto*/
static struct sl::Resolution __pyx_convert__from_py_struct__sl_3a__3a_Resolution(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pyzed.core"
int __pyx_module_is_main_pyzed__core = 0;

/* Implementation of 'pyzed.core' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_KeyError;
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_t1[] = "t1";
static const char __pyx_k_t2[] = "t2";
static const char __pyx_k_t3[] = "t3";
static const char __pyx_k_tr[] = "tr";
static const char __pyx_k_v0[] = "v0";
static const char __pyx_k_v1[] = "v1";
static const char __pyx_k_v2[] = "v2";
static const char __pyx_k_v3[] = "v3";
static const char __pyx_k__36[] = "";
static const char __pyx_k__70[] = "*";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_mat[] = "mat";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_rot[] = "rot";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_tr1[] = "tr1";
static const char __pyx_k_tr2[] = "tr2";
static const char __pyx_k_Enum[] = "Enum";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mat1[] = "mat1";
static const char __pyx_k_mat2[] = "mat2";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_swap[] = "swap";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_PyMEM[] = "PyMEM";
static const char __pyx_k_angle[] = "angle";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_image[] = "image";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_types[] = "types";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_camera[] = "camera";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_input0[] = "input0";
static const char __pyx_k_input1[] = "input1";
static const char __pyx_k_input2[] = "input2";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_orient[] = "orient";
static const char __pyx_k_py_mat[] = "py_mat";
static const char __pyx_k_radian[] = "radian";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_ptr_cpu[] = "ptr_cpu";
static const char __pyx_k_ptr_gpu[] = "ptr_gpu";
static const char __pyx_k_resizer[] = "resizer";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_cpy_type[] = "cpy_type";
static const char __pyx_k_get_data[] = "get_data";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_mat_type[] = "mat_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_step_cpu[] = "step_cpu";
static const char __pyx_k_step_gpu[] = "step_gpu";
static const char __pyx_k_PyMEM_CPU[] = "PyMEM_CPU";
static const char __pyx_k_PyMEM_GPU[] = "PyMEM_GPU";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_get_infos[] = "get_infos";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_py_camera[] = "py_camera";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_PyMAT_TYPE[] = "PyMAT_TYPE";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyzed_core[] = "pyzed.core";
static const char __pyx_k_resolution[] = "resolution";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PyCOPY_TYPE[] = "PyCOPY_TYPE";
static const char __pyx_k_memory_type[] = "memory_type";
static const char __pyx_k_pyzed_types[] = "pyzed.types";
static const char __pyx_k_PyERROR_CODE[] = "PyERROR_CODE";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_py_transform[] = "py_transform";
static const char __pyx_k_pyzed_camera[] = "pyzed.camera";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_get_data_type[] = "get_data_type";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_pyzed_core_pyx[] = "pyzed\\core.pyx";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_PyMAT_TYPE_8U_C1[] = "PyMAT_TYPE_8U_C1";
static const char __pyx_k_PyMAT_TYPE_8U_C2[] = "PyMAT_TYPE_8U_C2";
static const char __pyx_k_PyMAT_TYPE_8U_C3[] = "PyMAT_TYPE_8U_C3";
static const char __pyx_k_PyMAT_TYPE_8U_C4[] = "PyMAT_TYPE_8U_C4";
static const char __pyx_k_PyMAT_TYPE_32F_C1[] = "PyMAT_TYPE_32F_C1";
static const char __pyx_k_PyMAT_TYPE_32F_C2[] = "PyMAT_TYPE_32F_C2";
static const char __pyx_k_PyMAT_TYPE_32F_C3[] = "PyMAT_TYPE_32F_C3";
static const char __pyx_k_PyMAT_TYPE_32F_C4[] = "PyMAT_TYPE_32F_C4";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_PyCOPY_TYPE_CPU_CPU[] = "PyCOPY_TYPE_CPU_CPU";
static const char __pyx_k_PyCOPY_TYPE_CPU_GPU[] = "PyCOPY_TYPE_CPU_GPU";
static const char __pyx_k_PyCOPY_TYPE_GPU_CPU[] = "PyCOPY_TYPE_GPU_CPU";
static const char __pyx_k_PyCOPY_TYPE_GPU_GPU[] = "PyCOPY_TYPE_GPU_GPU";
static const char __pyx_k_get_current_timestamp[] = "get_current_timestamp";
static const char __pyx_k_normalize_orientation[] = "normalize_orientation";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_Argument_is_not_of_PyMEM_type[] = "Argument is not of PyMEM type.";
static const char __pyx_k_Unknown_Mat_data_type_value_0[] = "Unknown Mat data_type value: {0}";
static const char __pyx_k_Argument_is_not_of_boolean_type[] = "Argument is not of boolean type.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Argument_are_not_of_PyMAT_TYPE_o[] = "Argument are not of PyMAT_TYPE or PyMEM type.";
static const char __pyx_k_Argument_is_not_of_PyMAT_TYPE_ty[] = "Argument is not of PyMAT_TYPE type.";
static const char __pyx_k_Arguments_must_be_of_PyMat_and_P[] = "Arguments must be of PyMat and PyMEM types.";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'width'";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_camera_params_cannot_be_con[] = "self.camera_params cannot be converted to a Python object for pickling";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'height'";
static PyObject *__pyx_kp_s_Argument_are_not_of_PyMAT_TYPE_o;
static PyObject *__pyx_kp_s_Argument_is_not_of_PyMAT_TYPE_ty;
static PyObject *__pyx_kp_s_Argument_is_not_of_PyMEM_type;
static PyObject *__pyx_kp_s_Argument_is_not_of_boolean_type;
static PyObject *__pyx_kp_s_Arguments_must_be_of_PyMat_and_P;
static PyObject *__pyx_n_s_Enum;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_PyCOPY_TYPE;
static PyObject *__pyx_n_s_PyCOPY_TYPE_CPU_CPU;
static PyObject *__pyx_n_s_PyCOPY_TYPE_CPU_GPU;
static PyObject *__pyx_n_s_PyCOPY_TYPE_GPU_CPU;
static PyObject *__pyx_n_s_PyCOPY_TYPE_GPU_GPU;
static PyObject *__pyx_n_s_PyERROR_CODE;
static PyObject *__pyx_n_s_PyMAT_TYPE;
static PyObject *__pyx_n_s_PyMAT_TYPE_32F_C1;
static PyObject *__pyx_n_s_PyMAT_TYPE_32F_C2;
static PyObject *__pyx_n_s_PyMAT_TYPE_32F_C3;
static PyObject *__pyx_n_s_PyMAT_TYPE_32F_C4;
static PyObject *__pyx_n_s_PyMAT_TYPE_8U_C1;
static PyObject *__pyx_n_s_PyMAT_TYPE_8U_C2;
static PyObject *__pyx_n_s_PyMAT_TYPE_8U_C3;
static PyObject *__pyx_n_s_PyMAT_TYPE_8U_C4;
static PyObject *__pyx_n_s_PyMEM;
static PyObject *__pyx_n_s_PyMEM_CPU;
static PyObject *__pyx_n_s_PyMEM_GPU;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unknown_Mat_data_type_value_0;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__36;
static PyObject *__pyx_n_s__70;
static PyObject *__pyx_n_s_angle;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_camera;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cpy_type;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enum;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get_current_timestamp;
static PyObject *__pyx_n_s_get_data;
static PyObject *__pyx_n_s_get_data_type;
static PyObject *__pyx_n_s_get_infos;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_image;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_input0;
static PyObject *__pyx_n_s_input1;
static PyObject *__pyx_n_s_input2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_n_s_mat1;
static PyObject *__pyx_n_s_mat2;
static PyObject *__pyx_n_s_mat_type;
static PyObject *__pyx_n_s_memory_type;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_normalize_orientation;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_orient;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_ptr_cpu;
static PyObject *__pyx_n_s_ptr_gpu;
static PyObject *__pyx_n_s_py_camera;
static PyObject *__pyx_n_s_py_mat;
static PyObject *__pyx_n_s_py_transform;
static PyObject *__pyx_n_s_pyzed_camera;
static PyObject *__pyx_n_s_pyzed_core;
static PyObject *__pyx_kp_s_pyzed_core_pyx;
static PyObject *__pyx_n_s_pyzed_types;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_radian;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_resizer;
static PyObject *__pyx_n_s_resolution;
static PyObject *__pyx_n_s_rot;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_camera_params_cannot_be_con;
static PyObject *__pyx_n_s_set;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_step_cpu;
static PyObject *__pyx_n_s_step_gpu;
static PyObject *__pyx_n_s_swap;
static PyObject *__pyx_n_s_t1;
static PyObject *__pyx_n_s_t2;
static PyObject *__pyx_n_s_t3;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tr;
static PyObject *__pyx_n_s_tr1;
static PyObject *__pyx_n_s_tr2;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_n_s_uint8;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_v0;
static PyObject *__pyx_n_s_v1;
static PyObject *__pyx_n_s_v2;
static PyObject *__pyx_n_s_v3;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_5pyzed_4core_get_current_timestamp(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_5pyzed_4core_12PyResolution___cinit__(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_2py_area(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_5width___get__(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_6height___get__(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_4__richcmp__(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_left, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_right, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2fx___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2fy___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2cx___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2cy___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_5disto___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_5v_fov___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_5h_fov___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_5d_fov___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_10image_size___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_23PyCalibrationParameters___cinit__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_2set(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_1R___get__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_1T___get__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_8left_cam___get__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_9right_cam___get__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_19PyCameraInformation___cinit__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_py_camera, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resizer); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_22calibration_parameters___get__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_26calibration_parameters_raw___get__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_13serial_number___get__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_16firmware_version___get__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_5PyMat___cinit__(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_2init_mat_type(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_4init_mat_cpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_ptr, PyObject *__pyx_v_step, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_6init_mat_cpu_gpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_ptr_cpu, PyObject *__pyx_v_step_cpu, PyObject *__pyx_v_ptr_gpu, PyObject *__pyx_v_step_gpu); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_8init_mat_resolution(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_10init_mat_resolution_cpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_ptr, PyObject *__pyx_v_step, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_12init_mat_resolution_cpu_gpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_ptr_cpu, PyObject *__pyx_v_step_cpu, PyObject *__pyx_v_ptr_gpu, PyObject *__pyx_v_step_gpu); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_14init_mat(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_16alloc_size(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_18alloc_resolution(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_20free(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_22update_cpu_from_gpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_24update_gpu_from_cpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_26copy_to(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_cpy_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_28set_from(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_cpy_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_30read(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_filepath); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_32write(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_filepath); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_34set_to(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_36set_value(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_value, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_38get_value(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_40get_width(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_42get_height(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_44get_resolution(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_46get_channels(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_48get_data_type(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_50get_memory_type(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_52get_data(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_54get_step_bytes(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_56get_step(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_memory_type); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_58get_pixel_bytes(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_60get_width_bytes(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_62get_infos(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_64is_init(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_66is_memory_owner(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_68clone(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_70move(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_72swap(PyObject *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_mat1, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_mat2); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_4name___get__(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_7verbose___get__(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_74__repr__(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_76__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_5PyMat_78__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_10PyRotation___cinit__(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_2init_rotation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_rot); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_4init_matrix(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, struct __pyx_obj_5pyzed_5types_PyMatrix3f *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_6init_orientation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_8init_angle_translation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, float __pyx_v_angle, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_axis); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_10set_orientation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_py_orientation); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_12get_orientation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_14get_rotation_vector(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_16set_rotation_vector(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, float __pyx_v_input0, float __pyx_v_input1, float __pyx_v_input2); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_18get_euler_angles(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, PyObject *__pyx_v_radian); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_20set_euler_angles(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, float __pyx_v_input0, float __pyx_v_input1, float __pyx_v_input2, PyBoolObject *__pyx_v_radian); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_13PyTranslation___cinit__(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_2init_translation(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_4init_vector(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, float __pyx_v_t1, float __pyx_v_t2, float __pyx_v_t3); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_6normalize(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_8normalize_translation(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_10size(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_12get(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_14__mul__(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_13PyOrientation___cinit__(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_2init_orientation(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_4init_vector(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, float __pyx_v_v0, float __pyx_v_v1, float __pyx_v_v2, float __pyx_v_v3); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_6init_rotation(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_rotation); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_8init_translation(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr1, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr2); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_10set_rotation_matrix(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_py_rotation); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_12get_rotation_matrix(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_14set_identity(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_16identity(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_18set_zeros(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_20zeros(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_22normalize(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_24normalize_orientation(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_26size(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_28get(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_30__mul__(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_11PyTransform___cinit__(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_2init_transform(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_motion); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_4init_matrix(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_5types_PyMatrix4f *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_6init_rotation_translation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_rot, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_8init_orientation_translation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_10set_rotation_matrix(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_py_rotation); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_12get_rotation_matrix(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_14set_translation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_py_translation); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_16get_translation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_18set_orientation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_py_orientation); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_20get_orientation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_22get_rotation_vector(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_24set_rotation_vector(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, float __pyx_v_input0, float __pyx_v_input1, float __pyx_v_input2); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_26get_euler_angles(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, PyObject *__pyx_v_radian); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_28set_euler_angles(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, float __pyx_v_input0, float __pyx_v_input1, float __pyx_v_input2, PyObject *__pyx_v_radian); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_30__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_32__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_14PyTextureImage___cinit__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_py_transform); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_2clear(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_3img___get__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_4core_14PyTextureImage_3img_2__set__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_4path___get__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzed_4core_14PyTextureImage_4path_2__set__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_texture_path); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzed_4core_18PyTextureImagePool___cinit__(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_2size(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_4stack(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_image, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_6concat(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_that); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_8clear(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_1v___get__(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5pyzed_4core_PyMat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyRotation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyTranslation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyOrientation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyTransform(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyCameraParameters(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyCalibrationParameters(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyCameraInformation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyResolution(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyTextureImage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzed_4core_PyTextureImagePool(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_3;
static PyObject *__pyx_k__11;
static PyObject *__pyx_k__13;
static PyObject *__pyx_k__17;
static PyObject *__pyx_k__20;
static PyObject *__pyx_k__22;
static PyObject *__pyx_k__25;
static PyObject *__pyx_k__26;
static PyObject *__pyx_k__27;
static PyObject *__pyx_k__28;
static PyObject *__pyx_k__29;
static PyObject *__pyx_k__30;
static PyObject *__pyx_k__32;
static PyObject *__pyx_k__34;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;

/* "pyzed/core.pyx":58
 * 
 * 
 * def get_current_timestamp():             # <<<<<<<<<<<<<<
 *     return getCurrentTimeStamp()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_1get_current_timestamp(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_get_current_timestamp[] = "get_current_timestamp()";
static PyMethodDef __pyx_mdef_5pyzed_4core_1get_current_timestamp = {"get_current_timestamp", (PyCFunction)__pyx_pw_5pyzed_4core_1get_current_timestamp, METH_NOARGS, __pyx_doc_5pyzed_4core_get_current_timestamp};
static PyObject *__pyx_pw_5pyzed_4core_1get_current_timestamp(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_current_timestamp (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_get_current_timestamp(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_get_current_timestamp(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_current_timestamp", 0);

  /* "pyzed/core.pyx":59
 * 
 * def get_current_timestamp():
 *     return getCurrentTimeStamp()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_sl_3a__3a_timeStamp(sl::getCurrentTimeStamp()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":58
 * 
 * 
 * def get_current_timestamp():             # <<<<<<<<<<<<<<
 *     return getCurrentTimeStamp()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.get_current_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":65
 *     cdef size_t width
 *     cdef size_t height
 *     def __cinit__(self, width=0, height=0):             # <<<<<<<<<<<<<<
 *         self.width = width
 *         self.height = height
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_12PyResolution_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_12PyResolution_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 65, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 65, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyResolution.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_12PyResolution___cinit__(((struct __pyx_obj_5pyzed_4core_PyResolution *)__pyx_v_self), __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_12PyResolution___cinit__(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":66
 *     cdef size_t height
 *     def __cinit__(self, width=0, height=0):
 *         self.width = width             # <<<<<<<<<<<<<<
 *         self.height = height
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_width); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_1;

  /* "pyzed/core.pyx":67
 *     def __cinit__(self, width=0, height=0):
 *         self.width = width
 *         self.height = height             # <<<<<<<<<<<<<<
 * 
 *     def py_area(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_height); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_1;

  /* "pyzed/core.pyx":65
 *     cdef size_t width
 *     cdef size_t height
 *     def __cinit__(self, width=0, height=0):             # <<<<<<<<<<<<<<
 *         self.width = width
 *         self.height = height
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzed.core.PyResolution.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":69
 *         self.height = height
 * 
 *     def py_area(self):             # <<<<<<<<<<<<<<
 *         return self.width * self.height
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_3py_area(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_12PyResolution_2py_area[] = "PyResolution.py_area(self)";
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_3py_area(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_area (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_12PyResolution_2py_area(((struct __pyx_obj_5pyzed_4core_PyResolution *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_2py_area(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_area", 0);

  /* "pyzed/core.pyx":70
 * 
 *     def py_area(self):
 *         return self.width * self.height             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->width * __pyx_v_self->height)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":69
 *         self.height = height
 * 
 *     def py_area(self):             # <<<<<<<<<<<<<<
 *         return self.width * self.height
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyResolution.py_area", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":73
 * 
 *     @property
 *     def width(self):             # <<<<<<<<<<<<<<
 *         return self.width
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_5width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_12PyResolution_5width___get__(((struct __pyx_obj_5pyzed_4core_PyResolution *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_5width___get__(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":74
 *     @property
 *     def width(self):
 *         return self.width             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":73
 * 
 *     @property
 *     def width(self):             # <<<<<<<<<<<<<<
 *         return self.width
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyResolution.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":77
 * 
 *     @property
 *     def height(self):             # <<<<<<<<<<<<<<
 *         return self.height
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_6height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_12PyResolution_6height___get__(((struct __pyx_obj_5pyzed_4core_PyResolution *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_6height___get__(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":78
 *     @property
 *     def height(self):
 *         return self.height             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(PyResolution left, PyResolution right, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":77
 * 
 *     @property
 *     def height(self):             # <<<<<<<<<<<<<<
 *         return self.height
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyResolution.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":80
 *         return self.height
 * 
 *     def __richcmp__(PyResolution left, PyResolution right, int op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return left.width==right.width and left.height==right.height
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_5__richcmp__(PyObject *__pyx_v_left, PyObject *__pyx_v_right, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_5__richcmp__(PyObject *__pyx_v_left, PyObject *__pyx_v_right, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_left), __pyx_ptype_5pyzed_4core_PyResolution, 1, "left", 0))) __PYX_ERR(0, 80, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_right), __pyx_ptype_5pyzed_4core_PyResolution, 1, "right", 0))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_12PyResolution_4__richcmp__(((struct __pyx_obj_5pyzed_4core_PyResolution *)__pyx_v_left), ((struct __pyx_obj_5pyzed_4core_PyResolution *)__pyx_v_right), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_4__richcmp__(struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_left, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_right, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pyzed/core.pyx":81
 * 
 *     def __richcmp__(PyResolution left, PyResolution right, int op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return left.width==right.width and left.height==right.height
 *         if op == 3:
 */
  __pyx_t_1 = ((__pyx_v_op == 2) != 0);
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":82
 *     def __richcmp__(PyResolution left, PyResolution right, int op):
 *         if op == 2:
 *             return left.width==right.width and left.height==right.height             # <<<<<<<<<<<<<<
 *         if op == 3:
 *             return left.width!=right.width or left.height!=right.height
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = (__pyx_v_left->width == __pyx_v_right->width);
    if (__pyx_t_1) {
    } else {
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_v_left->height == __pyx_v_right->height);
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_L4_bool_binop_done:;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":81
 * 
 *     def __richcmp__(PyResolution left, PyResolution right, int op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return left.width==right.width and left.height==right.height
 *         if op == 3:
 */
  }

  /* "pyzed/core.pyx":83
 *         if op == 2:
 *             return left.width==right.width and left.height==right.height
 *         if op == 3:             # <<<<<<<<<<<<<<
 *             return left.width!=right.width or left.height!=right.height
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_op == 3) != 0);
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":84
 *             return left.width==right.width and left.height==right.height
 *         if op == 3:
 *             return left.width!=right.width or left.height!=right.height             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = (__pyx_v_left->width != __pyx_v_right->width);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_v_left->height != __pyx_v_right->height);
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_L7_bool_binop_done:;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":83
 *         if op == 2:
 *             return left.width==right.width and left.height==right.height
 *         if op == 3:             # <<<<<<<<<<<<<<
 *             return left.width!=right.width or left.height!=right.height
 *         else:
 */
  }

  /* "pyzed/core.pyx":86
 *             return left.width!=right.width or left.height!=right.height
 *         else:
 *             raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 86, __pyx_L1_error)
  }

  /* "pyzed/core.pyx":80
 *         return self.height
 * 
 *     def __richcmp__(PyResolution left, PyResolution right, int op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return left.width==right.width and left.height==right.height
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.core.PyResolution.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_12PyResolution_6__reduce_cython__[] = "PyResolution.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_12PyResolution_6__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyResolution *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyResolution.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_12PyResolution_8__setstate_cython__[] = "PyResolution.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_12PyResolution_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_12PyResolution_8__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyResolution *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_12PyResolution_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyResolution.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":91
 * cdef class PyCameraParameters:
 *     @property
 *     def fx(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.fx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_2fx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_2fx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_2fx___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2fx___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":92
 *     @property
 *     def fx(self):
 *         return self.camera_params.fx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera_params.fx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":91
 * cdef class PyCameraParameters:
 *     @property
 *     def fx(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.fx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.fx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":95
 * 
 *     @property
 *     def fy(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.fy
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_2fy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_2fy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_2fy___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2fy___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":96
 *     @property
 *     def fy(self):
 *         return self.camera_params.fy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera_params.fy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":95
 * 
 *     @property
 *     def fy(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.fy
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.fy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":99
 * 
 *     @property
 *     def cx(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.cx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_2cx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_2cx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_2cx___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2cx___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":100
 *     @property
 *     def cx(self):
 *         return self.camera_params.cx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera_params.cx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":99
 * 
 *     @property
 *     def cx(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.cx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.cx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":103
 * 
 *     @property
 *     def cy(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.cy
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_2cy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_2cy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_2cy___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2cy___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":104
 *     @property
 *     def cy(self):
 *         return self.camera_params.cy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera_params.cy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":103
 * 
 *     @property
 *     def cy(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.cy
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.cy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":107
 * 
 *     @property
 *     def disto(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.disto
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_5disto_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_5disto_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_5disto___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_5disto___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":108
 *     @property
 *     def disto(self):
 *         return self.camera_params.disto             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_carray_to_py_double(__pyx_v_self->camera_params.disto, 5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":107
 * 
 *     @property
 *     def disto(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.disto
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.disto.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":111
 * 
 *     @property
 *     def v_fov(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.v_fov
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_5v_fov_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_5v_fov_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_5v_fov___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_5v_fov___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":112
 *     @property
 *     def v_fov(self):
 *         return self.camera_params.v_fov             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera_params.v_fov); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":111
 * 
 *     @property
 *     def v_fov(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.v_fov
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.v_fov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":115
 * 
 *     @property
 *     def h_fov(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.h_fov
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_5h_fov_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_5h_fov_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_5h_fov___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_5h_fov___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":116
 *     @property
 *     def h_fov(self):
 *         return self.camera_params.h_fov             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera_params.h_fov); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":115
 * 
 *     @property
 *     def h_fov(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.h_fov
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.h_fov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":119
 * 
 *     @property
 *     def d_fov(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.d_fov
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_5d_fov_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_5d_fov_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_5d_fov___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_5d_fov___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":120
 *     @property
 *     def d_fov(self):
 *         return self.camera_params.d_fov             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->camera_params.d_fov); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":119
 * 
 *     @property
 *     def d_fov(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.d_fov
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.d_fov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":123
 * 
 *     @property
 *     def image_size(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.image_size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_10image_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_10image_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_10image_size___get__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_10image_size___get__(struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":124
 *     @property
 *     def image_size(self):
 *         return self.camera_params.image_size             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert__to_py_struct__sl_3a__3a_Resolution(__pyx_v_self->camera_params.image_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":123
 * 
 *     @property
 *     def image_size(self):             # <<<<<<<<<<<<<<
 *         return self.camera_params.image_size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.image_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_18PyCameraParameters___reduce_cython__[] = "PyCameraParameters.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters___reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_18PyCameraParameters_2__setstate_cython__[] = "PyCameraParameters.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_18PyCameraParameters_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyCameraParameters_2__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyCameraParameters_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCameraParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraParameters.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":128
 * 
 * cdef class PyCalibrationParameters:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.py_left_cam = PyCameraParameters()
 *         self.py_right_cam = PyCameraParameters()
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_23PyCalibrationParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_23PyCalibrationParameters_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_4core_23PyCalibrationParameters___cinit__(((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_23PyCalibrationParameters___cinit__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":129
 * cdef class PyCalibrationParameters:
 *     def __cinit__(self):
 *         self.py_left_cam = PyCameraParameters()             # <<<<<<<<<<<<<<
 *         self.py_right_cam = PyCameraParameters()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyCameraParameters), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->py_left_cam);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_left_cam));
  __pyx_v_self->py_left_cam = ((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":130
 *     def __cinit__(self):
 *         self.py_left_cam = PyCameraParameters()
 *         self.py_right_cam = PyCameraParameters()             # <<<<<<<<<<<<<<
 * 
 *     def set(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyCameraParameters), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->py_right_cam);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_right_cam));
  __pyx_v_self->py_right_cam = ((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":128
 * 
 * cdef class PyCalibrationParameters:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.py_left_cam = PyCameraParameters()
 *         self.py_right_cam = PyCameraParameters()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCalibrationParameters.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":132
 *         self.py_right_cam = PyCameraParameters()
 * 
 *     def set(self):             # <<<<<<<<<<<<<<
 *         self.py_left_cam.camera_params = self.calibration.left_cam
 *         self.py_right_cam.camera_params = self.calibration.right_cam
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_3set(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_23PyCalibrationParameters_2set[] = "PyCalibrationParameters.set(self)";
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_3set(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_23PyCalibrationParameters_2set(((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_2set(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct sl::CameraParameters __pyx_t_1;
  sl::Vector3<float>  __pyx_t_2;
  __Pyx_RefNannySetupContext("set", 0);

  /* "pyzed/core.pyx":133
 * 
 *     def set(self):
 *         self.py_left_cam.camera_params = self.calibration.left_cam             # <<<<<<<<<<<<<<
 *         self.py_right_cam.camera_params = self.calibration.right_cam
 *         self.R = self.calibration.R
 */
  __pyx_t_1 = __pyx_v_self->calibration.left_cam;
  __pyx_v_self->py_left_cam->camera_params = __pyx_t_1;

  /* "pyzed/core.pyx":134
 *     def set(self):
 *         self.py_left_cam.camera_params = self.calibration.left_cam
 *         self.py_right_cam.camera_params = self.calibration.right_cam             # <<<<<<<<<<<<<<
 *         self.R = self.calibration.R
 *         self.T = self.calibration.T
 */
  __pyx_t_1 = __pyx_v_self->calibration.right_cam;
  __pyx_v_self->py_right_cam->camera_params = __pyx_t_1;

  /* "pyzed/core.pyx":135
 *         self.py_left_cam.camera_params = self.calibration.left_cam
 *         self.py_right_cam.camera_params = self.calibration.right_cam
 *         self.R = self.calibration.R             # <<<<<<<<<<<<<<
 *         self.T = self.calibration.T
 * 
 */
  __pyx_t_2 = __pyx_v_self->calibration.R;
  __pyx_v_self->R = __pyx_t_2;

  /* "pyzed/core.pyx":136
 *         self.py_right_cam.camera_params = self.calibration.right_cam
 *         self.R = self.calibration.R
 *         self.T = self.calibration.T             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_v_self->calibration.T;
  __pyx_v_self->T = __pyx_t_2;

  /* "pyzed/core.pyx":132
 *         self.py_right_cam = PyCameraParameters()
 * 
 *     def set(self):             # <<<<<<<<<<<<<<
 *         self.py_left_cam.camera_params = self.calibration.left_cam
 *         self.py_right_cam.camera_params = self.calibration.right_cam
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":139
 * 
 *     @property
 *     def R(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_1R_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_1R_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_23PyCalibrationParameters_1R___get__(((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_1R___get__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self) {
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":140
 *     @property
 *     def R(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.calibration.R[i]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":141
 *     def R(self):
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             arr[i] = self.calibration.R[i]
 *         return arr
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyzed/core.pyx":142
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 *             arr[i] = self.calibration.R[i]             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->calibration.R[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyzed/core.pyx":143
 *         for i in range(3):
 *             arr[i] = self.calibration.R[i]
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":139
 * 
 *     @property
 *     def R(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyCalibrationParameters.R.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":146
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_23PyCalibrationParameters_1T___get__(((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_1T___get__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self) {
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":147
 *     @property
 *     def T(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.calibration.T[i]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":148
 *     def T(self):
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             arr[i] = self.calibration.T[i]
 *         return arr
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyzed/core.pyx":149
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 *             arr[i] = self.calibration.T[i]             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->calibration.T[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyzed/core.pyx":150
 *         for i in range(3):
 *             arr[i] = self.calibration.T[i]
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":146
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyCalibrationParameters.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":153
 * 
 *     @property
 *     def left_cam(self):             # <<<<<<<<<<<<<<
 *         return self.py_left_cam
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_8left_cam_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_8left_cam_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_23PyCalibrationParameters_8left_cam___get__(((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_8left_cam___get__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":154
 *     @property
 *     def left_cam(self):
 *         return self.py_left_cam             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->py_left_cam));
  __pyx_r = ((PyObject *)__pyx_v_self->py_left_cam);
  goto __pyx_L0;

  /* "pyzed/core.pyx":153
 * 
 *     @property
 *     def left_cam(self):             # <<<<<<<<<<<<<<
 *         return self.py_left_cam
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":157
 * 
 *     @property
 *     def right_cam(self):             # <<<<<<<<<<<<<<
 *         return self.py_right_cam
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_9right_cam_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_9right_cam_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_23PyCalibrationParameters_9right_cam___get__(((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_9right_cam___get__(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":158
 *     @property
 *     def right_cam(self):
 *         return self.py_right_cam             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->py_right_cam));
  __pyx_r = ((PyObject *)__pyx_v_self->py_right_cam);
  goto __pyx_L0;

  /* "pyzed/core.pyx":157
 * 
 *     @property
 *     def right_cam(self):             # <<<<<<<<<<<<<<
 *         return self.py_right_cam
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_23PyCalibrationParameters_4__reduce_cython__[] = "PyCalibrationParameters.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_23PyCalibrationParameters_4__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCalibrationParameters.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_23PyCalibrationParameters_6__setstate_cython__[] = "PyCalibrationParameters.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_23PyCalibrationParameters_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_23PyCalibrationParameters_6__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_23PyCalibrationParameters_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCalibrationParameters.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":162
 * 
 * cdef class PyCameraInformation:
 *     def __cinit__(self, camera.PyZEDCamera py_camera, PyResolution resizer):             # <<<<<<<<<<<<<<
 *         res = Resolution(resizer.width, resizer.height)
 *         self.py_calib = PyCalibrationParameters()
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_19PyCameraInformation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_19PyCameraInformation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_py_camera = 0;
  struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resizer = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_camera,&__pyx_n_s_resizer,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_camera)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resizer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 162, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 162, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_py_camera = ((struct __pyx_obj_5pyzed_6camera_PyZEDCamera *)values[0]);
    __pyx_v_resizer = ((struct __pyx_obj_5pyzed_4core_PyResolution *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyCameraInformation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_camera), __pyx_ptype_5pyzed_6camera_PyZEDCamera, 1, "py_camera", 0))) __PYX_ERR(0, 162, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resizer), __pyx_ptype_5pyzed_4core_PyResolution, 1, "resizer", 0))) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_19PyCameraInformation___cinit__(((struct __pyx_obj_5pyzed_4core_PyCameraInformation *)__pyx_v_self), __pyx_v_py_camera, __pyx_v_resizer);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_19PyCameraInformation___cinit__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self, struct __pyx_obj_5pyzed_6camera_PyZEDCamera *__pyx_v_py_camera, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resizer) {
  PyObject *__pyx_v_res = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct sl::Resolution __pyx_t_3;
  struct sl::CalibrationParameters __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":163
 * cdef class PyCameraInformation:
 *     def __cinit__(self, camera.PyZEDCamera py_camera, PyResolution resizer):
 *         res = Resolution(resizer.width, resizer.height)             # <<<<<<<<<<<<<<
 *         self.py_calib = PyCalibrationParameters()
 *         self.py_calib.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_resizer->width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_width, __pyx_t_2) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_resizer->height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_height, __pyx_t_2) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_res = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":164
 *     def __cinit__(self, camera.PyZEDCamera py_camera, PyResolution resizer):
 *         res = Resolution(resizer.width, resizer.height)
 *         self.py_calib = PyCalibrationParameters()             # <<<<<<<<<<<<<<
 *         self.py_calib.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters
 *         self.py_calib_raw = PyCalibrationParameters()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyCalibrationParameters), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->py_calib);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_calib));
  __pyx_v_self->py_calib = ((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":165
 *         res = Resolution(resizer.width, resizer.height)
 *         self.py_calib = PyCalibrationParameters()
 *         self.py_calib.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters             # <<<<<<<<<<<<<<
 *         self.py_calib_raw = PyCalibrationParameters()
 *         self.py_calib_raw.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters_raw
 */
  __pyx_t_3 = __pyx_convert__from_py_struct__sl_3a__3a_Resolution(__pyx_v_res); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L1_error)
  __pyx_t_4 = __pyx_v_py_camera->camera.getCameraInformation(__pyx_t_3).calibration_parameters;
  __pyx_v_self->py_calib->calibration = __pyx_t_4;

  /* "pyzed/core.pyx":166
 *         self.py_calib = PyCalibrationParameters()
 *         self.py_calib.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters
 *         self.py_calib_raw = PyCalibrationParameters()             # <<<<<<<<<<<<<<
 *         self.py_calib_raw.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters_raw
 *         self.py_calib.set()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyCalibrationParameters), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->py_calib_raw);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_calib_raw));
  __pyx_v_self->py_calib_raw = ((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":167
 *         self.py_calib.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters
 *         self.py_calib_raw = PyCalibrationParameters()
 *         self.py_calib_raw.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters_raw             # <<<<<<<<<<<<<<
 *         self.py_calib.set()
 *         self.py_calib_raw.set()
 */
  __pyx_t_3 = __pyx_convert__from_py_struct__sl_3a__3a_Resolution(__pyx_v_res); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L1_error)
  __pyx_t_4 = __pyx_v_py_camera->camera.getCameraInformation(__pyx_t_3).calibration_parameters_raw;
  __pyx_v_self->py_calib_raw->calibration = __pyx_t_4;

  /* "pyzed/core.pyx":168
 *         self.py_calib_raw = PyCalibrationParameters()
 *         self.py_calib_raw.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters_raw
 *         self.py_calib.set()             # <<<<<<<<<<<<<<
 *         self.py_calib_raw.set()
 *         self.serial_number = py_camera.camera.getCameraInformation(res).serial_number
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->py_calib), __pyx_n_s_set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":169
 *         self.py_calib_raw.calibration = py_camera.camera.getCameraInformation(res).calibration_parameters_raw
 *         self.py_calib.set()
 *         self.py_calib_raw.set()             # <<<<<<<<<<<<<<
 *         self.serial_number = py_camera.camera.getCameraInformation(res).serial_number
 *         self.firmware_version = py_camera.camera.getCameraInformation(res).firmware_version
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->py_calib_raw), __pyx_n_s_set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":170
 *         self.py_calib.set()
 *         self.py_calib_raw.set()
 *         self.serial_number = py_camera.camera.getCameraInformation(res).serial_number             # <<<<<<<<<<<<<<
 *         self.firmware_version = py_camera.camera.getCameraInformation(res).firmware_version
 * 
 */
  __pyx_t_3 = __pyx_convert__from_py_struct__sl_3a__3a_Resolution(__pyx_v_res); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_t_6 = __pyx_v_py_camera->camera.getCameraInformation(__pyx_t_3).serial_number;
  __pyx_v_self->serial_number = __pyx_t_6;

  /* "pyzed/core.pyx":171
 *         self.py_calib_raw.set()
 *         self.serial_number = py_camera.camera.getCameraInformation(res).serial_number
 *         self.firmware_version = py_camera.camera.getCameraInformation(res).firmware_version             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_3 = __pyx_convert__from_py_struct__sl_3a__3a_Resolution(__pyx_v_res); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L1_error)
  __pyx_t_6 = __pyx_v_py_camera->camera.getCameraInformation(__pyx_t_3).firmware_version;
  __pyx_v_self->firmware_version = __pyx_t_6;

  /* "pyzed/core.pyx":162
 * 
 * cdef class PyCameraInformation:
 *     def __cinit__(self, camera.PyZEDCamera py_camera, PyResolution resizer):             # <<<<<<<<<<<<<<
 *         res = Resolution(resizer.width, resizer.height)
 *         self.py_calib = PyCalibrationParameters()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyCameraInformation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":174
 * 
 *     @property
 *     def calibration_parameters(self):             # <<<<<<<<<<<<<<
 *         return self.py_calib
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_22calibration_parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_22calibration_parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_19PyCameraInformation_22calibration_parameters___get__(((struct __pyx_obj_5pyzed_4core_PyCameraInformation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_22calibration_parameters___get__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":175
 *     @property
 *     def calibration_parameters(self):
 *         return self.py_calib             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->py_calib));
  __pyx_r = ((PyObject *)__pyx_v_self->py_calib);
  goto __pyx_L0;

  /* "pyzed/core.pyx":174
 * 
 *     @property
 *     def calibration_parameters(self):             # <<<<<<<<<<<<<<
 *         return self.py_calib
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":178
 * 
 *     @property
 *     def calibration_parameters_raw(self):             # <<<<<<<<<<<<<<
 *         return self.py_calib_raw
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_26calibration_parameters_raw_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_26calibration_parameters_raw_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_19PyCameraInformation_26calibration_parameters_raw___get__(((struct __pyx_obj_5pyzed_4core_PyCameraInformation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_26calibration_parameters_raw___get__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":179
 *     @property
 *     def calibration_parameters_raw(self):
 *         return self.py_calib_raw             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->py_calib_raw));
  __pyx_r = ((PyObject *)__pyx_v_self->py_calib_raw);
  goto __pyx_L0;

  /* "pyzed/core.pyx":178
 * 
 *     @property
 *     def calibration_parameters_raw(self):             # <<<<<<<<<<<<<<
 *         return self.py_calib_raw
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":182
 * 
 *     @property
 *     def serial_number(self):             # <<<<<<<<<<<<<<
 *         return self.serial_number
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_13serial_number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_13serial_number_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_19PyCameraInformation_13serial_number___get__(((struct __pyx_obj_5pyzed_4core_PyCameraInformation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_13serial_number___get__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":183
 *     @property
 *     def serial_number(self):
 *         return self.serial_number             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->serial_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":182
 * 
 *     @property
 *     def serial_number(self):             # <<<<<<<<<<<<<<
 *         return self.serial_number
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraInformation.serial_number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":186
 * 
 *     @property
 *     def firmware_version(self):             # <<<<<<<<<<<<<<
 *         return self.firmware_version
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_16firmware_version_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_16firmware_version_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_19PyCameraInformation_16firmware_version___get__(((struct __pyx_obj_5pyzed_4core_PyCameraInformation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_16firmware_version___get__(struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":187
 *     @property
 *     def firmware_version(self):
 *         return self.firmware_version             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->firmware_version); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":186
 * 
 *     @property
 *     def firmware_version(self):             # <<<<<<<<<<<<<<
 *         return self.firmware_version
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraInformation.firmware_version.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_19PyCameraInformation_2__reduce_cython__[] = "PyCameraInformation.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_19PyCameraInformation_2__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyCameraInformation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraInformation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_19PyCameraInformation_4__setstate_cython__[] = "PyCameraInformation.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_19PyCameraInformation_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_19PyCameraInformation_4__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyCameraInformation *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_19PyCameraInformation_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyCameraInformation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyCameraInformation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":191
 * 
 * cdef class PyMat:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.mat = Mat()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_5PyMat_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_5PyMat_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat___cinit__(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_5PyMat___cinit__(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":192
 * cdef class PyMat:
 *     def __cinit__(self):
 *         self.mat = Mat()             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_type(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):
 */
  __pyx_v_self->mat = sl::Mat();

  /* "pyzed/core.pyx":191
 * 
 * cdef class PyMat:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.mat = Mat()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":194
 *         self.mat = Mat()
 * 
 *     def init_mat_type(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(width, height, mat_type.value, memory_type.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_3init_mat_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_2init_mat_type[] = "PyMat.init_mat_type(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_3init_mat_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_mat_type = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_mat_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_mat_type,&__pyx_n_s_memory_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = __pyx_k__11;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_type", 0, 3, 4, 1); __PYX_ERR(0, 194, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_type", 0, 3, 4, 2); __PYX_ERR(0, 194, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_mat_type") < 0)) __PYX_ERR(0, 194, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
    __pyx_v_mat_type = values[2];
    __pyx_v_memory_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_mat_type", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 194, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_2init_mat_type(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_width, __pyx_v_height, __pyx_v_mat_type, __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_2init_mat_type(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  enum sl::MAT_TYPE __pyx_t_7;
  enum sl::MEM __pyx_t_8;
  __Pyx_RefNannySetupContext("init_mat_type", 0);

  /* "pyzed/core.pyx":195
 * 
 *     def init_mat_type(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat = Mat(width, height, mat_type.value, memory_type.value)
 *         else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_mat_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_memory_type, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":196
 *     def init_mat_type(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(width, height, mat_type.value, memory_type.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_width); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_height); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = ((enum sl::MAT_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->mat = sl::Mat(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);

    /* "pyzed/core.pyx":195
 * 
 *     def init_mat_type(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat = Mat(width, height, mat_type.value, memory_type.value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":198
 *             self.mat = Mat(width, height, mat_type.value, memory_type.value)
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 198, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":194
 *         self.mat = Mat()
 * 
 *     def init_mat_type(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(width, height, mat_type.value, memory_type.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":200
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(width, height, mat_type.value, ptr.encode(), step, memory_type.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_5init_mat_cpu(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_4init_mat_cpu[] = "PyMat.init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_5init_mat_cpu(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_mat_type = 0;
  PyObject *__pyx_v_ptr = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_mat_cpu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_mat_type,&__pyx_n_s_ptr,&__pyx_n_s_step,&__pyx_n_s_memory_type,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = __pyx_k__13;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu", 0, 5, 6, 1); __PYX_ERR(0, 200, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu", 0, 5, 6, 2); __PYX_ERR(0, 200, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu", 0, 5, 6, 3); __PYX_ERR(0, 200, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu", 0, 5, 6, 4); __PYX_ERR(0, 200, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_mat_cpu") < 0)) __PYX_ERR(0, 200, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
    __pyx_v_mat_type = values[2];
    __pyx_v_ptr = values[3];
    __pyx_v_step = values[4];
    __pyx_v_memory_type = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_mat_cpu", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 200, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_cpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_4init_mat_cpu(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_width, __pyx_v_height, __pyx_v_mat_type, __pyx_v_ptr, __pyx_v_step, __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_4init_mat_cpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_ptr, PyObject *__pyx_v_step, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  enum sl::MAT_TYPE __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  unsigned char *__pyx_t_10;
  size_t __pyx_t_11;
  enum sl::MEM __pyx_t_12;
  __Pyx_RefNannySetupContext("init_mat_cpu", 0);

  /* "pyzed/core.pyx":201
 * 
 *     def init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat = Mat(width, height, mat_type.value, ptr.encode(), step, memory_type.value)
 *         else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_mat_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_memory_type, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":202
 *     def init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(width, height, mat_type.value, ptr.encode(), step, memory_type.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_width); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_height); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = ((enum sl::MAT_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ptr, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = __Pyx_PyObject_AsWritableUString(__pyx_t_2); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_v_step); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_12 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_8)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_self->mat = sl::Mat(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_10, __pyx_t_11, __pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyzed/core.pyx":201
 * 
 *     def init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat = Mat(width, height, mat_type.value, ptr.encode(), step, memory_type.value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":204
 *             self.mat = Mat(width, height, mat_type.value, ptr.encode(), step, memory_type.value)
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_cpu_gpu(self, width, height, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 204, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":200
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(width, height, mat_type.value, ptr.encode(), step, memory_type.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_cpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":206
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_cpu_gpu(self, width, height, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE):
 *              self.mat = Mat(width, height, mat_type.value, ptr_cpu.encode(), step_cpu, ptr_gpu.encode(), step_gpu)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_7init_mat_cpu_gpu(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_6init_mat_cpu_gpu[] = "PyMat.init_mat_cpu_gpu(self, width, height, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_7init_mat_cpu_gpu(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_mat_type = 0;
  PyObject *__pyx_v_ptr_cpu = 0;
  PyObject *__pyx_v_step_cpu = 0;
  PyObject *__pyx_v_ptr_gpu = 0;
  PyObject *__pyx_v_step_gpu = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_mat_cpu_gpu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_mat_type,&__pyx_n_s_ptr_cpu,&__pyx_n_s_step_cpu,&__pyx_n_s_ptr_gpu,&__pyx_n_s_step_gpu,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu_gpu", 1, 7, 7, 1); __PYX_ERR(0, 206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu_gpu", 1, 7, 7, 2); __PYX_ERR(0, 206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ptr_cpu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu_gpu", 1, 7, 7, 3); __PYX_ERR(0, 206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step_cpu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu_gpu", 1, 7, 7, 4); __PYX_ERR(0, 206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ptr_gpu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu_gpu", 1, 7, 7, 5); __PYX_ERR(0, 206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step_gpu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_cpu_gpu", 1, 7, 7, 6); __PYX_ERR(0, 206, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_mat_cpu_gpu") < 0)) __PYX_ERR(0, 206, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
    __pyx_v_mat_type = values[2];
    __pyx_v_ptr_cpu = values[3];
    __pyx_v_step_cpu = values[4];
    __pyx_v_ptr_gpu = values[5];
    __pyx_v_step_gpu = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_mat_cpu_gpu", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 206, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_cpu_gpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_6init_mat_cpu_gpu(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_width, __pyx_v_height, __pyx_v_mat_type, __pyx_v_ptr_cpu, __pyx_v_step_cpu, __pyx_v_ptr_gpu, __pyx_v_step_gpu);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_6init_mat_cpu_gpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_ptr_cpu, PyObject *__pyx_v_step_cpu, PyObject *__pyx_v_ptr_gpu, PyObject *__pyx_v_step_gpu) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  enum sl::MAT_TYPE __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned char *__pyx_t_9;
  size_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  unsigned char *__pyx_t_12;
  size_t __pyx_t_13;
  __Pyx_RefNannySetupContext("init_mat_cpu_gpu", 0);

  /* "pyzed/core.pyx":207
 * 
 *     def init_mat_cpu_gpu(self, width, height, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 *         if isinstance(mat_type, PyMAT_TYPE):             # <<<<<<<<<<<<<<
 *              self.mat = Mat(width, height, mat_type.value, ptr_cpu.encode(), step_cpu, ptr_gpu.encode(), step_gpu)
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_mat_type, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzed/core.pyx":208
 *     def init_mat_cpu_gpu(self, width, height, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 *         if isinstance(mat_type, PyMAT_TYPE):
 *              self.mat = Mat(width, height, mat_type.value, ptr_cpu.encode(), step_cpu, ptr_gpu.encode(), step_gpu)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")
 */
    __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_width); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_height); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat_type, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = ((enum sl::MAT_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ptr_cpu, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_AsWritableUString(__pyx_t_1); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_step_cpu); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ptr_gpu, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_11) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 208, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_12 = __Pyx_PyObject_AsWritableUString(__pyx_t_7); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_size_t(__pyx_v_step_gpu); if (unlikely((__pyx_t_13 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
    __pyx_v_self->mat = sl::Mat(__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_9, __pyx_t_10, __pyx_t_12, __pyx_t_13);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyzed/core.pyx":207
 * 
 *     def init_mat_cpu_gpu(self, width, height, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 *         if isinstance(mat_type, PyMAT_TYPE):             # <<<<<<<<<<<<<<
 *              self.mat = Mat(width, height, mat_type.value, ptr_cpu.encode(), step_cpu, ptr_gpu.encode(), step_gpu)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":210
 *              self.mat = Mat(width, height, mat_type.value, ptr_cpu.encode(), step_cpu, ptr_gpu.encode(), step_gpu)
 *         else:
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_resolution(self, PyResolution resolution, mat_type, memory_type):
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 210, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":206
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_cpu_gpu(self, width, height, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE):
 *              self.mat = Mat(width, height, mat_type.value, ptr_cpu.encode(), step_cpu, ptr_gpu.encode(), step_gpu)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_cpu_gpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":212
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")
 * 
 *     def init_mat_resolution(self, PyResolution resolution, mat_type, memory_type):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, memory_type.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_9init_mat_resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_8init_mat_resolution[] = "PyMat.init_mat_resolution(self, PyResolution resolution, mat_type, memory_type)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_9init_mat_resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution = 0;
  PyObject *__pyx_v_mat_type = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_mat_resolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resolution,&__pyx_n_s_mat_type,&__pyx_n_s_memory_type,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolution)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution", 1, 3, 3, 1); __PYX_ERR(0, 212, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution", 1, 3, 3, 2); __PYX_ERR(0, 212, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_mat_resolution") < 0)) __PYX_ERR(0, 212, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_resolution = ((struct __pyx_obj_5pyzed_4core_PyResolution *)values[0]);
    __pyx_v_mat_type = values[1];
    __pyx_v_memory_type = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_mat_resolution", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 212, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resolution), __pyx_ptype_5pyzed_4core_PyResolution, 1, "resolution", 0))) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_8init_mat_resolution(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_resolution, __pyx_v_mat_type, __pyx_v_memory_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_8init_mat_resolution(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  struct sl::Resolution __pyx_t_5;
  enum sl::MAT_TYPE __pyx_t_6;
  enum sl::MEM __pyx_t_7;
  __Pyx_RefNannySetupContext("init_mat_resolution", 0);

  /* "pyzed/core.pyx":213
 * 
 *     def init_mat_resolution(self, PyResolution resolution, mat_type, memory_type):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, memory_type.value)
 *         else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_mat_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_memory_type, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":214
 *     def init_mat_resolution(self, PyResolution resolution, mat_type, memory_type):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, memory_type.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 */
    __pyx_t_5.width = __pyx_v_resolution->width;
    __pyx_t_5.height = __pyx_v_resolution->height;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((enum sl::MAT_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->mat = sl::Mat(__pyx_t_5, __pyx_t_6, __pyx_t_7);

    /* "pyzed/core.pyx":213
 * 
 *     def init_mat_resolution(self, PyResolution resolution, mat_type, memory_type):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, memory_type.value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":216
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, memory_type.value)
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 216, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":212
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")
 * 
 *     def init_mat_resolution(self, PyResolution resolution, mat_type, memory_type):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, memory_type.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":218
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, ptr.encode(),
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_11init_mat_resolution_cpu(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_10init_mat_resolution_cpu[] = "PyMat.init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_11init_mat_resolution_cpu(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution = 0;
  PyObject *__pyx_v_mat_type = 0;
  PyObject *__pyx_v_ptr = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_mat_resolution_cpu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resolution,&__pyx_n_s_mat_type,&__pyx_n_s_ptr,&__pyx_n_s_step,&__pyx_n_s_memory_type,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = __pyx_k__17;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolution)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu", 0, 4, 5, 1); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu", 0, 4, 5, 2); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu", 0, 4, 5, 3); __PYX_ERR(0, 218, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_mat_resolution_cpu") < 0)) __PYX_ERR(0, 218, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_resolution = ((struct __pyx_obj_5pyzed_4core_PyResolution *)values[0]);
    __pyx_v_mat_type = values[1];
    __pyx_v_ptr = values[2];
    __pyx_v_step = values[3];
    __pyx_v_memory_type = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 218, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_resolution_cpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resolution), __pyx_ptype_5pyzed_4core_PyResolution, 1, "resolution", 0))) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_10init_mat_resolution_cpu(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_resolution, __pyx_v_mat_type, __pyx_v_ptr, __pyx_v_step, __pyx_v_memory_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_10init_mat_resolution_cpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_ptr, PyObject *__pyx_v_step, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  struct sl::Resolution __pyx_t_5;
  enum sl::MAT_TYPE __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned char *__pyx_t_9;
  size_t __pyx_t_10;
  enum sl::MEM __pyx_t_11;
  __Pyx_RefNannySetupContext("init_mat_resolution_cpu", 0);

  /* "pyzed/core.pyx":219
 * 
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, ptr.encode(),
 *                             step, memory_type.value)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_mat_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_memory_type, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":220
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, ptr.encode(),             # <<<<<<<<<<<<<<
 *                             step, memory_type.value)
 *         else:
 */
    __pyx_t_5.width = __pyx_v_resolution->width;
    __pyx_t_5.height = __pyx_v_resolution->height;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((enum sl::MAT_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ptr, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_AsWritableUString(__pyx_t_2); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L1_error)

    /* "pyzed/core.pyx":221
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, ptr.encode(),
 *                             step, memory_type.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 */
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_step); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_7)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyzed/core.pyx":220
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, ptr.encode(),             # <<<<<<<<<<<<<<
 *                             step, memory_type.value)
 *         else:
 */
    __pyx_v_self->mat = sl::Mat(__pyx_t_5, __pyx_t_6, __pyx_t_9, __pyx_t_10, __pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyzed/core.pyx":219
 * 
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, ptr.encode(),
 *                             step, memory_type.value)
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":223
 *                             step, memory_type.value)
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 223, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":218
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, ptr.encode(),
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_resolution_cpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":225
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE):
 *              self.mat = matResolution(Resolution(resolution.width, resolution.height), mat_type.value, ptr_cpu.encode(),
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_13init_mat_resolution_cpu_gpu(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_12init_mat_resolution_cpu_gpu[] = "PyMat.init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_13init_mat_resolution_cpu_gpu(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution = 0;
  PyObject *__pyx_v_mat_type = 0;
  PyObject *__pyx_v_ptr_cpu = 0;
  PyObject *__pyx_v_step_cpu = 0;
  PyObject *__pyx_v_ptr_gpu = 0;
  PyObject *__pyx_v_step_gpu = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_mat_resolution_cpu_gpu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resolution,&__pyx_n_s_mat_type,&__pyx_n_s_ptr_cpu,&__pyx_n_s_step_cpu,&__pyx_n_s_ptr_gpu,&__pyx_n_s_step_gpu,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolution)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu_gpu", 1, 6, 6, 1); __PYX_ERR(0, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ptr_cpu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu_gpu", 1, 6, 6, 2); __PYX_ERR(0, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step_cpu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu_gpu", 1, 6, 6, 3); __PYX_ERR(0, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ptr_gpu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu_gpu", 1, 6, 6, 4); __PYX_ERR(0, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step_gpu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu_gpu", 1, 6, 6, 5); __PYX_ERR(0, 225, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_mat_resolution_cpu_gpu") < 0)) __PYX_ERR(0, 225, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_resolution = ((struct __pyx_obj_5pyzed_4core_PyResolution *)values[0]);
    __pyx_v_mat_type = values[1];
    __pyx_v_ptr_cpu = values[2];
    __pyx_v_step_cpu = values[3];
    __pyx_v_ptr_gpu = values[4];
    __pyx_v_step_gpu = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_mat_resolution_cpu_gpu", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_resolution_cpu_gpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resolution), __pyx_ptype_5pyzed_4core_PyResolution, 1, "resolution", 0))) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_12init_mat_resolution_cpu_gpu(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_resolution, __pyx_v_mat_type, __pyx_v_ptr_cpu, __pyx_v_step_cpu, __pyx_v_ptr_gpu, __pyx_v_step_gpu);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_12init_mat_resolution_cpu_gpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_ptr_cpu, PyObject *__pyx_v_step_cpu, PyObject *__pyx_v_ptr_gpu, PyObject *__pyx_v_step_gpu) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  struct sl::Resolution __pyx_t_4;
  enum sl::MAT_TYPE __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_5pyzed_4core_uchar1 *__pyx_t_8;
  size_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __pyx_t_5pyzed_4core_uchar1 *__pyx_t_11;
  size_t __pyx_t_12;
  __Pyx_RefNannySetupContext("init_mat_resolution_cpu_gpu", 0);

  /* "pyzed/core.pyx":226
 * 
 *     def init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 *         if isinstance(mat_type, PyMAT_TYPE):             # <<<<<<<<<<<<<<
 *              self.mat = matResolution(Resolution(resolution.width, resolution.height), mat_type.value, ptr_cpu.encode(),
 *                              step_cpu, ptr_gpu.encode(), step_gpu)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_mat_type, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzed/core.pyx":227
 *     def init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 *         if isinstance(mat_type, PyMAT_TYPE):
 *              self.mat = matResolution(Resolution(resolution.width, resolution.height), mat_type.value, ptr_cpu.encode(),             # <<<<<<<<<<<<<<
 *                              step_cpu, ptr_gpu.encode(), step_gpu)
 *         else:
 */
    __pyx_t_4.width = __pyx_v_resolution->width;
    __pyx_t_4.height = __pyx_v_resolution->height;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat_type, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = ((enum sl::MAT_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ptr_cpu, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __Pyx_PyObject_AsWritableUString(__pyx_t_1); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)

    /* "pyzed/core.pyx":228
 *         if isinstance(mat_type, PyMAT_TYPE):
 *              self.mat = matResolution(Resolution(resolution.width, resolution.height), mat_type.value, ptr_cpu.encode(),
 *                              step_cpu, ptr_gpu.encode(), step_gpu)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")
 */
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_step_cpu); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ptr_gpu, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_10) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 228, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsWritableUString(__pyx_t_6); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_step_gpu); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)

    /* "pyzed/core.pyx":227
 *     def init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 *         if isinstance(mat_type, PyMAT_TYPE):
 *              self.mat = matResolution(Resolution(resolution.width, resolution.height), mat_type.value, ptr_cpu.encode(),             # <<<<<<<<<<<<<<
 *                              step_cpu, ptr_gpu.encode(), step_gpu)
 *         else:
 */
    __pyx_v_self->mat = sl::matResolution(__pyx_t_4, __pyx_t_5, __pyx_t_8, __pyx_t_9, __pyx_t_11, __pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pyzed/core.pyx":226
 * 
 *     def init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 *         if isinstance(mat_type, PyMAT_TYPE):             # <<<<<<<<<<<<<<
 *              self.mat = matResolution(Resolution(resolution.width, resolution.height), mat_type.value, ptr_cpu.encode(),
 *                              step_cpu, ptr_gpu.encode(), step_gpu)
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":230
 *                              step_cpu, ptr_gpu.encode(), step_gpu)
 *         else:
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat(self, PyMat matrix):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 230, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":225
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE):
 *              self.mat = matResolution(Resolution(resolution.width, resolution.height), mat_type.value, ptr_cpu.encode(),
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyzed.core.PyMat.init_mat_resolution_cpu_gpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":232
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")
 * 
 *     def init_mat(self, PyMat matrix):             # <<<<<<<<<<<<<<
 *         self.mat = Mat(matrix.mat)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_15init_mat(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_14init_mat[] = "PyMat.init_mat(self, PyMat matrix)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_15init_mat(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_mat (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_5pyzed_4core_PyMat, 1, "matrix", 0))) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_14init_mat(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_matrix));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_14init_mat(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_matrix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_mat", 0);

  /* "pyzed/core.pyx":233
 * 
 *     def init_mat(self, PyMat matrix):
 *         self.mat = Mat(matrix.mat)             # <<<<<<<<<<<<<<
 * 
 *     def alloc_size(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):
 */
  __pyx_v_self->mat = sl::Mat(__pyx_v_matrix->mat);

  /* "pyzed/core.pyx":232
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")
 * 
 *     def init_mat(self, PyMat matrix):             # <<<<<<<<<<<<<<
 *         self.mat = Mat(matrix.mat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":235
 *         self.mat = Mat(matrix.mat)
 * 
 *     def alloc_size(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat.alloc(<size_t> width, <size_t> height, mat_type.value, memory_type.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_17alloc_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_16alloc_size[] = "PyMat.alloc_size(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_17alloc_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_mat_type = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alloc_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_mat_type,&__pyx_n_s_memory_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = __pyx_k__20;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_size", 0, 3, 4, 1); __PYX_ERR(0, 235, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_size", 0, 3, 4, 2); __PYX_ERR(0, 235, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "alloc_size") < 0)) __PYX_ERR(0, 235, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
    __pyx_v_mat_type = values[2];
    __pyx_v_memory_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alloc_size", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 235, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.alloc_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_16alloc_size(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_width, __pyx_v_height, __pyx_v_mat_type, __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_16alloc_size(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  enum sl::MAT_TYPE __pyx_t_7;
  enum sl::MEM __pyx_t_8;
  __Pyx_RefNannySetupContext("alloc_size", 0);

  /* "pyzed/core.pyx":236
 * 
 *     def alloc_size(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat.alloc(<size_t> width, <size_t> height, mat_type.value, memory_type.value)
 *         else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_mat_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_memory_type, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":237
 *     def alloc_size(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat.alloc(<size_t> width, <size_t> height, mat_type.value, memory_type.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_width); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_height); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = ((enum sl::MAT_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->mat.alloc(((size_t)__pyx_t_5), ((size_t)__pyx_t_6), __pyx_t_7, __pyx_t_8);

    /* "pyzed/core.pyx":236
 * 
 *     def alloc_size(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat.alloc(<size_t> width, <size_t> height, mat_type.value, memory_type.value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":239
 *             self.mat.alloc(<size_t> width, <size_t> height, mat_type.value, memory_type.value)
 *         else:
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")             # <<<<<<<<<<<<<<
 * 
 *     def alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 239, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":235
 *         self.mat = Mat(matrix.mat)
 * 
 *     def alloc_size(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat.alloc(<size_t> width, <size_t> height, mat_type.value, memory_type.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyMat.alloc_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":241
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")
 * 
 *     def alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat.alloc(resolution.width, resolution.height, mat_type.value, memory_type.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_19alloc_resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_18alloc_resolution[] = "PyMat.alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_19alloc_resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution = 0;
  PyObject *__pyx_v_mat_type = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alloc_resolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resolution,&__pyx_n_s_mat_type,&__pyx_n_s_memory_type,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__22;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolution)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_resolution", 0, 2, 3, 1); __PYX_ERR(0, 241, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "alloc_resolution") < 0)) __PYX_ERR(0, 241, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_resolution = ((struct __pyx_obj_5pyzed_4core_PyResolution *)values[0]);
    __pyx_v_mat_type = values[1];
    __pyx_v_memory_type = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alloc_resolution", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 241, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.alloc_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resolution), __pyx_ptype_5pyzed_4core_PyResolution, 1, "resolution", 0))) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_18alloc_resolution(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_resolution, __pyx_v_mat_type, __pyx_v_memory_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_18alloc_resolution(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyResolution *__pyx_v_resolution, PyObject *__pyx_v_mat_type, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  enum sl::MAT_TYPE __pyx_t_5;
  enum sl::MEM __pyx_t_6;
  __Pyx_RefNannySetupContext("alloc_resolution", 0);

  /* "pyzed/core.pyx":242
 * 
 *     def alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat.alloc(resolution.width, resolution.height, mat_type.value, memory_type.value)
 *         else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_mat_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_memory_type, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":243
 *     def alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat.alloc(resolution.width, resolution.height, mat_type.value, memory_type.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((enum sl::MAT_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->mat.alloc(__pyx_v_resolution->width, __pyx_v_resolution->height, __pyx_t_5, __pyx_t_6);

    /* "pyzed/core.pyx":242
 * 
 *     def alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU):
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat.alloc(resolution.width, resolution.height, mat_type.value, memory_type.value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":245
 *             self.mat.alloc(resolution.width, resolution.height, mat_type.value, memory_type.value)
 *         else:
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")             # <<<<<<<<<<<<<<
 * 
 *     def free(self, memory_type=None):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 245, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":241
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")
 * 
 *     def alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat.alloc(resolution.width, resolution.height, mat_type.value, memory_type.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyMat.alloc_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":247
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")
 * 
 *     def free(self, memory_type=None):             # <<<<<<<<<<<<<<
 *         if isinstance(memory_type, PyMEM):
 *             self.mat.free(memory_type.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_21free(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_20free[] = "PyMat.free(self, memory_type=None)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_21free(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memory_type,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "free") < 0)) __PYX_ERR(0, 247, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memory_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("free", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_20free(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_20free(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  enum sl::MEM __pyx_t_4;
  __Pyx_RefNannySetupContext("free", 0);

  /* "pyzed/core.pyx":248
 * 
 *     def free(self, memory_type=None):
 *         if isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat.free(memory_type.value)
 *         elif memory_type is None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_memory_type, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzed/core.pyx":249
 *     def free(self, memory_type=None):
 *         if isinstance(memory_type, PyMEM):
 *             self.mat.free(memory_type.value)             # <<<<<<<<<<<<<<
 *         elif memory_type is None:
 *             self.mat.free(MEM_CPU or MEM_GPU)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->mat.free(__pyx_t_4);

    /* "pyzed/core.pyx":248
 * 
 *     def free(self, memory_type=None):
 *         if isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             self.mat.free(memory_type.value)
 *         elif memory_type is None:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":250
 *         if isinstance(memory_type, PyMEM):
 *             self.mat.free(memory_type.value)
 *         elif memory_type is None:             # <<<<<<<<<<<<<<
 *             self.mat.free(MEM_CPU or MEM_GPU)
 *         else:
 */
  __pyx_t_3 = (__pyx_v_memory_type == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "pyzed/core.pyx":251
 *             self.mat.free(memory_type.value)
 *         elif memory_type is None:
 *             self.mat.free(MEM_CPU or MEM_GPU)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")
 */
    if (!sl::MEM_CPU) {
    } else {
      __pyx_t_4 = sl::MEM_CPU;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = sl::MEM_GPU;
    __pyx_L4_bool_binop_done:;
    __pyx_v_self->mat.free(__pyx_t_4);

    /* "pyzed/core.pyx":250
 *         if isinstance(memory_type, PyMEM):
 *             self.mat.free(memory_type.value)
 *         elif memory_type is None:             # <<<<<<<<<<<<<<
 *             self.mat.free(MEM_CPU or MEM_GPU)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":253
 *             self.mat.free(MEM_CPU or MEM_GPU)
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def update_cpu_from_gpu(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 253, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":247
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")
 * 
 *     def free(self, memory_type=None):             # <<<<<<<<<<<<<<
 *         if isinstance(memory_type, PyMEM):
 *             self.mat.free(memory_type.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":255
 *             raise TypeError("Argument is not of PyMEM type.")
 * 
 *     def update_cpu_from_gpu(self):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.updateCPUfromGPU())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_23update_cpu_from_gpu(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_22update_cpu_from_gpu[] = "PyMat.update_cpu_from_gpu(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_23update_cpu_from_gpu(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_cpu_from_gpu (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_22update_cpu_from_gpu(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_22update_cpu_from_gpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("update_cpu_from_gpu", 0);

  /* "pyzed/core.pyx":256
 * 
 *     def update_cpu_from_gpu(self):
 *         return types.PyERROR_CODE(self.mat.updateCPUfromGPU())             # <<<<<<<<<<<<<<
 * 
 *     def update_gpu_from_cpu(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->mat.updateCPUfromGPU()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":255
 *             raise TypeError("Argument is not of PyMEM type.")
 * 
 *     def update_cpu_from_gpu(self):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.updateCPUfromGPU())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.update_cpu_from_gpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":258
 *         return types.PyERROR_CODE(self.mat.updateCPUfromGPU())
 * 
 *     def update_gpu_from_cpu(self):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.updateGPUfromCPU())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_25update_gpu_from_cpu(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_24update_gpu_from_cpu[] = "PyMat.update_gpu_from_cpu(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_25update_gpu_from_cpu(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_gpu_from_cpu (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_24update_gpu_from_cpu(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_24update_gpu_from_cpu(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("update_gpu_from_cpu", 0);

  /* "pyzed/core.pyx":259
 * 
 *     def update_gpu_from_cpu(self):
 *         return types.PyERROR_CODE(self.mat.updateGPUfromCPU())             # <<<<<<<<<<<<<<
 * 
 *     def copy_to(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->mat.updateGPUfromCPU()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":258
 *         return types.PyERROR_CODE(self.mat.updateCPUfromGPU())
 * 
 *     def update_gpu_from_cpu(self):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.updateGPUfromCPU())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.update_gpu_from_cpu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":261
 *         return types.PyERROR_CODE(self.mat.updateGPUfromCPU())
 * 
 *     def copy_to(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):             # <<<<<<<<<<<<<<
 *         dst = PyMat()
 *         print(types.PyERROR_CODE(self.mat.copyTo(dst.mat, cpy_type.value)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_27copy_to(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_26copy_to[] = "PyMat.copy_to(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_27copy_to(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cpy_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_to (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cpy_type,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__25;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cpy_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_to") < 0)) __PYX_ERR(0, 261, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cpy_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_to", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 261, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.copy_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_26copy_to(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_cpy_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_26copy_to(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_cpy_type) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_dst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  enum sl::COPY_TYPE __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("copy_to", 0);

  /* "pyzed/core.pyx":262
 * 
 *     def copy_to(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):
 *         dst = PyMat()             # <<<<<<<<<<<<<<
 *         print(types.PyERROR_CODE(self.mat.copyTo(dst.mat, cpy_type.value)))
 *         return dst
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyMat), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dst = ((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":263
 *     def copy_to(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):
 *         dst = PyMat()
 *         print(types.PyERROR_CODE(self.mat.copyTo(dst.mat, cpy_type.value)))             # <<<<<<<<<<<<<<
 *         return dst
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_cpy_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = ((enum sl::COPY_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_COPY_TYPE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->mat.copyTo(__pyx_v_dst->mat, __pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":264
 *         dst = PyMat()
 *         print(types.PyERROR_CODE(self.mat.copyTo(dst.mat, cpy_type.value)))
 *         return dst             # <<<<<<<<<<<<<<
 * 
 *     def set_from(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dst));
  __pyx_r = ((PyObject *)__pyx_v_dst);
  goto __pyx_L0;

  /* "pyzed/core.pyx":261
 *         return types.PyERROR_CODE(self.mat.updateGPUfromCPU())
 * 
 *     def copy_to(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):             # <<<<<<<<<<<<<<
 *         dst = PyMat()
 *         print(types.PyERROR_CODE(self.mat.copyTo(dst.mat, cpy_type.value)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzed.core.PyMat.copy_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":266
 *         return dst
 * 
 *     def set_from(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):             # <<<<<<<<<<<<<<
 *         dst = PyMat()
 *         print(self.mat.setFrom(dst.mat, cpy_type.value))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_29set_from(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_28set_from[] = "PyMat.set_from(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_29set_from(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cpy_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_from (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cpy_type,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__26;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cpy_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_from") < 0)) __PYX_ERR(0, 266, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cpy_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_from", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 266, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.set_from", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_28set_from(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_cpy_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_28set_from(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_cpy_type) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_dst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum sl::COPY_TYPE __pyx_t_2;
  __Pyx_RefNannySetupContext("set_from", 0);

  /* "pyzed/core.pyx":267
 * 
 *     def set_from(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):
 *         dst = PyMat()             # <<<<<<<<<<<<<<
 *         print(self.mat.setFrom(dst.mat, cpy_type.value))
 *         return dst
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyMat), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dst = ((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":268
 *     def set_from(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):
 *         dst = PyMat()
 *         print(self.mat.setFrom(dst.mat, cpy_type.value))             # <<<<<<<<<<<<<<
 *         return dst
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cpy_type, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum sl::COPY_TYPE)__Pyx_PyInt_As_enum__sl_3a__3a_COPY_TYPE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->mat.setFrom(__pyx_v_dst->mat, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":269
 *         dst = PyMat()
 *         print(self.mat.setFrom(dst.mat, cpy_type.value))
 *         return dst             # <<<<<<<<<<<<<<
 * 
 *     def read(self, str filepath):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dst));
  __pyx_r = ((PyObject *)__pyx_v_dst);
  goto __pyx_L0;

  /* "pyzed/core.pyx":266
 *         return dst
 * 
 *     def set_from(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):             # <<<<<<<<<<<<<<
 *         dst = PyMat()
 *         print(self.mat.setFrom(dst.mat, cpy_type.value))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.set_from", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":271
 *         return dst
 * 
 *     def read(self, str filepath):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.read(filepath.encode()))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_31read(PyObject *__pyx_v_self, PyObject *__pyx_v_filepath); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_30read[] = "PyMat.read(self, str filepath)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_31read(PyObject *__pyx_v_self, PyObject *__pyx_v_filepath) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filepath), (&PyString_Type), 1, "filepath", 1))) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_30read(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), ((PyObject*)__pyx_v_filepath));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_30read(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_filepath) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("read", 0);

  /* "pyzed/core.pyx":272
 * 
 *     def read(self, str filepath):
 *         return types.PyERROR_CODE(self.mat.read(filepath.encode()))             # <<<<<<<<<<<<<<
 * 
 *     def write(self, str filepath):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_filepath, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->mat.read(__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":271
 *         return dst
 * 
 *     def read(self, str filepath):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.read(filepath.encode()))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":274
 *         return types.PyERROR_CODE(self.mat.read(filepath.encode()))
 * 
 *     def write(self, str filepath):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.write(filepath.encode()))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_33write(PyObject *__pyx_v_self, PyObject *__pyx_v_filepath); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_32write[] = "PyMat.write(self, str filepath)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_33write(PyObject *__pyx_v_self, PyObject *__pyx_v_filepath) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filepath), (&PyString_Type), 1, "filepath", 1))) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_32write(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), ((PyObject*)__pyx_v_filepath));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_32write(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_filepath) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  __Pyx_RefNannySetupContext("write", 0);

  /* "pyzed/core.pyx":275
 * 
 *     def write(self, str filepath):
 *         return types.PyERROR_CODE(self.mat.write(filepath.encode()))             # <<<<<<<<<<<<<<
 * 
 *     def set_to(self, value, memory_type=PyMEM.PyMEM_CPU):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_filepath, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->mat.write(__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":274
 *         return types.PyERROR_CODE(self.mat.read(filepath.encode()))
 * 
 *     def write(self, str filepath):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.write(filepath.encode()))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":277
 *         return types.PyERROR_CODE(self.mat.write(filepath.encode()))
 * 
 *     def set_to(self, value, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_35set_to(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_34set_to[] = "PyMat.set_to(self, value, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_35set_to(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_to (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_memory_type,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k__27;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_to") < 0)) __PYX_ERR(0, 277, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_memory_type = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_to", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.set_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_34set_to(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_value, __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_34set_to(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __pyx_t_5pyzed_4core_uchar1 __pyx_t_5;
  enum sl::MEM __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __pyx_t_5pyzed_4core_uchar1 __pyx_t_9;
  __pyx_t_5pyzed_4core_uchar1 __pyx_t_10;
  __pyx_t_5pyzed_4core_uchar1 __pyx_t_11;
  __pyx_t_5pyzed_4core_float1 __pyx_t_12;
  __pyx_t_5pyzed_4core_float1 __pyx_t_13;
  __pyx_t_5pyzed_4core_float1 __pyx_t_14;
  __pyx_t_5pyzed_4core_float1 __pyx_t_15;
  __Pyx_RefNannySetupContext("set_to", 0);

  /* "pyzed/core.pyx":278
 * 
 *     def set_to(self, value, memory_type=PyMEM.PyMEM_CPU):
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_8U_C1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":279
 *     def set_to(self, value, memory_type=PyMEM.PyMEM_CPU):
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             return types.PyERROR_CODE(setToUchar2(self.mat, types.Vector2[uchar1](value[0], value[1]),
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_char(__pyx_v_value); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setToUchar1(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 279, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":278
 * 
 *     def set_to(self, value, memory_type=PyMEM.PyMEM_CPU):
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 */
  }

  /* "pyzed/core.pyx":280
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToUchar2(self.mat, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMAT_TYPE_8U_C2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":281
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             return types.PyERROR_CODE(setToUchar2(self.mat, types.Vector2[uchar1](value[0], value[1]),             # <<<<<<<<<<<<<<
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_char(__pyx_t_8); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_char(__pyx_t_8); if (unlikely((__pyx_t_9 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pyzed/core.pyx":282
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             return types.PyERROR_CODE(setToUchar2(self.mat, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_8)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pyzed/core.pyx":281
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             return types.PyERROR_CODE(setToUchar2(self.mat, types.Vector2[uchar1](value[0], value[1]),             # <<<<<<<<<<<<<<
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 */
    __pyx_t_8 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setToUchar2(__pyx_v_self->mat, sl::Vector2<__pyx_t_5pyzed_4core_uchar1> (__pyx_t_5, __pyx_t_9), __pyx_t_6)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 281, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":280
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToUchar2(self.mat, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))
 */
  }

  /* "pyzed/core.pyx":283
 *             return types.PyERROR_CODE(setToUchar2(self.mat, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_8U_C3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":284
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_char(__pyx_t_7); if (unlikely((__pyx_t_9 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_char(__pyx_t_7); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyzed/core.pyx":285
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyInt_As_unsigned_char(__pyx_t_7); if (unlikely((__pyx_t_10 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyzed/core.pyx":284
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "pyzed/core.pyx":285
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],
 */
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_7)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyzed/core.pyx":284
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 */
    __pyx_t_7 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setToUchar3(__pyx_v_self->mat, sl::Vector3<__pyx_t_5pyzed_4core_uchar1> (__pyx_t_9, __pyx_t_5, __pyx_t_10), __pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":283
 *             return types.PyERROR_CODE(setToUchar2(self.mat, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 */
  }

  /* "pyzed/core.pyx":286
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMAT_TYPE_8U_C4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":287
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_unsigned_char(__pyx_t_3); if (unlikely((__pyx_t_10 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_char(__pyx_t_3); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_char(__pyx_t_3); if (unlikely((__pyx_t_9 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":288
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyInt_As_unsigned_char(__pyx_t_3); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":287
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pyzed/core.pyx":288
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))
 */
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":287
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 */
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setToUchar4(__pyx_v_self->mat, sl::Vector4<__pyx_t_5pyzed_4core_uchar1> (__pyx_t_10, __pyx_t_5, __pyx_t_9, __pyx_t_11), __pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":286
 *             return types.PyERROR_CODE(setToUchar3(self.mat, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 */
  }

  /* "pyzed/core.pyx":289
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_32F_C1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":290
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             return types.PyERROR_CODE(setToFloat2(self.mat, types.Vector2[float1](value[0], value[1]),
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_8)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setToFloat1(__pyx_v_self->mat, __pyx_t_12, __pyx_t_6)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":289
 *             return types.PyERROR_CODE(setToUchar4(self.mat, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 */
  }

  /* "pyzed/core.pyx":291
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToFloat2(self.mat, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMAT_TYPE_32F_C2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":292
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             return types.PyERROR_CODE(setToFloat2(self.mat, types.Vector2[float1](value[0], value[1]),             # <<<<<<<<<<<<<<
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyzed/core.pyx":293
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             return types.PyERROR_CODE(setToFloat2(self.mat, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_7)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyzed/core.pyx":292
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             return types.PyERROR_CODE(setToFloat2(self.mat, types.Vector2[float1](value[0], value[1]),             # <<<<<<<<<<<<<<
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 */
    __pyx_t_7 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setToFloat2(__pyx_v_self->mat, sl::Vector2<__pyx_t_5pyzed_4core_float1> (__pyx_t_12, __pyx_t_13), __pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":291
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setToFloat1(self.mat, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToFloat2(self.mat, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))
 */
  }

  /* "pyzed/core.pyx":294
 *             return types.PyERROR_CODE(setToFloat2(self.mat, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_32F_C3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":295
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":296
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":295
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pyzed/core.pyx":296
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],
 */
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":295
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 */
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setToFloat3(__pyx_v_self->mat, sl::Vector3<__pyx_t_5pyzed_4core_float1> (__pyx_t_13, __pyx_t_12, __pyx_t_14), __pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":294
 *             return types.PyERROR_CODE(setToFloat2(self.mat, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 */
  }

  /* "pyzed/core.pyx":297
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMAT_TYPE_32F_C4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":298
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pyzed/core.pyx":299
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU):
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_value, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_15 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_15 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pyzed/core.pyx":298
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "pyzed/core.pyx":299
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU):
 */
    __pyx_t_6 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_8)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pyzed/core.pyx":298
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setToFloat4(__pyx_v_self->mat, sl::Vector4<__pyx_t_5pyzed_4core_float1> (__pyx_t_14, __pyx_t_12, __pyx_t_13, __pyx_t_15), __pyx_t_6)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 298, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":297
 *             return types.PyERROR_CODE(setToFloat3(self.mat, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setToFloat4(self.mat, types.Vector4[float1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 */
  }

  /* "pyzed/core.pyx":277
 *         return types.PyERROR_CODE(self.mat.write(filepath.encode()))
 * 
 *     def set_to(self, value, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyzed.core.PyMat.set_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":301
 *                                       value[3]), memory_type.value))
 * 
 *     def set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_37set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_36set_value[] = "PyMat.set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_37set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_value,&__pyx_n_s_memory_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = __pyx_k__28;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_value", 0, 3, 4, 1); __PYX_ERR(0, 301, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_value", 0, 3, 4, 2); __PYX_ERR(0, 301, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_value") < 0)) __PYX_ERR(0, 301, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_value = values[2];
    __pyx_v_memory_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_value", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 301, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_36set_value(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_value, __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_36set_value(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_value, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  __pyx_t_5pyzed_4core_uchar1 __pyx_t_7;
  enum sl::MEM __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __pyx_t_5pyzed_4core_uchar1 __pyx_t_11;
  __pyx_t_5pyzed_4core_uchar1 __pyx_t_12;
  __pyx_t_5pyzed_4core_uchar1 __pyx_t_13;
  __pyx_t_5pyzed_4core_float1 __pyx_t_14;
  __pyx_t_5pyzed_4core_float1 __pyx_t_15;
  __pyx_t_5pyzed_4core_float1 __pyx_t_16;
  __pyx_t_5pyzed_4core_float1 __pyx_t_17;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "pyzed/core.pyx":302
 * 
 *     def set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU):
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_8U_C1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":303
 *     def set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU):
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             return types.PyERROR_CODE(setValueUchar2(self.mat, x, y, types.Vector2[uchar1](value[0], value[1]),
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_char(__pyx_v_value); if (unlikely((__pyx_t_7 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setValueUchar1(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":302
 * 
 *     def set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU):
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 */
  }

  /* "pyzed/core.pyx":304
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueUchar2(self.mat, x, y, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_10) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMAT_TYPE_8U_C2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":305
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             return types.PyERROR_CODE(setValueUchar2(self.mat, x, y, types.Vector2[uchar1](value[0], value[1]),             # <<<<<<<<<<<<<<
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L1_error)
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_char(__pyx_t_10); if (unlikely((__pyx_t_7 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyInt_As_unsigned_char(__pyx_t_10); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyzed/core.pyx":306
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             return types.PyERROR_CODE(setValueUchar2(self.mat, x, y, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_10)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyzed/core.pyx":305
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             return types.PyERROR_CODE(setValueUchar2(self.mat, x, y, types.Vector2[uchar1](value[0], value[1]),             # <<<<<<<<<<<<<<
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 */
    __pyx_t_10 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setValueUchar2(__pyx_v_self->mat, __pyx_t_6, __pyx_t_5, sl::Vector2<__pyx_t_5pyzed_4core_uchar1> (__pyx_t_7, __pyx_t_11), __pyx_t_8)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_10};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_10};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":304
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueUchar2(self.mat, x, y, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))
 */
  }

  /* "pyzed/core.pyx":307
 *             return types.PyERROR_CODE(setValueUchar2(self.mat, x, y, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_9) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_8U_C3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":308
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyInt_As_unsigned_char(__pyx_t_9); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_char(__pyx_t_9); if (unlikely((__pyx_t_7 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pyzed/core.pyx":309
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],
 */
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = __Pyx_PyInt_As_unsigned_char(__pyx_t_9); if (unlikely((__pyx_t_12 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pyzed/core.pyx":308
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "pyzed/core.pyx":309
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],
 */
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_9)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pyzed/core.pyx":308
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 */
    __pyx_t_9 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setValueUchar3(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6, sl::Vector3<__pyx_t_5pyzed_4core_uchar1> (__pyx_t_11, __pyx_t_7, __pyx_t_12), __pyx_t_8)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":307
 *             return types.PyERROR_CODE(setValueUchar2(self.mat, x, y, types.Vector2[uchar1](value[0], value[1]),
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 */
  }

  /* "pyzed/core.pyx":310
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMAT_TYPE_8U_C4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":311
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = __Pyx_PyInt_As_unsigned_char(__pyx_t_3); if (unlikely((__pyx_t_12 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_char(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyInt_As_unsigned_char(__pyx_t_3); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":312
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_char(__pyx_t_3); if (unlikely((__pyx_t_13 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":311
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pyzed/core.pyx":312
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))
 */
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":311
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 */
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setValueUchar4(__pyx_v_self->mat, __pyx_t_6, __pyx_t_5, sl::Vector4<__pyx_t_5pyzed_4core_uchar1> (__pyx_t_12, __pyx_t_7, __pyx_t_11, __pyx_t_13), __pyx_t_8)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 311, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":310
 *             return types.PyERROR_CODE(setValueUchar3(self.mat, x, y, types.Vector3[uchar1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 */
  }

  /* "pyzed/core.pyx":313
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_10) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_32F_C1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":314
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             return types.PyERROR_CODE(setValueFloat2(self.mat, x, y, types.Vector2[float1](value[0], value[1]),
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_10)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setValueFloat1(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6, __pyx_t_14, __pyx_t_8)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_10};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_10};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":313
 *             return types.PyERROR_CODE(setValueUchar4(self.mat, x, y, types.Vector4[uchar1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 */
  }

  /* "pyzed/core.pyx":315
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueFloat2(self.mat, x, y, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_9) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMAT_TYPE_32F_C2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":316
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             return types.PyERROR_CODE(setValueFloat2(self.mat, x, y, types.Vector2[float1](value[0], value[1]),             # <<<<<<<<<<<<<<
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_9); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_15 = __pyx_PyFloat_AsFloat(__pyx_t_9); if (unlikely((__pyx_t_15 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pyzed/core.pyx":317
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             return types.PyERROR_CODE(setValueFloat2(self.mat, x, y, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_9)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pyzed/core.pyx":316
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             return types.PyERROR_CODE(setValueFloat2(self.mat, x, y, types.Vector2[float1](value[0], value[1]),             # <<<<<<<<<<<<<<
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 */
    __pyx_t_9 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setValueFloat2(__pyx_v_self->mat, __pyx_t_6, __pyx_t_5, sl::Vector2<__pyx_t_5pyzed_4core_float1> (__pyx_t_14, __pyx_t_15), __pyx_t_8)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":315
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             return types.PyERROR_CODE(setValueFloat1(self.mat, x, y, value, memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueFloat2(self.mat, x, y, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))
 */
  }

  /* "pyzed/core.pyx":318
 *             return types.PyERROR_CODE(setValueFloat2(self.mat, x, y, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_32F_C3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":319
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_15 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":320
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":319
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pyzed/core.pyx":320
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],
 */
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzed/core.pyx":319
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],             # <<<<<<<<<<<<<<
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 */
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setValueFloat3(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6, sl::Vector3<__pyx_t_5pyzed_4core_float1> (__pyx_t_15, __pyx_t_14, __pyx_t_16), __pyx_t_8)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":318
 *             return types.PyERROR_CODE(setValueFloat2(self.mat, x, y, types.Vector2[float1](value[0], value[1]),
 *                                       memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 */
  }

  /* "pyzed/core.pyx":321
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_10) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMAT_TYPE_32F_C4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":322
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_15 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_15 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyzed/core.pyx":323
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))             # <<<<<<<<<<<<<<
 * 
 *     def get_value(self, x, y, memory_type=PyMEM.PyMEM_CPU):
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_value, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_17 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_17 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyzed/core.pyx":322
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 * 
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "pyzed/core.pyx":323
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))             # <<<<<<<<<<<<<<
 * 
 *     def get_value(self, x, y, memory_type=PyMEM.PyMEM_CPU):
 */
    __pyx_t_8 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_10)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyzed/core.pyx":322
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],             # <<<<<<<<<<<<<<
 *                                       value[3]), memory_type.value))
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::setValueFloat4(__pyx_v_self->mat, __pyx_t_6, __pyx_t_5, sl::Vector4<__pyx_t_5pyzed_4core_float1> (__pyx_t_16, __pyx_t_14, __pyx_t_15, __pyx_t_17), __pyx_t_8)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_10};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_10};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":321
 *             return types.PyERROR_CODE(setValueFloat3(self.mat, x, y, types.Vector3[float1](value[0], value[1],
 *                                       value[2]), memory_type.value))
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(setValueFloat4(self.mat, x, y, types.Vector4[float1](value[0], value[1], value[2],
 *                                       value[3]), memory_type.value))
 */
  }

  /* "pyzed/core.pyx":301
 *                                       value[3]), memory_type.value))
 * 
 *     def set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyzed.core.PyMat.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":325
 *                                       value[3]), memory_type.value))
 * 
 *     def get_value(self, x, y, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         cdef uchar1 value1u
 *         cdef types.Vector2[uchar1]* value2u = new types.Vector2[uchar1]()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_39get_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_38get_value[] = "PyMat.get_value(self, x, y, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_39get_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_memory_type,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__29;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_value", 0, 2, 3, 1); __PYX_ERR(0, 325, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_value") < 0)) __PYX_ERR(0, 325, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_memory_type = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_value", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 325, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_38get_value(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_38get_value(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_memory_type) {
  __pyx_t_5pyzed_4core_uchar1 __pyx_v_value1u;
  sl::Vector2<__pyx_t_5pyzed_4core_uchar1>  *__pyx_v_value2u;
  sl::Vector3<__pyx_t_5pyzed_4core_uchar1>  *__pyx_v_value3u;
  sl::Vector4<__pyx_t_5pyzed_4core_uchar1>  *__pyx_v_value4u;
  __pyx_t_5pyzed_4core_float1 __pyx_v_value1f;
  sl::Vector2<__pyx_t_5pyzed_4core_float1>  *__pyx_v_value2f;
  sl::Vector3<__pyx_t_5pyzed_4core_float1>  *__pyx_v_value3f;
  sl::Vector4<__pyx_t_5pyzed_4core_float1>  *__pyx_v_value4f;
  sl::ERROR_CODE __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  enum sl::MEM __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("get_value", 0);

  /* "pyzed/core.pyx":327
 *     def get_value(self, x, y, memory_type=PyMEM.PyMEM_CPU):
 *         cdef uchar1 value1u
 *         cdef types.Vector2[uchar1]* value2u = new types.Vector2[uchar1]()             # <<<<<<<<<<<<<<
 *         cdef types.Vector3[uchar1]* value3u = new types.Vector3[uchar1]()
 *         cdef types.Vector4[uchar1]* value4u = new types.Vector4[uchar1]()
 */
  __pyx_v_value2u = new sl::Vector2<__pyx_t_5pyzed_4core_uchar1> ();

  /* "pyzed/core.pyx":328
 *         cdef uchar1 value1u
 *         cdef types.Vector2[uchar1]* value2u = new types.Vector2[uchar1]()
 *         cdef types.Vector3[uchar1]* value3u = new types.Vector3[uchar1]()             # <<<<<<<<<<<<<<
 *         cdef types.Vector4[uchar1]* value4u = new types.Vector4[uchar1]()
 * 
 */
  __pyx_v_value3u = new sl::Vector3<__pyx_t_5pyzed_4core_uchar1> ();

  /* "pyzed/core.pyx":329
 *         cdef types.Vector2[uchar1]* value2u = new types.Vector2[uchar1]()
 *         cdef types.Vector3[uchar1]* value3u = new types.Vector3[uchar1]()
 *         cdef types.Vector4[uchar1]* value4u = new types.Vector4[uchar1]()             # <<<<<<<<<<<<<<
 * 
 *         cdef float1 value1f
 */
  __pyx_v_value4u = new sl::Vector4<__pyx_t_5pyzed_4core_uchar1> ();

  /* "pyzed/core.pyx":332
 * 
 *         cdef float1 value1f
 *         cdef types.Vector2[float1]* value2f = new types.Vector2[float1]()             # <<<<<<<<<<<<<<
 *         cdef types.Vector3[float1]* value3f = new types.Vector3[float1]()
 *         cdef types.Vector4[float1]* value4f = new types.Vector4[float1]()
 */
  __pyx_v_value2f = new sl::Vector2<__pyx_t_5pyzed_4core_float1> ();

  /* "pyzed/core.pyx":333
 *         cdef float1 value1f
 *         cdef types.Vector2[float1]* value2f = new types.Vector2[float1]()
 *         cdef types.Vector3[float1]* value3f = new types.Vector3[float1]()             # <<<<<<<<<<<<<<
 *         cdef types.Vector4[float1]* value4f = new types.Vector4[float1]()
 * 
 */
  __pyx_v_value3f = new sl::Vector3<__pyx_t_5pyzed_4core_float1> ();

  /* "pyzed/core.pyx":334
 *         cdef types.Vector2[float1]* value2f = new types.Vector2[float1]()
 *         cdef types.Vector3[float1]* value3f = new types.Vector3[float1]()
 *         cdef types.Vector4[float1]* value4f = new types.Vector4[float1]()             # <<<<<<<<<<<<<<
 * 
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 */
  __pyx_v_value4f = new sl::Vector4<__pyx_t_5pyzed_4core_float1> ();

  /* "pyzed/core.pyx":336
 *         cdef types.Vector4[float1]* value4f = new types.Vector4[float1]()
 * 
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:             # <<<<<<<<<<<<<<
 *             status = getValueUchar1(self.mat, x, y, &value1u, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_8U_C1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":337
 * 
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             status = getValueUchar1(self.mat, x, y, &value1u, memory_type.value)             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_status = sl::getValueUchar1(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6, (&__pyx_v_value1u), __pyx_t_7);

    /* "pyzed/core.pyx":338
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             status = getValueUchar1(self.mat, x, y, &value1u, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             status = getValueUchar2(self.mat, x, y, value2u, memory_type.value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_status); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_y);
    __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":336
 *         cdef types.Vector4[float1]* value4f = new types.Vector4[float1]()
 * 
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:             # <<<<<<<<<<<<<<
 *             status = getValueUchar1(self.mat, x, y, &value1u, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 */
  }

  /* "pyzed/core.pyx":339
 *             status = getValueUchar1(self.mat, x, y, &value1u, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:             # <<<<<<<<<<<<<<
 *             status = getValueUchar2(self.mat, x, y, value2u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2u.ptr()[0], value2u.ptr()[1]])
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 339, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_8U_C2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_9, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":340
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             status = getValueUchar2(self.mat, x, y, value2u, memory_type.value)             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(status), np.array([value2u.ptr()[0], value2u.ptr()[1]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_status = sl::getValueUchar2(__pyx_v_self->mat, __pyx_t_6, __pyx_t_5, __pyx_v_value2u, __pyx_t_7);

    /* "pyzed/core.pyx":341
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:
 *             status = getValueUchar2(self.mat, x, y, value2u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2u.ptr()[0], value2u.ptr()[1]])             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             status = getValueUchar3(self.mat, x, y, value3u, memory_type.value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_status); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value2u->ptr()[0])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value2u->ptr()[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_10};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_10};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
    __pyx_t_3 = 0;
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":339
 *             status = getValueUchar1(self.mat, x, y, &value1u, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C2:             # <<<<<<<<<<<<<<
 *             status = getValueUchar2(self.mat, x, y, value2u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2u.ptr()[0], value2u.ptr()[1]])
 */
  }

  /* "pyzed/core.pyx":342
 *             status = getValueUchar2(self.mat, x, y, value2u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2u.ptr()[0], value2u.ptr()[1]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:             # <<<<<<<<<<<<<<
 *             status = getValueUchar3(self.mat, x, y, value3u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3u.ptr()[0], value3u.ptr()[1], value3u.ptr()[2]])
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_PyMAT_TYPE_8U_C3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":343
 *             return types.PyERROR_CODE(status), np.array([value2u.ptr()[0], value2u.ptr()[1]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             status = getValueUchar3(self.mat, x, y, value3u, memory_type.value)             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(status), np.array([value3u.ptr()[0], value3u.ptr()[1], value3u.ptr()[2]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_9)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_status = sl::getValueUchar3(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6, __pyx_v_value3u, __pyx_t_7);

    /* "pyzed/core.pyx":344
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:
 *             status = getValueUchar3(self.mat, x, y, value3u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3u.ptr()[0], value3u.ptr()[1], value3u.ptr()[2]])             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             status = getValueUchar4(self.mat, x, y, value4u, memory_type.value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_status); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 344, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_3};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_3};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value3u->ptr()[0])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value3u->ptr()[1])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value3u->ptr()[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_1);
    __pyx_t_10 = 0;
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_11};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_11};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_9 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":342
 *             status = getValueUchar2(self.mat, x, y, value2u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2u.ptr()[0], value2u.ptr()[1]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C3:             # <<<<<<<<<<<<<<
 *             status = getValueUchar3(self.mat, x, y, value3u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3u.ptr()[0], value3u.ptr()[1], value3u.ptr()[2]])
 */
  }

  /* "pyzed/core.pyx":345
 *             status = getValueUchar3(self.mat, x, y, value3u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3u.ptr()[0], value3u.ptr()[1], value3u.ptr()[2]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:             # <<<<<<<<<<<<<<
 *             status = getValueUchar4(self.mat, x, y, value4u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4u.ptr()[0], value4u.ptr()[1], value4u.ptr()[2],
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_9) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_8U_C4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":346
 *             return types.PyERROR_CODE(status), np.array([value3u.ptr()[0], value3u.ptr()[1], value3u.ptr()[2]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             status = getValueUchar4(self.mat, x, y, value4u, memory_type.value)             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(status), np.array([value4u.ptr()[0], value4u.ptr()[1], value4u.ptr()[2],
 *                                                          value4u.ptr()[3]])
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_status = sl::getValueUchar4(__pyx_v_self->mat, __pyx_t_6, __pyx_t_5, __pyx_v_value4u, __pyx_t_7);

    /* "pyzed/core.pyx":347
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             status = getValueUchar4(self.mat, x, y, value4u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4u.ptr()[0], value4u.ptr()[1], value4u.ptr()[2],             # <<<<<<<<<<<<<<
 *                                                          value4u.ptr()[3]])
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_status); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value4u->ptr()[0])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_8 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value4u->ptr()[1])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value4u->ptr()[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "pyzed/core.pyx":348
 *             status = getValueUchar4(self.mat, x, y, value4u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4u.ptr()[0], value4u.ptr()[1], value4u.ptr()[2],
 *                                                          value4u.ptr()[3]])             # <<<<<<<<<<<<<<
 * 
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 */
    __pyx_t_10 = __Pyx_PyInt_From_unsigned_char((__pyx_v_value4u->ptr()[3])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "pyzed/core.pyx":347
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:
 *             status = getValueUchar4(self.mat, x, y, value4u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4u.ptr()[0], value4u.ptr()[1], value4u.ptr()[2],             # <<<<<<<<<<<<<<
 *                                                          value4u.ptr()[3]])
 * 
 */
    __pyx_t_12 = PyList_New(4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_12, 3, __pyx_t_10);
    __pyx_t_11 = 0;
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_12};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_12};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":345
 *             status = getValueUchar3(self.mat, x, y, value3u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3u.ptr()[0], value3u.ptr()[1], value3u.ptr()[2]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C4:             # <<<<<<<<<<<<<<
 *             status = getValueUchar4(self.mat, x, y, value4u, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4u.ptr()[0], value4u.ptr()[1], value4u.ptr()[2],
 */
  }

  /* "pyzed/core.pyx":350
 *                                                          value4u.ptr()[3]])
 * 
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:             # <<<<<<<<<<<<<<
 *             status = getValueFloat1(self.mat, x, y, &value1f, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 350, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_32F_C1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_9, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":351
 * 
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             status = getValueFloat1(self.mat, x, y, &value1f, memory_type.value)             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_status = sl::getValueFloat1(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6, (&__pyx_v_value1f), __pyx_t_7);

    /* "pyzed/core.pyx":352
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:
 *             status = getValueFloat1(self.mat, x, y, &value1f, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             status = getValueFloat2(self.mat, x, y, value2f, memory_type.value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_status); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 352, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_y);
    __pyx_t_2 = PyObject_GetItem(__pyx_t_9, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_12;
    __pyx_t_12 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":350
 *                                                          value4u.ptr()[3]])
 * 
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C1:             # <<<<<<<<<<<<<<
 *             status = getValueFloat1(self.mat, x, y, &value1f, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 */
  }

  /* "pyzed/core.pyx":353
 *             status = getValueFloat1(self.mat, x, y, &value1f, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:             # <<<<<<<<<<<<<<
 *             status = getValueFloat2(self.mat, x, y, value2f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2f.ptr()[0], value2f.ptr()[1]])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_12 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 353, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMAT_TYPE_32F_C2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_12, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":354
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             status = getValueFloat2(self.mat, x, y, value2f, memory_type.value)             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(status), np.array([value2f.ptr()[0], value2f.ptr()[1]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_status = sl::getValueFloat2(__pyx_v_self->mat, __pyx_t_6, __pyx_t_5, __pyx_v_value2f, __pyx_t_7);

    /* "pyzed/core.pyx":355
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:
 *             status = getValueFloat2(self.mat, x, y, value2f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2f.ptr()[0], value2f.ptr()[1]])             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             status = getValueFloat3(self.mat, x, y, value3f, memory_type.value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_status); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_value2f->ptr()[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_value2f->ptr()[1])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
    __pyx_t_1 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 355, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_12);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_10};
        __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_10};
        __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_12);
    __pyx_t_2 = 0;
    __pyx_t_12 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":353
 *             status = getValueFloat1(self.mat, x, y, &value1f, memory_type.value)
 *             return types.PyERROR_CODE(status), self.get_data()[x, y]
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C2:             # <<<<<<<<<<<<<<
 *             status = getValueFloat2(self.mat, x, y, value2f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2f.ptr()[0], value2f.ptr()[1]])
 */
  }

  /* "pyzed/core.pyx":356
 *             status = getValueFloat2(self.mat, x, y, value2f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2f.ptr()[0], value2f.ptr()[1]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:             # <<<<<<<<<<<<<<
 *             status = getValueFloat3(self.mat, x, y, value3f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3f.ptr()[0], value3f.ptr()[1], value3f.ptr()[2]])
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_PyMAT_TYPE_32F_C3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":357
 *             return types.PyERROR_CODE(status), np.array([value2f.ptr()[0], value2f.ptr()[1]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             status = getValueFloat3(self.mat, x, y, value3f, memory_type.value)             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(status), np.array([value3f.ptr()[0], value3f.ptr()[1], value3f.ptr()[2]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_12)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_status = sl::getValueFloat3(__pyx_v_self->mat, __pyx_t_5, __pyx_t_6, __pyx_v_value3f, __pyx_t_7);

    /* "pyzed/core.pyx":358
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:
 *             status = getValueFloat3(self.mat, x, y, value3f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3f.ptr()[0], value3f.ptr()[1], value3f.ptr()[2]])             # <<<<<<<<<<<<<<
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             status = getValueFloat4(self.mat, x, y, value4f, memory_type.value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_status); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_12);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_10, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyFloat_FromDouble((__pyx_v_value3f->ptr()[0])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_value3f->ptr()[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_value3f->ptr()[2])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_9);
    __pyx_t_10 = 0;
    __pyx_t_1 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_12 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":356
 *             status = getValueFloat2(self.mat, x, y, value2f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value2f.ptr()[0], value2f.ptr()[1]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C3:             # <<<<<<<<<<<<<<
 *             status = getValueFloat3(self.mat, x, y, value3f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3f.ptr()[0], value3f.ptr()[1], value3f.ptr()[2]])
 */
  }

  /* "pyzed/core.pyx":359
 *             status = getValueFloat3(self.mat, x, y, value3f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3f.ptr()[0], value3f.ptr()[1], value3f.ptr()[2]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:             # <<<<<<<<<<<<<<
 *             status = getValueFloat4(self.mat, x, y, value4f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4f.ptr()[0], value4f.ptr()[1], value4f.ptr()[2],
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_data_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_12) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_32F_C4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_12, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":360
 *             return types.PyERROR_CODE(status), np.array([value3f.ptr()[0], value3f.ptr()[1], value3f.ptr()[2]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             status = getValueFloat4(self.mat, x, y, value4f, memory_type.value)             # <<<<<<<<<<<<<<
 *             return types.PyERROR_CODE(status), np.array([value4f.ptr()[0], value4f.ptr()[1], value4f.ptr()[2],
 *                                                          value4f.ptr()[3]])
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_status = sl::getValueFloat4(__pyx_v_self->mat, __pyx_t_6, __pyx_t_5, __pyx_v_value4f, __pyx_t_7);

    /* "pyzed/core.pyx":361
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             status = getValueFloat4(self.mat, x, y, value4f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4f.ptr()[0], value4f.ptr()[1], value4f.ptr()[2],             # <<<<<<<<<<<<<<
 *                                                          value4f.ptr()[3]])
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_status); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_12};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_12};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_value4f->ptr()[0])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_value4f->ptr()[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_value4f->ptr()[2])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "pyzed/core.pyx":362
 *             status = getValueFloat4(self.mat, x, y, value4f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4f.ptr()[0], value4f.ptr()[1], value4f.ptr()[2],
 *                                                          value4f.ptr()[3]])             # <<<<<<<<<<<<<<
 * 
 *     def get_width(self):
 */
    __pyx_t_10 = PyFloat_FromDouble((__pyx_v_value4f->ptr()[3])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "pyzed/core.pyx":361
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:
 *             status = getValueFloat4(self.mat, x, y, value4f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4f.ptr()[0], value4f.ptr()[1], value4f.ptr()[2],             # <<<<<<<<<<<<<<
 *                                                          value4f.ptr()[3]])
 * 
 */
    __pyx_t_11 = PyList_New(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_11, 3, __pyx_t_10);
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_11};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_11};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_12;
    __pyx_t_12 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":359
 *             status = getValueFloat3(self.mat, x, y, value3f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value3f.ptr()[0], value3f.ptr()[1], value3f.ptr()[2]])
 *         elif self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_32F_C4:             # <<<<<<<<<<<<<<
 *             status = getValueFloat4(self.mat, x, y, value4f, memory_type.value)
 *             return types.PyERROR_CODE(status), np.array([value4f.ptr()[0], value4f.ptr()[1], value4f.ptr()[2],
 */
  }

  /* "pyzed/core.pyx":325
 *                                       value[3]), memory_type.value))
 * 
 *     def get_value(self, x, y, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         cdef uchar1 value1u
 *         cdef types.Vector2[uchar1]* value2u = new types.Vector2[uchar1]()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":364
 *                                                          value4f.ptr()[3]])
 * 
 *     def get_width(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getWidth()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_41get_width(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_40get_width[] = "PyMat.get_width(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_41get_width(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_40get_width(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_40get_width(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_width", 0);

  /* "pyzed/core.pyx":365
 * 
 *     def get_width(self):
 *         return self.mat.getWidth()             # <<<<<<<<<<<<<<
 * 
 *     def get_height(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getWidth()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":364
 *                                                          value4f.ptr()[3]])
 * 
 *     def get_width(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getWidth()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":367
 *         return self.mat.getWidth()
 * 
 *     def get_height(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getHeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_43get_height(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_42get_height[] = "PyMat.get_height(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_43get_height(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_height (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_42get_height(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_42get_height(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_height", 0);

  /* "pyzed/core.pyx":368
 * 
 *     def get_height(self):
 *         return self.mat.getHeight()             # <<<<<<<<<<<<<<
 * 
 *     def get_resolution(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getHeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":367
 *         return self.mat.getWidth()
 * 
 *     def get_height(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getHeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":370
 *         return self.mat.getHeight()
 * 
 *     def get_resolution(self):             # <<<<<<<<<<<<<<
 *         return PyResolution(self.mat.getResolution().width, self.mat.getResolution().height)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_45get_resolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_44get_resolution[] = "PyMat.get_resolution(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_45get_resolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_resolution (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_44get_resolution(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_44get_resolution(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_resolution", 0);

  /* "pyzed/core.pyx":371
 * 
 *     def get_resolution(self):
 *         return PyResolution(self.mat.getResolution().width, self.mat.getResolution().height)             # <<<<<<<<<<<<<<
 * 
 *     def get_channels(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getResolution().width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getResolution().height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyResolution), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":370
 *         return self.mat.getHeight()
 * 
 *     def get_resolution(self):             # <<<<<<<<<<<<<<
 *         return PyResolution(self.mat.getResolution().width, self.mat.getResolution().height)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":373
 *         return PyResolution(self.mat.getResolution().width, self.mat.getResolution().height)
 * 
 *     def get_channels(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getChannels()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_47get_channels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_46get_channels[] = "PyMat.get_channels(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_47get_channels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_channels (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_46get_channels(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_46get_channels(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_channels", 0);

  /* "pyzed/core.pyx":374
 * 
 *     def get_channels(self):
 *         return self.mat.getChannels()             # <<<<<<<<<<<<<<
 * 
 *     def get_data_type(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getChannels()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":373
 *         return PyResolution(self.mat.getResolution().width, self.mat.getResolution().height)
 * 
 *     def get_channels(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getChannels()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_channels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":376
 *         return self.mat.getChannels()
 * 
 *     def get_data_type(self):             # <<<<<<<<<<<<<<
 *         return PyMAT_TYPE(self.mat.getDataType())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_49get_data_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_48get_data_type[] = "PyMat.get_data_type(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_49get_data_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_data_type (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_48get_data_type(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_48get_data_type(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_data_type", 0);

  /* "pyzed/core.pyx":377
 * 
 *     def get_data_type(self):
 *         return PyMAT_TYPE(self.mat.getDataType())             # <<<<<<<<<<<<<<
 * 
 *     def get_memory_type(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMAT_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(__pyx_v_self->mat.getDataType()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":376
 *         return self.mat.getChannels()
 * 
 *     def get_data_type(self):             # <<<<<<<<<<<<<<
 *         return PyMAT_TYPE(self.mat.getDataType())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_data_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":379
 *         return PyMAT_TYPE(self.mat.getDataType())
 * 
 *     def get_memory_type(self):             # <<<<<<<<<<<<<<
 *         return PyMEM(self.mat.getMemoryType())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_51get_memory_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_50get_memory_type[] = "PyMat.get_memory_type(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_51get_memory_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_memory_type (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_50get_memory_type(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_50get_memory_type(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_memory_type", 0);

  /* "pyzed/core.pyx":380
 * 
 *     def get_memory_type(self):
 *         return PyMEM(self.mat.getMemoryType())             # <<<<<<<<<<<<<<
 * 
 *     def get_data(self, memory_type=PyMEM.PyMEM_CPU):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_enum__sl_3a__3a_MEM(__pyx_v_self->mat.getMemoryType()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":379
 *         return PyMAT_TYPE(self.mat.getDataType())
 * 
 *     def get_memory_type(self):             # <<<<<<<<<<<<<<
 *         return PyMEM(self.mat.getMemoryType())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_memory_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":382
 *         return PyMEM(self.mat.getMemoryType())
 * 
 *     def get_data(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         shape = None
 *         if self.mat.getChannels() == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_53get_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_52get_data[] = "PyMat.get_data(self, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_53get_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_data (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memory_type,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__30;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_data") < 0)) __PYX_ERR(0, 382, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memory_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_data", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 382, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.get_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_52get_data(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_52get_data(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_v_shape = NULL;
  size_t __pyx_v_size;
  PyObject *__pyx_v_dtype = NULL;
  PyArrayObject *__pyx_v_arr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  enum sl::MAT_TYPE __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  enum sl::MEM __pyx_t_9;
  __Pyx_RefNannySetupContext("get_data", 0);

  /* "pyzed/core.pyx":383
 * 
 *     def get_data(self, memory_type=PyMEM.PyMEM_CPU):
 *         shape = None             # <<<<<<<<<<<<<<
 *         if self.mat.getChannels() == 1:
 *             shape = (self.mat.getHeight(), self.mat.getWidth())
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_shape = Py_None;

  /* "pyzed/core.pyx":384
 *     def get_data(self, memory_type=PyMEM.PyMEM_CPU):
 *         shape = None
 *         if self.mat.getChannels() == 1:             # <<<<<<<<<<<<<<
 *             shape = (self.mat.getHeight(), self.mat.getWidth())
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->mat.getChannels() == 1) != 0);
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":385
 *         shape = None
 *         if self.mat.getChannels() == 1:
 *             shape = (self.mat.getHeight(), self.mat.getWidth())             # <<<<<<<<<<<<<<
 *         else:
 *             shape = (self.mat.getHeight(), self.mat.getWidth(), self.mat.getChannels())
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getHeight()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getWidth()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_shape, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyzed/core.pyx":384
 *     def get_data(self, memory_type=PyMEM.PyMEM_CPU):
 *         shape = None
 *         if self.mat.getChannels() == 1:             # <<<<<<<<<<<<<<
 *             shape = (self.mat.getHeight(), self.mat.getWidth())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":387
 *             shape = (self.mat.getHeight(), self.mat.getWidth())
 *         else:
 *             shape = (self.mat.getHeight(), self.mat.getWidth(), self.mat.getChannels())             # <<<<<<<<<<<<<<
 * 
 *         cdef size_t size = 0
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getHeight()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getWidth()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getChannels()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_shape, __pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":389
 *             shape = (self.mat.getHeight(), self.mat.getWidth(), self.mat.getChannels())
 * 
 *         cdef size_t size = 0             # <<<<<<<<<<<<<<
 *         dtype = None
 *         if self.mat.getDataType() in (MAT_TYPE_8U_C1, MAT_TYPE_8U_C2, MAT_TYPE_8U_C3, MAT_TYPE_8U_C4):
 */
  __pyx_v_size = 0;

  /* "pyzed/core.pyx":390
 * 
 *         cdef size_t size = 0
 *         dtype = None             # <<<<<<<<<<<<<<
 *         if self.mat.getDataType() in (MAT_TYPE_8U_C1, MAT_TYPE_8U_C2, MAT_TYPE_8U_C3, MAT_TYPE_8U_C4):
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_dtype = Py_None;

  /* "pyzed/core.pyx":391
 *         cdef size_t size = 0
 *         dtype = None
 *         if self.mat.getDataType() in (MAT_TYPE_8U_C1, MAT_TYPE_8U_C2, MAT_TYPE_8U_C3, MAT_TYPE_8U_C4):             # <<<<<<<<<<<<<<
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()
 *             dtype = np.uint8
 */
  __pyx_t_6 = __pyx_v_self->mat.getDataType();
  __pyx_t_7 = ((__pyx_t_6 == sl::MAT_TYPE_8U_C1) != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_t_6 == sl::MAT_TYPE_8U_C2) != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_t_6 == sl::MAT_TYPE_8U_C3) != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_t_6 == sl::MAT_TYPE_8U_C4) != 0);
  __pyx_t_1 = __pyx_t_7;
  __pyx_L5_bool_binop_done:;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "pyzed/core.pyx":392
 *         dtype = None
 *         if self.mat.getDataType() in (MAT_TYPE_8U_C1, MAT_TYPE_8U_C2, MAT_TYPE_8U_C3, MAT_TYPE_8U_C4):
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()             # <<<<<<<<<<<<<<
 *             dtype = np.uint8
 *         elif self.mat.getDataType() in (MAT_TYPE_32F_C1, MAT_TYPE_32F_C2, MAT_TYPE_32F_C3, MAT_TYPE_32F_C4):
 */
    __pyx_v_size = ((__pyx_v_self->mat.getHeight() * __pyx_v_self->mat.getWidth()) * __pyx_v_self->mat.getChannels());

    /* "pyzed/core.pyx":393
 *         if self.mat.getDataType() in (MAT_TYPE_8U_C1, MAT_TYPE_8U_C2, MAT_TYPE_8U_C3, MAT_TYPE_8U_C4):
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()
 *             dtype = np.uint8             # <<<<<<<<<<<<<<
 *         elif self.mat.getDataType() in (MAT_TYPE_32F_C1, MAT_TYPE_32F_C2, MAT_TYPE_32F_C3, MAT_TYPE_32F_C4):
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()*sizeof(float)
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyzed/core.pyx":391
 *         cdef size_t size = 0
 *         dtype = None
 *         if self.mat.getDataType() in (MAT_TYPE_8U_C1, MAT_TYPE_8U_C2, MAT_TYPE_8U_C3, MAT_TYPE_8U_C4):             # <<<<<<<<<<<<<<
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()
 *             dtype = np.uint8
 */
    goto __pyx_L4;
  }

  /* "pyzed/core.pyx":394
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()
 *             dtype = np.uint8
 *         elif self.mat.getDataType() in (MAT_TYPE_32F_C1, MAT_TYPE_32F_C2, MAT_TYPE_32F_C3, MAT_TYPE_32F_C4):             # <<<<<<<<<<<<<<
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()*sizeof(float)
 *             dtype = np.float32
 */
  __pyx_t_6 = __pyx_v_self->mat.getDataType();
  __pyx_t_1 = ((__pyx_t_6 == sl::MAT_TYPE_32F_C1) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_7 = __pyx_t_1;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_1 = ((__pyx_t_6 == sl::MAT_TYPE_32F_C2) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_7 = __pyx_t_1;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_1 = ((__pyx_t_6 == sl::MAT_TYPE_32F_C3) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_7 = __pyx_t_1;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_1 = ((__pyx_t_6 == sl::MAT_TYPE_32F_C4) != 0);
  __pyx_t_7 = __pyx_t_1;
  __pyx_L9_bool_binop_done:;
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":395
 *             dtype = np.uint8
 *         elif self.mat.getDataType() in (MAT_TYPE_32F_C1, MAT_TYPE_32F_C2, MAT_TYPE_32F_C3, MAT_TYPE_32F_C4):
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()*sizeof(float)             # <<<<<<<<<<<<<<
 *             dtype = np.float32
 *         else:
 */
    __pyx_v_size = (((__pyx_v_self->mat.getHeight() * __pyx_v_self->mat.getWidth()) * __pyx_v_self->mat.getChannels()) * (sizeof(float)));

    /* "pyzed/core.pyx":396
 *         elif self.mat.getDataType() in (MAT_TYPE_32F_C1, MAT_TYPE_32F_C2, MAT_TYPE_32F_C3, MAT_TYPE_32F_C4):
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()*sizeof(float)
 *             dtype = np.float32             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("Unknown Mat data_type value: {0}".format(self.mat.getDataType()))
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyzed/core.pyx":394
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()
 *             dtype = np.uint8
 *         elif self.mat.getDataType() in (MAT_TYPE_32F_C1, MAT_TYPE_32F_C2, MAT_TYPE_32F_C3, MAT_TYPE_32F_C4):             # <<<<<<<<<<<<<<
 *             size = self.mat.getHeight()*self.mat.getWidth()*self.mat.getChannels()*sizeof(float)
 *             dtype = np.float32
 */
    goto __pyx_L4;
  }

  /* "pyzed/core.pyx":398
 *             dtype = np.float32
 *         else:
 *             raise RuntimeError("Unknown Mat data_type value: {0}".format(self.mat.getDataType()))             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray arr = np.zeros(shape, dtype=dtype)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_Mat_data_type_value_0, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(__pyx_v_self->mat.getDataType()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 398, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "pyzed/core.pyx":400
 *             raise RuntimeError("Unknown Mat data_type value: {0}".format(self.mat.getDataType()))
 * 
 *         cdef np.ndarray arr = np.zeros(shape, dtype=dtype)             # <<<<<<<<<<<<<<
 *         if isinstance(memory_type, PyMEM):
 *             if self.mat.getDataType() == MAT_TYPE_8U_C1:
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_shape);
  __Pyx_GIVEREF(__pyx_v_shape);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_v_dtype) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 400, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzed/core.pyx":401
 * 
 *         cdef np.ndarray arr = np.zeros(shape, dtype=dtype)
 *         if isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             if self.mat.getDataType() == MAT_TYPE_8U_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar1(self.mat, memory_type.value), size)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_memory_type, __pyx_t_3); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "pyzed/core.pyx":402
 *         cdef np.ndarray arr = np.zeros(shape, dtype=dtype)
 *         if isinstance(memory_type, PyMEM):
 *             if self.mat.getDataType() == MAT_TYPE_8U_C1:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C2:
 */
    __pyx_t_7 = ((__pyx_v_self->mat.getDataType() == sl::MAT_TYPE_8U_C1) != 0);
    if (__pyx_t_7) {

      /* "pyzed/core.pyx":403
 *         if isinstance(memory_type, PyMEM):
 *             if self.mat.getDataType() == MAT_TYPE_8U_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar1(self.mat, memory_type.value), size)             # <<<<<<<<<<<<<<
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C2:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar2(self.mat, memory_type.value), size)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      memcpy(((void *)__pyx_v_arr->data), ((void *)sl::getPointerUchar1(__pyx_v_self->mat, __pyx_t_9)), __pyx_v_size);

      /* "pyzed/core.pyx":402
 *         cdef np.ndarray arr = np.zeros(shape, dtype=dtype)
 *         if isinstance(memory_type, PyMEM):
 *             if self.mat.getDataType() == MAT_TYPE_8U_C1:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C2:
 */
      goto __pyx_L14;
    }

    /* "pyzed/core.pyx":404
 *             if self.mat.getDataType() == MAT_TYPE_8U_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C2:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C3:
 */
    __pyx_t_7 = ((__pyx_v_self->mat.getDataType() == sl::MAT_TYPE_8U_C2) != 0);
    if (__pyx_t_7) {

      /* "pyzed/core.pyx":405
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C2:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar2(self.mat, memory_type.value), size)             # <<<<<<<<<<<<<<
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C3:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar3(self.mat, memory_type.value), size)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      memcpy(((void *)__pyx_v_arr->data), ((void *)sl::getPointerUchar2(__pyx_v_self->mat, __pyx_t_9)), __pyx_v_size);

      /* "pyzed/core.pyx":404
 *             if self.mat.getDataType() == MAT_TYPE_8U_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C2:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C3:
 */
      goto __pyx_L14;
    }

    /* "pyzed/core.pyx":406
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C2:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C3:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C4:
 */
    __pyx_t_7 = ((__pyx_v_self->mat.getDataType() == sl::MAT_TYPE_8U_C3) != 0);
    if (__pyx_t_7) {

      /* "pyzed/core.pyx":407
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C3:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar3(self.mat, memory_type.value), size)             # <<<<<<<<<<<<<<
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C4:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar4(self.mat, memory_type.value), size)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      memcpy(((void *)__pyx_v_arr->data), ((void *)sl::getPointerUchar3(__pyx_v_self->mat, __pyx_t_9)), __pyx_v_size);

      /* "pyzed/core.pyx":406
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C2:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C3:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C4:
 */
      goto __pyx_L14;
    }

    /* "pyzed/core.pyx":408
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C3:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C4:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar4(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C1:
 */
    __pyx_t_7 = ((__pyx_v_self->mat.getDataType() == sl::MAT_TYPE_8U_C4) != 0);
    if (__pyx_t_7) {

      /* "pyzed/core.pyx":409
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C4:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar4(self.mat, memory_type.value), size)             # <<<<<<<<<<<<<<
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat1(self.mat, memory_type.value), size)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      memcpy(((void *)__pyx_v_arr->data), ((void *)sl::getPointerUchar4(__pyx_v_self->mat, __pyx_t_9)), __pyx_v_size);

      /* "pyzed/core.pyx":408
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C3:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C4:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar4(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C1:
 */
      goto __pyx_L14;
    }

    /* "pyzed/core.pyx":410
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C4:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar4(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C1:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C2:
 */
    __pyx_t_7 = ((__pyx_v_self->mat.getDataType() == sl::MAT_TYPE_32F_C1) != 0);
    if (__pyx_t_7) {

      /* "pyzed/core.pyx":411
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar4(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat1(self.mat, memory_type.value), size)             # <<<<<<<<<<<<<<
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C2:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat2(self.mat, memory_type.value), size)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      memcpy(((void *)__pyx_v_arr->data), ((void *)sl::getPointerFloat1(__pyx_v_self->mat, __pyx_t_9)), __pyx_v_size);

      /* "pyzed/core.pyx":410
 *             elif self.mat.getDataType() == MAT_TYPE_8U_C4:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar4(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C1:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C2:
 */
      goto __pyx_L14;
    }

    /* "pyzed/core.pyx":412
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C2:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C3:
 */
    __pyx_t_7 = ((__pyx_v_self->mat.getDataType() == sl::MAT_TYPE_32F_C2) != 0);
    if (__pyx_t_7) {

      /* "pyzed/core.pyx":413
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C2:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat2(self.mat, memory_type.value), size)             # <<<<<<<<<<<<<<
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C3:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat3(self.mat, memory_type.value), size)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      memcpy(((void *)__pyx_v_arr->data), ((void *)sl::getPointerFloat2(__pyx_v_self->mat, __pyx_t_9)), __pyx_v_size);

      /* "pyzed/core.pyx":412
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat1(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C2:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C3:
 */
      goto __pyx_L14;
    }

    /* "pyzed/core.pyx":414
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C2:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C3:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C4:
 */
    __pyx_t_7 = ((__pyx_v_self->mat.getDataType() == sl::MAT_TYPE_32F_C3) != 0);
    if (__pyx_t_7) {

      /* "pyzed/core.pyx":415
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C3:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat3(self.mat, memory_type.value), size)             # <<<<<<<<<<<<<<
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C4:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat4(self.mat, memory_type.value), size)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      memcpy(((void *)__pyx_v_arr->data), ((void *)sl::getPointerFloat3(__pyx_v_self->mat, __pyx_t_9)), __pyx_v_size);

      /* "pyzed/core.pyx":414
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C2:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat2(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C3:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C4:
 */
      goto __pyx_L14;
    }

    /* "pyzed/core.pyx":416
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C3:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C4:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat4(self.mat, memory_type.value), size)
 *         else:
 */
    __pyx_t_7 = ((__pyx_v_self->mat.getDataType() == sl::MAT_TYPE_32F_C4) != 0);
    if (__pyx_t_7) {

      /* "pyzed/core.pyx":417
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C4:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat4(self.mat, memory_type.value), size)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 417, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      memcpy(((void *)__pyx_v_arr->data), ((void *)sl::getPointerFloat4(__pyx_v_self->mat, __pyx_t_9)), __pyx_v_size);

      /* "pyzed/core.pyx":416
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C3:
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat3(self.mat, memory_type.value), size)
 *             elif self.mat.getDataType() == MAT_TYPE_32F_C4:             # <<<<<<<<<<<<<<
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat4(self.mat, memory_type.value), size)
 *         else:
 */
    }
    __pyx_L14:;

    /* "pyzed/core.pyx":401
 * 
 *         cdef np.ndarray arr = np.zeros(shape, dtype=dtype)
 *         if isinstance(memory_type, PyMEM):             # <<<<<<<<<<<<<<
 *             if self.mat.getDataType() == MAT_TYPE_8U_C1:
 *                 memcpy(<void*>arr.data, <void*>getPointerUchar1(self.mat, memory_type.value), size)
 */
    goto __pyx_L13;
  }

  /* "pyzed/core.pyx":419
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat4(self.mat, memory_type.value), size)
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *         return arr
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 419, __pyx_L1_error)
  }
  __pyx_L13:;

  /* "pyzed/core.pyx":421
 *             raise TypeError("Argument is not of PyMEM type.")
 * 
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def get_step_bytes(self, memory_type=PyMEM.PyMEM_CPU):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":382
 *         return PyMEM(self.mat.getMemoryType())
 * 
 *     def get_data(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         shape = None
 *         if self.mat.getChannels() == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_shape);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":423
 *         return arr
 * 
 *     def get_step_bytes(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if type(memory_type) == PyMEM:
 *             return self.mat.getStepBytes(memory_type.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_55get_step_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_54get_step_bytes[] = "PyMat.get_step_bytes(self, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_55get_step_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_step_bytes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memory_type,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__32;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_step_bytes") < 0)) __PYX_ERR(0, 423, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memory_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_step_bytes", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 423, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.get_step_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_54get_step_bytes(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_54get_step_bytes(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  enum sl::MEM __pyx_t_4;
  __Pyx_RefNannySetupContext("get_step_bytes", 0);

  /* "pyzed/core.pyx":424
 * 
 *     def get_step_bytes(self, memory_type=PyMEM.PyMEM_CPU):
 *         if type(memory_type) == PyMEM:             # <<<<<<<<<<<<<<
 *             return self.mat.getStepBytes(memory_type.value)
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_memory_type)), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pyzed/core.pyx":425
 *     def get_step_bytes(self, memory_type=PyMEM.PyMEM_CPU):
 *         if type(memory_type) == PyMEM:
 *             return self.mat.getStepBytes(memory_type.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getStepBytes(__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":424
 * 
 *     def get_step_bytes(self, memory_type=PyMEM.PyMEM_CPU):
 *         if type(memory_type) == PyMEM:             # <<<<<<<<<<<<<<
 *             return self.mat.getStepBytes(memory_type.value)
 *         else:
 */
  }

  /* "pyzed/core.pyx":427
 *             return self.mat.getStepBytes(memory_type.value)
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_step(self, memory_type=PyMEM.PyMEM_CPU):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 427, __pyx_L1_error)
  }

  /* "pyzed/core.pyx":423
 *         return arr
 * 
 *     def get_step_bytes(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if type(memory_type) == PyMEM:
 *             return self.mat.getStepBytes(memory_type.value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_step_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":429
 *             raise TypeError("Argument is not of PyMEM type.")
 * 
 *     def get_step(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if type(memory_type) == PyMEM:
 *             return self.mat.getStep(memory_type.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_57get_step(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_56get_step[] = "PyMat.get_step(self, memory_type=PyMEM.PyMEM_CPU)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_57get_step(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_memory_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_step (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memory_type,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__34;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_memory_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_step") < 0)) __PYX_ERR(0, 429, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memory_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_step", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 429, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.get_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_56get_step(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), __pyx_v_memory_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_56get_step(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, PyObject *__pyx_v_memory_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  enum sl::MEM __pyx_t_4;
  __Pyx_RefNannySetupContext("get_step", 0);

  /* "pyzed/core.pyx":430
 * 
 *     def get_step(self, memory_type=PyMEM.PyMEM_CPU):
 *         if type(memory_type) == PyMEM:             # <<<<<<<<<<<<<<
 *             return self.mat.getStep(memory_type.value)
 *         else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_memory_type)), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pyzed/core.pyx":431
 *     def get_step(self, memory_type=PyMEM.PyMEM_CPU):
 *         if type(memory_type) == PyMEM:
 *             return self.mat.getStep(memory_type.value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_type, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = ((enum sl::MEM)__Pyx_PyInt_As_enum__sl_3a__3a_MEM(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getStep(__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":430
 * 
 *     def get_step(self, memory_type=PyMEM.PyMEM_CPU):
 *         if type(memory_type) == PyMEM:             # <<<<<<<<<<<<<<
 *             return self.mat.getStep(memory_type.value)
 *         else:
 */
  }

  /* "pyzed/core.pyx":433
 *             return self.mat.getStep(memory_type.value)
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_pixel_bytes(self):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 433, __pyx_L1_error)
  }

  /* "pyzed/core.pyx":429
 *             raise TypeError("Argument is not of PyMEM type.")
 * 
 *     def get_step(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if type(memory_type) == PyMEM:
 *             return self.mat.getStep(memory_type.value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":435
 *             raise TypeError("Argument is not of PyMEM type.")
 * 
 *     def get_pixel_bytes(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getPixelBytes()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_59get_pixel_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_58get_pixel_bytes[] = "PyMat.get_pixel_bytes(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_59get_pixel_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pixel_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_58get_pixel_bytes(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_58get_pixel_bytes(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_pixel_bytes", 0);

  /* "pyzed/core.pyx":436
 * 
 *     def get_pixel_bytes(self):
 *         return self.mat.getPixelBytes()             # <<<<<<<<<<<<<<
 * 
 *     def get_width_bytes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getPixelBytes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":435
 *             raise TypeError("Argument is not of PyMEM type.")
 * 
 *     def get_pixel_bytes(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getPixelBytes()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_pixel_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":438
 *         return self.mat.getPixelBytes()
 * 
 *     def get_width_bytes(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getWidthBytes()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_61get_width_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_60get_width_bytes[] = "PyMat.get_width_bytes(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_61get_width_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_width_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_60get_width_bytes(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_60get_width_bytes(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_width_bytes", 0);

  /* "pyzed/core.pyx":439
 * 
 *     def get_width_bytes(self):
 *         return self.mat.getWidthBytes()             # <<<<<<<<<<<<<<
 * 
 *     def get_infos(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->mat.getWidthBytes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":438
 *         return self.mat.getPixelBytes()
 * 
 *     def get_width_bytes(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getWidthBytes()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_width_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":441
 *         return self.mat.getWidthBytes()
 * 
 *     def get_infos(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getInfos().get().decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_63get_infos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_62get_infos[] = "PyMat.get_infos(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_63get_infos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_infos (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_62get_infos(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_62get_infos(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_infos", 0);

  /* "pyzed/core.pyx":442
 * 
 *     def get_infos(self):
 *         return self.mat.getInfos().get().decode()             # <<<<<<<<<<<<<<
 * 
 *     def is_init(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->mat.getInfos().get();
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":441
 *         return self.mat.getWidthBytes()
 * 
 *     def get_infos(self):             # <<<<<<<<<<<<<<
 *         return self.mat.getInfos().get().decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyMat.get_infos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":444
 *         return self.mat.getInfos().get().decode()
 * 
 *     def is_init(self):             # <<<<<<<<<<<<<<
 *         return self.mat.isInit()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_65is_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_64is_init[] = "PyMat.is_init(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_65is_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_init (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_64is_init(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_64is_init(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_init", 0);

  /* "pyzed/core.pyx":445
 * 
 *     def is_init(self):
 *         return self.mat.isInit()             # <<<<<<<<<<<<<<
 * 
 *     def is_memory_owner(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->mat.isInit()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":444
 *         return self.mat.getInfos().get().decode()
 * 
 *     def is_init(self):             # <<<<<<<<<<<<<<
 *         return self.mat.isInit()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.is_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":447
 *         return self.mat.isInit()
 * 
 *     def is_memory_owner(self):             # <<<<<<<<<<<<<<
 *         return self.mat.isMemoryOwner()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_67is_memory_owner(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_66is_memory_owner[] = "PyMat.is_memory_owner(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_67is_memory_owner(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_memory_owner (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_66is_memory_owner(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_66is_memory_owner(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_memory_owner", 0);

  /* "pyzed/core.pyx":448
 * 
 *     def is_memory_owner(self):
 *         return self.mat.isMemoryOwner()             # <<<<<<<<<<<<<<
 * 
 *     def clone(self, PyMat py_mat):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->mat.isMemoryOwner()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":447
 *         return self.mat.isInit()
 * 
 *     def is_memory_owner(self):             # <<<<<<<<<<<<<<
 *         return self.mat.isMemoryOwner()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.is_memory_owner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":450
 *         return self.mat.isMemoryOwner()
 * 
 *     def clone(self, PyMat py_mat):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.clone(py_mat.mat))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_69clone(PyObject *__pyx_v_self, PyObject *__pyx_v_py_mat); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_68clone[] = "PyMat.clone(self, PyMat py_mat)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_69clone(PyObject *__pyx_v_self, PyObject *__pyx_v_py_mat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mat), __pyx_ptype_5pyzed_4core_PyMat, 1, "py_mat", 0))) __PYX_ERR(0, 450, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_68clone(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_py_mat));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_68clone(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pyzed/core.pyx":451
 * 
 *     def clone(self, PyMat py_mat):
 *         return types.PyERROR_CODE(self.mat.clone(py_mat.mat))             # <<<<<<<<<<<<<<
 * 
 *     def move(self, PyMat py_mat):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->mat.clone(__pyx_v_py_mat->mat)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":450
 *         return self.mat.isMemoryOwner()
 * 
 *     def clone(self, PyMat py_mat):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.clone(py_mat.mat))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":453
 *         return types.PyERROR_CODE(self.mat.clone(py_mat.mat))
 * 
 *     def move(self, PyMat py_mat):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.move(py_mat.mat))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_71move(PyObject *__pyx_v_self, PyObject *__pyx_v_py_mat); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_70move[] = "PyMat.move(self, PyMat py_mat)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_71move(PyObject *__pyx_v_self, PyObject *__pyx_v_py_mat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("move (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mat), __pyx_ptype_5pyzed_4core_PyMat, 1, "py_mat", 0))) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_70move(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_py_mat));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_70move(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("move", 0);

  /* "pyzed/core.pyx":454
 * 
 *     def move(self, PyMat py_mat):
 *         return types.PyERROR_CODE(self.mat.move(py_mat.mat))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyERROR_CODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(__pyx_v_self->mat.move(__pyx_v_py_mat->mat)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":453
 *         return types.PyERROR_CODE(self.mat.clone(py_mat.mat))
 * 
 *     def move(self, PyMat py_mat):             # <<<<<<<<<<<<<<
 *         return types.PyERROR_CODE(self.mat.move(py_mat.mat))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":457
 * 
 *     @staticmethod
 *     def swap(self, PyMat mat1, PyMat mat2):             # <<<<<<<<<<<<<<
 *         self.mat.swap(mat1, mat2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_73swap(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_72swap[] = "PyMat.swap(self, PyMat mat1, PyMat mat2)";
static PyMethodDef __pyx_mdef_5pyzed_4core_5PyMat_73swap = {"swap", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_73swap, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_72swap};
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_73swap(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_mat1 = 0;
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_mat2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("swap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_mat1,&__pyx_n_s_mat2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("swap", 1, 3, 3, 1); __PYX_ERR(0, 457, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mat2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("swap", 1, 3, 3, 2); __PYX_ERR(0, 457, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "swap") < 0)) __PYX_ERR(0, 457, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_mat1 = ((struct __pyx_obj_5pyzed_4core_PyMat *)values[1]);
    __pyx_v_mat2 = ((struct __pyx_obj_5pyzed_4core_PyMat *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("swap", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 457, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyMat.swap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mat1), __pyx_ptype_5pyzed_4core_PyMat, 1, "mat1", 0))) __PYX_ERR(0, 457, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mat2), __pyx_ptype_5pyzed_4core_PyMat, 1, "mat2", 0))) __PYX_ERR(0, 457, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_72swap(__pyx_v_self, __pyx_v_mat1, __pyx_v_mat2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_72swap(PyObject *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_mat1, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_mat2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("swap", 0);

  /* "pyzed/core.pyx":458
 *     @staticmethod
 *     def swap(self, PyMat mat1, PyMat mat2):
 *         self.mat.swap(mat1, mat2)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_mat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_swap); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_mat1), ((PyObject *)__pyx_v_mat2)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_mat1), ((PyObject *)__pyx_v_mat2)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_mat1));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_mat1));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_mat1));
    __Pyx_INCREF(((PyObject *)__pyx_v_mat2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_mat2));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, ((PyObject *)__pyx_v_mat2));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":457
 * 
 *     @staticmethod
 *     def swap(self, PyMat mat1, PyMat mat2):             # <<<<<<<<<<<<<<
 *         self.mat.swap(mat1, mat2)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyMat.swap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":461
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         if not self.mat.name.empty():
 *             return self.mat.name.get().decode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_4name___get__(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_4name___get__(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":462
 *     @property
 *     def name(self):
 *         if not self.mat.name.empty():             # <<<<<<<<<<<<<<
 *             return self.mat.name.get().decode()
 *         else:
 */
  __pyx_t_1 = ((!(__pyx_v_self->mat.name.empty() != 0)) != 0);
  if (__pyx_t_1) {

    /* "pyzed/core.pyx":463
 *     def name(self):
 *         if not self.mat.name.empty():
 *             return self.mat.name.get().decode()             # <<<<<<<<<<<<<<
 *         else:
 *             return ""
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->mat.name.get();
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_t_2, 0, strlen(__pyx_t_2), NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyzed/core.pyx":462
 *     @property
 *     def name(self):
 *         if not self.mat.name.empty():             # <<<<<<<<<<<<<<
 *             return self.mat.name.get().decode()
 *         else:
 */
  }

  /* "pyzed/core.pyx":465
 *             return self.mat.name.get().decode()
 *         else:
 *             return ""             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__36);
    __pyx_r = __pyx_kp_s__36;
    goto __pyx_L0;
  }

  /* "pyzed/core.pyx":461
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         if not self.mat.name.empty():
 *             return self.mat.name.get().decode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.core.PyMat.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":468
 * 
 *     @property
 *     def verbose(self):             # <<<<<<<<<<<<<<
 *         return self.mat.verbose
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_7verbose_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_7verbose_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_7verbose___get__(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_7verbose___get__(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":469
 *     @property
 *     def verbose(self):
 *         return self.mat.verbose             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->mat.verbose); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":468
 * 
 *     @property
 *     def verbose(self):             # <<<<<<<<<<<<<<
 *         return self.mat.verbose
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.verbose.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":471
 *         return self.mat.verbose
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.get_infos()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_75__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_75__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_74__repr__(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_74__repr__(struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzed/core.pyx":472
 * 
 *     def __repr__(self):
 *         return self.get_infos()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_infos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":471
 *         return self.mat.verbose
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.get_infos()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.core.PyMat.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_77__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_76__reduce_cython__[] = "PyMat.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_77__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_76__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_76__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_79__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_5PyMat_78__setstate_cython__[] = "PyMat.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_5PyMat_79__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_5PyMat_78__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_5PyMat_78__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyMat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":476
 * 
 * cdef class PyRotation(types.PyMatrix3f):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_10PyRotation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_10PyRotation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation___cinit__(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_10PyRotation___cinit__(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":477
 * cdef class PyRotation(types.PyMatrix3f):
 *     def __cinit__(self):
 *         self.rotation = Rotation()             # <<<<<<<<<<<<<<
 * 
 *     def init_rotation(self, PyRotation rot):
 */
  __pyx_v_self->rotation = sl::Rotation();

  /* "pyzed/core.pyx":476
 * 
 * cdef class PyRotation(types.PyMatrix3f):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":479
 *         self.rotation = Rotation()
 * 
 *     def init_rotation(self, PyRotation rot):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation(rot.rotation)
 *         self.mat = rot.mat
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_3init_rotation(PyObject *__pyx_v_self, PyObject *__pyx_v_rot); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_2init_rotation[] = "PyRotation.init_rotation(self, PyRotation rot)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_3init_rotation(PyObject *__pyx_v_self, PyObject *__pyx_v_rot) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_rotation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rot), __pyx_ptype_5pyzed_4core_PyRotation, 1, "rot", 0))) __PYX_ERR(0, 479, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_2init_rotation(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_rot));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_2init_rotation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_rot) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sl::Matrix3f __pyx_t_1;
  __Pyx_RefNannySetupContext("init_rotation", 0);

  /* "pyzed/core.pyx":480
 * 
 *     def init_rotation(self, PyRotation rot):
 *         self.rotation = Rotation(rot.rotation)             # <<<<<<<<<<<<<<
 *         self.mat = rot.mat
 * 
 */
  __pyx_v_self->rotation = sl::Rotation(__pyx_v_rot->rotation);

  /* "pyzed/core.pyx":481
 *     def init_rotation(self, PyRotation rot):
 *         self.rotation = Rotation(rot.rotation)
 *         self.mat = rot.mat             # <<<<<<<<<<<<<<
 * 
 *     def init_matrix(self, types.PyMatrix3f matrix):
 */
  __pyx_t_1 = __pyx_v_rot->__pyx_base.mat;
  __pyx_v_self->__pyx_base.mat = __pyx_t_1;

  /* "pyzed/core.pyx":479
 *         self.rotation = Rotation()
 * 
 *     def init_rotation(self, PyRotation rot):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation(rot.rotation)
 *         self.mat = rot.mat
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":483
 *         self.mat = rot.mat
 * 
 *     def init_matrix(self, types.PyMatrix3f matrix):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation(matrix.mat)
 *         self.mat = matrix.mat
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_5init_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_4init_matrix[] = "PyRotation.init_matrix(self, PyMatrix3f matrix)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_5init_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_matrix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_5pyzed_5types_PyMatrix3f, 1, "matrix", 0))) __PYX_ERR(0, 483, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_4init_matrix(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_5types_PyMatrix3f *)__pyx_v_matrix));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_4init_matrix(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, struct __pyx_obj_5pyzed_5types_PyMatrix3f *__pyx_v_matrix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sl::Matrix3f __pyx_t_1;
  __Pyx_RefNannySetupContext("init_matrix", 0);

  /* "pyzed/core.pyx":484
 * 
 *     def init_matrix(self, types.PyMatrix3f matrix):
 *         self.rotation = Rotation(matrix.mat)             # <<<<<<<<<<<<<<
 *         self.mat = matrix.mat
 * 
 */
  __pyx_v_self->rotation = sl::Rotation(__pyx_v_matrix->mat);

  /* "pyzed/core.pyx":485
 *     def init_matrix(self, types.PyMatrix3f matrix):
 *         self.rotation = Rotation(matrix.mat)
 *         self.mat = matrix.mat             # <<<<<<<<<<<<<<
 * 
 *     def init_orientation(self, PyOrientation orient):
 */
  __pyx_t_1 = __pyx_v_matrix->mat;
  __pyx_v_self->__pyx_base.mat = __pyx_t_1;

  /* "pyzed/core.pyx":483
 *         self.mat = rot.mat
 * 
 *     def init_matrix(self, types.PyMatrix3f matrix):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation(matrix.mat)
 *         self.mat = matrix.mat
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":487
 *         self.mat = matrix.mat
 * 
 *     def init_orientation(self, PyOrientation orient):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation(orient.orientation)
 *         self.mat = types.Matrix3f(self.rotation.r)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_7init_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_orient); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_6init_orientation[] = "PyRotation.init_orientation(self, PyOrientation orient)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_7init_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_orient) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_orientation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_orient), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "orient", 0))) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_6init_orientation(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_orient));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_6init_orientation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_orientation", 0);

  /* "pyzed/core.pyx":488
 * 
 *     def init_orientation(self, PyOrientation orient):
 *         self.rotation = Rotation(orient.orientation)             # <<<<<<<<<<<<<<
 *         self.mat = types.Matrix3f(self.rotation.r)
 * 
 */
  __pyx_v_self->rotation = sl::Rotation(__pyx_v_orient->orientation);

  /* "pyzed/core.pyx":489
 *     def init_orientation(self, PyOrientation orient):
 *         self.rotation = Rotation(orient.orientation)
 *         self.mat = types.Matrix3f(self.rotation.r)             # <<<<<<<<<<<<<<
 * 
 *     def init_angle_translation(self, float angle, PyTranslation axis):
 */
  __pyx_v_self->__pyx_base.mat = sl::Matrix3f(__pyx_v_self->rotation.r);

  /* "pyzed/core.pyx":487
 *         self.mat = matrix.mat
 * 
 *     def init_orientation(self, PyOrientation orient):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation(orient.orientation)
 *         self.mat = types.Matrix3f(self.rotation.r)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":491
 *         self.mat = types.Matrix3f(self.rotation.r)
 * 
 *     def init_angle_translation(self, float angle, PyTranslation axis):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation(angle, axis.translation)
 *         self.mat = types.Matrix3f(self.rotation.r)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_9init_angle_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_8init_angle_translation[] = "PyRotation.init_angle_translation(self, float angle, PyTranslation axis)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_9init_angle_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_angle;
  struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_axis = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_angle_translation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle,&__pyx_n_s_axis,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_angle_translation", 1, 2, 2, 1); __PYX_ERR(0, 491, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_angle_translation") < 0)) __PYX_ERR(0, 491, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_angle = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_angle == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
    __pyx_v_axis = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_angle_translation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 491, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyRotation.init_angle_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_axis), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "axis", 0))) __PYX_ERR(0, 491, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_8init_angle_translation(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), __pyx_v_angle, __pyx_v_axis);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_8init_angle_translation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, float __pyx_v_angle, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_axis) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_angle_translation", 0);

  /* "pyzed/core.pyx":492
 * 
 *     def init_angle_translation(self, float angle, PyTranslation axis):
 *         self.rotation = Rotation(angle, axis.translation)             # <<<<<<<<<<<<<<
 *         self.mat = types.Matrix3f(self.rotation.r)
 * 
 */
  __pyx_v_self->rotation = sl::Rotation(__pyx_v_angle, __pyx_v_axis->translation);

  /* "pyzed/core.pyx":493
 *     def init_angle_translation(self, float angle, PyTranslation axis):
 *         self.rotation = Rotation(angle, axis.translation)
 *         self.mat = types.Matrix3f(self.rotation.r)             # <<<<<<<<<<<<<<
 * 
 *     def set_orientation(self, PyOrientation py_orientation):
 */
  __pyx_v_self->__pyx_base.mat = sl::Matrix3f(__pyx_v_self->rotation.r);

  /* "pyzed/core.pyx":491
 *         self.mat = types.Matrix3f(self.rotation.r)
 * 
 *     def init_angle_translation(self, float angle, PyTranslation axis):             # <<<<<<<<<<<<<<
 *         self.rotation = Rotation(angle, axis.translation)
 *         self.mat = types.Matrix3f(self.rotation.r)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":495
 *         self.mat = types.Matrix3f(self.rotation.r)
 * 
 *     def set_orientation(self, PyOrientation py_orientation):             # <<<<<<<<<<<<<<
 *         self.rotation.setOrientation(py_orientation.orientation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_11set_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_orientation); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_10set_orientation[] = "PyRotation.set_orientation(self, PyOrientation py_orientation)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_11set_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_orientation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_orientation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_orientation), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "py_orientation", 0))) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_10set_orientation(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_py_orientation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_10set_orientation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_py_orientation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_orientation", 0);

  /* "pyzed/core.pyx":496
 * 
 *     def set_orientation(self, PyOrientation py_orientation):
 *         self.rotation.setOrientation(py_orientation.orientation)             # <<<<<<<<<<<<<<
 * 
 *     def get_orientation(self):
 */
  __pyx_v_self->rotation.setOrientation(__pyx_v_py_orientation->orientation);

  /* "pyzed/core.pyx":495
 *         self.mat = types.Matrix3f(self.rotation.r)
 * 
 *     def set_orientation(self, PyOrientation py_orientation):             # <<<<<<<<<<<<<<
 *         self.rotation.setOrientation(py_orientation.orientation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":498
 *         self.rotation.setOrientation(py_orientation.orientation)
 * 
 *     def get_orientation(self):             # <<<<<<<<<<<<<<
 *         py_orientation = PyOrientation()
 *         py_orientation.orientation = self.rotation.getOrientation()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_13get_orientation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_12get_orientation[] = "PyRotation.get_orientation(self)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_13get_orientation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orientation (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_12get_orientation(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_12get_orientation(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self) {
  struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_py_orientation = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_orientation", 0);

  /* "pyzed/core.pyx":499
 * 
 *     def get_orientation(self):
 *         py_orientation = PyOrientation()             # <<<<<<<<<<<<<<
 *         py_orientation.orientation = self.rotation.getOrientation()
 *         return py_orientation
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyOrientation), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_orientation = ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":500
 *     def get_orientation(self):
 *         py_orientation = PyOrientation()
 *         py_orientation.orientation = self.rotation.getOrientation()             # <<<<<<<<<<<<<<
 *         return py_orientation
 * 
 */
  __pyx_v_py_orientation->orientation = __pyx_v_self->rotation.getOrientation();

  /* "pyzed/core.pyx":501
 *         py_orientation = PyOrientation()
 *         py_orientation.orientation = self.rotation.getOrientation()
 *         return py_orientation             # <<<<<<<<<<<<<<
 * 
 *     def get_rotation_vector(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_orientation));
  __pyx_r = ((PyObject *)__pyx_v_py_orientation);
  goto __pyx_L0;

  /* "pyzed/core.pyx":498
 *         self.rotation.setOrientation(py_orientation.orientation)
 * 
 *     def get_orientation(self):             # <<<<<<<<<<<<<<
 *         py_orientation = PyOrientation()
 *         py_orientation.orientation = self.rotation.getOrientation()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyRotation.get_orientation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_orientation);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":503
 *         return py_orientation
 * 
 *     def get_rotation_vector(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_15get_rotation_vector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_14get_rotation_vector[] = "PyRotation.get_rotation_vector(self)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_15get_rotation_vector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rotation_vector (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_14get_rotation_vector(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_14get_rotation_vector(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self) {
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  __Pyx_RefNannySetupContext("get_rotation_vector", 0);

  /* "pyzed/core.pyx":504
 * 
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.rotation.getRotationVector()[i]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 504, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":505
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             arr[i] = self.rotation.getRotationVector()[i]
 *         return arr
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyzed/core.pyx":506
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 *             arr[i] = self.rotation.getRotationVector()[i]             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->rotation.getRotationVector()[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyzed/core.pyx":507
 *         for i in range(3):
 *             arr[i] = self.rotation.getRotationVector()[i]
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def set_rotation_vector(self, float input0, float input1, float input2):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":503
 *         return py_orientation
 * 
 *     def get_rotation_vector(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyRotation.get_rotation_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":509
 *         return arr
 * 
 *     def set_rotation_vector(self, float input0, float input1, float input2):             # <<<<<<<<<<<<<<
 *         self.rotation.setRotationVector(types.Vector3[float](input0, input1, input2))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_17set_rotation_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_16set_rotation_vector[] = "PyRotation.set_rotation_vector(self, float input0, float input1, float input2)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_17set_rotation_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_input0;
  float __pyx_v_input1;
  float __pyx_v_input2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input0,&__pyx_n_s_input1,&__pyx_n_s_input2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_rotation_vector", 1, 3, 3, 1); __PYX_ERR(0, 509, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_rotation_vector", 1, 3, 3, 2); __PYX_ERR(0, 509, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_rotation_vector") < 0)) __PYX_ERR(0, 509, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_input0 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_input0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L3_error)
    __pyx_v_input1 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_input1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L3_error)
    __pyx_v_input2 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_input2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_rotation_vector", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 509, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyRotation.set_rotation_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_16set_rotation_vector(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), __pyx_v_input0, __pyx_v_input1, __pyx_v_input2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_16set_rotation_vector(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, float __pyx_v_input0, float __pyx_v_input1, float __pyx_v_input2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_vector", 0);

  /* "pyzed/core.pyx":510
 * 
 *     def set_rotation_vector(self, float input0, float input1, float input2):
 *         self.rotation.setRotationVector(types.Vector3[float](input0, input1, input2))             # <<<<<<<<<<<<<<
 * 
 *     def get_euler_angles(self, radian=True):
 */
  __pyx_v_self->rotation.setRotationVector(sl::Vector3<float> (__pyx_v_input0, __pyx_v_input1, __pyx_v_input2));

  /* "pyzed/core.pyx":509
 *         return arr
 * 
 *     def set_rotation_vector(self, float input0, float input1, float input2):             # <<<<<<<<<<<<<<
 *         self.rotation.setRotationVector(types.Vector3[float](input0, input1, input2))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":512
 *         self.rotation.setRotationVector(types.Vector3[float](input0, input1, input2))
 * 
 *     def get_euler_angles(self, radian=True):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_19get_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_18get_euler_angles[] = "PyRotation.get_euler_angles(self, radian=True)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_19get_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_radian = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_euler_angles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_radian,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radian);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_euler_angles") < 0)) __PYX_ERR(0, 512, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_radian = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_euler_angles", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 512, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyRotation.get_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_18get_euler_angles(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), __pyx_v_radian);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_18get_euler_angles(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, PyObject *__pyx_v_radian) {
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  bool __pyx_t_6;
  __Pyx_RefNannySetupContext("get_euler_angles", 0);

  /* "pyzed/core.pyx":513
 * 
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             for i in range(3):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 513, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":514
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 arr[i] = self.rotation.getEulerAngles(radian)[i]
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_radian, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":515
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 arr[i] = self.rotation.getEulerAngles(radian)[i]
 *         else:
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "pyzed/core.pyx":516
 *         if isinstance(radian, bool):
 *             for i in range(3):
 *                 arr[i] = self.rotation.getEulerAngles(radian)[i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of boolean type.")
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_radian); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
      __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->rotation.getEulerAngles(__pyx_t_6)[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 516, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "pyzed/core.pyx":514
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 arr[i] = self.rotation.getEulerAngles(radian)[i]
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":518
 *                 arr[i] = self.rotation.getEulerAngles(radian)[i]
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 518, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":519
 *         else:
 *             raise TypeError("Argument is not of boolean type.")
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, bool radian=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":512
 *         self.rotation.setRotationVector(types.Vector3[float](input0, input1, input2))
 * 
 *     def get_euler_angles(self, radian=True):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyRotation.get_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":521
 *         return arr
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, bool radian=True):             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             self.rotation.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_21set_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_20set_euler_angles[] = "PyRotation.set_euler_angles(self, float input0, float input1, float input2, bool radian=True)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_21set_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_input0;
  float __pyx_v_input1;
  float __pyx_v_input2;
  PyBoolObject *__pyx_v_radian = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_euler_angles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input0,&__pyx_n_s_input1,&__pyx_n_s_input2,&__pyx_n_s_radian,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = (PyObject *)((PyBoolObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_euler_angles", 0, 3, 4, 1); __PYX_ERR(0, 521, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_euler_angles", 0, 3, 4, 2); __PYX_ERR(0, 521, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radian);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_euler_angles") < 0)) __PYX_ERR(0, 521, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input0 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_input0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
    __pyx_v_input1 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_input1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
    __pyx_v_input2 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_input2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
    __pyx_v_radian = ((PyBoolObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_euler_angles", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 521, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyRotation.set_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_radian), __pyx_ptype_7cpython_4bool_bool, 1, "radian", 0))) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_20set_euler_angles(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), __pyx_v_input0, __pyx_v_input1, __pyx_v_input2, __pyx_v_radian);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_20set_euler_angles(struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, float __pyx_v_input0, float __pyx_v_input1, float __pyx_v_input2, PyBoolObject *__pyx_v_radian) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("set_euler_angles", 0);

  /* "pyzed/core.pyx":522
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, bool radian=True):
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             self.rotation.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_radian), __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzed/core.pyx":523
 *     def set_euler_angles(self, float input0, float input1, float input2, bool radian=True):
 *         if isinstance(radian, bool):
 *             self.rotation.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of boolean type.")
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_radian)); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
    __pyx_v_self->rotation.setEulerAngles(sl::Vector3<float> (__pyx_v_input0, __pyx_v_input1, __pyx_v_input2), __pyx_t_3);

    /* "pyzed/core.pyx":522
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, bool radian=True):
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             self.rotation.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":525
 *             self.rotation.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 * 
 * cdef class PyTranslation:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 525, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":521
 *         return arr
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, bool radian=True):             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             self.rotation.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzed.core.PyRotation.set_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_22__reduce_cython__[] = "PyRotation.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_22__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyRotation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_10PyRotation_24__setstate_cython__[] = "PyRotation.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_10PyRotation_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_10PyRotation_24__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_10PyRotation_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyRotation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":528
 * 
 * cdef class PyTranslation:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.translation = Translation()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_13PyTranslation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_13PyTranslation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation___cinit__(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_13PyTranslation___cinit__(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":529
 * cdef class PyTranslation:
 *     def __cinit__(self):
 *         self.translation = Translation()             # <<<<<<<<<<<<<<
 * 
 *     def init_translation(self, PyTranslation tr):
 */
  __pyx_v_self->translation = sl::Translation();

  /* "pyzed/core.pyx":528
 * 
 * cdef class PyTranslation:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.translation = Translation()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":531
 *         self.translation = Translation()
 * 
 *     def init_translation(self, PyTranslation tr):             # <<<<<<<<<<<<<<
 *         self.translation = Translation(tr.translation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_3init_translation(PyObject *__pyx_v_self, PyObject *__pyx_v_tr); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyTranslation_2init_translation[] = "PyTranslation.init_translation(self, PyTranslation tr)";
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_3init_translation(PyObject *__pyx_v_self, PyObject *__pyx_v_tr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_translation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tr), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "tr", 0))) __PYX_ERR(0, 531, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_2init_translation(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_tr));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_2init_translation(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_translation", 0);

  /* "pyzed/core.pyx":532
 * 
 *     def init_translation(self, PyTranslation tr):
 *         self.translation = Translation(tr.translation)             # <<<<<<<<<<<<<<
 * 
 *     def init_vector(self, float t1, float t2, float t3):
 */
  __pyx_v_self->translation = sl::Translation(__pyx_v_tr->translation);

  /* "pyzed/core.pyx":531
 *         self.translation = Translation()
 * 
 *     def init_translation(self, PyTranslation tr):             # <<<<<<<<<<<<<<
 *         self.translation = Translation(tr.translation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":534
 *         self.translation = Translation(tr.translation)
 * 
 *     def init_vector(self, float t1, float t2, float t3):             # <<<<<<<<<<<<<<
 *         self.translation = Translation(t1, t2, t3)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_5init_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyTranslation_4init_vector[] = "PyTranslation.init_vector(self, float t1, float t2, float t3)";
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_5init_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_t1;
  float __pyx_v_t2;
  float __pyx_v_t3;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t1,&__pyx_n_s_t2,&__pyx_n_s_t3,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_vector", 1, 3, 3, 1); __PYX_ERR(0, 534, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_vector", 1, 3, 3, 2); __PYX_ERR(0, 534, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_vector") < 0)) __PYX_ERR(0, 534, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_t1 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_t1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
    __pyx_v_t2 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_t2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
    __pyx_v_t3 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_t3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_vector", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 534, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyTranslation.init_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_4init_vector(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self), __pyx_v_t1, __pyx_v_t2, __pyx_v_t3);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_4init_vector(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, float __pyx_v_t1, float __pyx_v_t2, float __pyx_v_t3) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_vector", 0);

  /* "pyzed/core.pyx":535
 * 
 *     def init_vector(self, float t1, float t2, float t3):
 *         self.translation = Translation(t1, t2, t3)             # <<<<<<<<<<<<<<
 * 
 *     def normalize(self):
 */
  __pyx_v_self->translation = sl::Translation(__pyx_v_t1, __pyx_v_t2, __pyx_v_t3);

  /* "pyzed/core.pyx":534
 *         self.translation = Translation(tr.translation)
 * 
 *     def init_vector(self, float t1, float t2, float t3):             # <<<<<<<<<<<<<<
 *         self.translation = Translation(t1, t2, t3)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":537
 *         self.translation = Translation(t1, t2, t3)
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         self.translation.normalize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_7normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyTranslation_6normalize[] = "PyTranslation.normalize(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_7normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_6normalize(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_6normalize(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);

  /* "pyzed/core.pyx":538
 * 
 *     def normalize(self):
 *         self.translation.normalize()             # <<<<<<<<<<<<<<
 * 
 *     def normalize_translation(self, PyTranslation tr):
 */
  __pyx_v_self->translation.normalize();

  /* "pyzed/core.pyx":537
 *         self.translation = Translation(t1, t2, t3)
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         self.translation.normalize()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":540
 *         self.translation.normalize()
 * 
 *     def normalize_translation(self, PyTranslation tr):             # <<<<<<<<<<<<<<
 *         py_translation = PyTranslation()
 *         py_translation.translation = self.translation.normalize(tr.translation)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_9normalize_translation(PyObject *__pyx_v_self, PyObject *__pyx_v_tr); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyTranslation_8normalize_translation[] = "PyTranslation.normalize_translation(self, PyTranslation tr)";
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_9normalize_translation(PyObject *__pyx_v_self, PyObject *__pyx_v_tr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize_translation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tr), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "tr", 0))) __PYX_ERR(0, 540, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_8normalize_translation(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_tr));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_8normalize_translation(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr) {
  struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_py_translation = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("normalize_translation", 0);

  /* "pyzed/core.pyx":541
 * 
 *     def normalize_translation(self, PyTranslation tr):
 *         py_translation = PyTranslation()             # <<<<<<<<<<<<<<
 *         py_translation.translation = self.translation.normalize(tr.translation)
 *         return py_translation
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyTranslation), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_translation = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":542
 *     def normalize_translation(self, PyTranslation tr):
 *         py_translation = PyTranslation()
 *         py_translation.translation = self.translation.normalize(tr.translation)             # <<<<<<<<<<<<<<
 *         return py_translation
 * 
 */
  __pyx_v_py_translation->translation = __pyx_v_self->translation.normalize(__pyx_v_tr->translation);

  /* "pyzed/core.pyx":543
 *         py_translation = PyTranslation()
 *         py_translation.translation = self.translation.normalize(tr.translation)
 *         return py_translation             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_translation));
  __pyx_r = ((PyObject *)__pyx_v_py_translation);
  goto __pyx_L0;

  /* "pyzed/core.pyx":540
 *         self.translation.normalize()
 * 
 *     def normalize_translation(self, PyTranslation tr):             # <<<<<<<<<<<<<<
 *         py_translation = PyTranslation()
 *         py_translation.translation = self.translation.normalize(tr.translation)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTranslation.normalize_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_translation);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":545
 *         return py_translation
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.translation.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_11size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyTranslation_10size[] = "PyTranslation.size(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_11size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_10size(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_10size(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("size", 0);

  /* "pyzed/core.pyx":546
 * 
 *     def size(self):
 *         return self.translation.size()             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->translation.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":545
 *         return py_translation
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.translation.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTranslation.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":548
 *         return self.translation.size()
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_13get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyTranslation_12get[] = "PyTranslation.get(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_13get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_12get(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_12get(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self) {
  PyArrayObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("get", 0);

  /* "pyzed/core.pyx":549
 * 
 *     def get(self):
 *         cdef np.ndarray arr = np.zeros(self.size())             # <<<<<<<<<<<<<<
 *         for i in range(self.size()):
 *             arr[i] = <float>self.translation(i)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 549, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":550
 *     def get(self):
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             arr[i] = <float>self.translation(i)
 *         return arr
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 550, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 550, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 550, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 550, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzed/core.pyx":551
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):
 *             arr[i] = <float>self.translation(i)             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(((float)__pyx_v_self->translation(__pyx_t_8))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1) < 0)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyzed/core.pyx":550
 *     def get(self):
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             arr[i] = <float>self.translation(i)
 *         return arr
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyzed/core.pyx":552
 *         for i in range(self.size()):
 *             arr[i] = <float>self.translation(i)
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(PyTranslation self, PyOrientation other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":548
 *         return self.translation.size()
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyTranslation.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":554
 *         return arr
 * 
 *     def __mul__(PyTranslation self, PyOrientation other):             # <<<<<<<<<<<<<<
 *         tr = PyTranslation()
 *         tr.translation = self.translation * other.orientation
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_15__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_15__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "self", 0))) __PYX_ERR(0, 554, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "other", 0))) __PYX_ERR(0, 554, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_14__mul__(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_14__mul__(struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_other) {
  struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pyzed/core.pyx":555
 * 
 *     def __mul__(PyTranslation self, PyOrientation other):
 *         tr = PyTranslation()             # <<<<<<<<<<<<<<
 *         tr.translation = self.translation * other.orientation
 *         return tr
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyTranslation), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tr = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":556
 *     def __mul__(PyTranslation self, PyOrientation other):
 *         tr = PyTranslation()
 *         tr.translation = self.translation * other.orientation             # <<<<<<<<<<<<<<
 *         return tr
 * 
 */
  __pyx_v_tr->translation = (__pyx_v_self->translation * __pyx_v_other->orientation);

  /* "pyzed/core.pyx":557
 *         tr = PyTranslation()
 *         tr.translation = self.translation * other.orientation
 *         return tr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_tr));
  __pyx_r = ((PyObject *)__pyx_v_tr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":554
 *         return arr
 * 
 *     def __mul__(PyTranslation self, PyOrientation other):             # <<<<<<<<<<<<<<
 *         tr = PyTranslation()
 *         tr.translation = self.translation * other.orientation
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTranslation.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyTranslation_16__reduce_cython__[] = "PyTranslation.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_16__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTranslation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyTranslation_18__setstate_cython__[] = "PyTranslation.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_13PyTranslation_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyTranslation_18__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyTranslation_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTranslation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":561
 * 
 * cdef class PyOrientation:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_13PyOrientation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_13PyOrientation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation___cinit__(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_13PyOrientation___cinit__(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":562
 * cdef class PyOrientation:
 *     def __cinit__(self):
 *         self.orientation = Orientation()             # <<<<<<<<<<<<<<
 * 
 *     def init_orientation(self, PyOrientation orient):
 */
  __pyx_v_self->orientation = sl::Orientation();

  /* "pyzed/core.pyx":561
 * 
 * cdef class PyOrientation:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":564
 *         self.orientation = Orientation()
 * 
 *     def init_orientation(self, PyOrientation orient):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation(orient.orientation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_3init_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_orient); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_2init_orientation[] = "PyOrientation.init_orientation(self, PyOrientation orient)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_3init_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_orient) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_orientation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_orient), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "orient", 0))) __PYX_ERR(0, 564, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_2init_orientation(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_orient));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_2init_orientation(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_orientation", 0);

  /* "pyzed/core.pyx":565
 * 
 *     def init_orientation(self, PyOrientation orient):
 *         self.orientation = Orientation(orient.orientation)             # <<<<<<<<<<<<<<
 * 
 *     def init_vector(self, float v0, float v1, float v2, float v3):
 */
  __pyx_v_self->orientation = sl::Orientation(__pyx_v_orient->orientation);

  /* "pyzed/core.pyx":564
 *         self.orientation = Orientation()
 * 
 *     def init_orientation(self, PyOrientation orient):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation(orient.orientation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":567
 *         self.orientation = Orientation(orient.orientation)
 * 
 *     def init_vector(self, float v0, float v1, float v2, float v3):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation(types.Vector4[float](v0, v1, v2, v3))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_5init_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_4init_vector[] = "PyOrientation.init_vector(self, float v0, float v1, float v2, float v3)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_5init_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_v0;
  float __pyx_v_v1;
  float __pyx_v_v2;
  float __pyx_v_v3;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v0,&__pyx_n_s_v1,&__pyx_n_s_v2,&__pyx_n_s_v3,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_vector", 1, 4, 4, 1); __PYX_ERR(0, 567, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_vector", 1, 4, 4, 2); __PYX_ERR(0, 567, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_vector", 1, 4, 4, 3); __PYX_ERR(0, 567, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_vector") < 0)) __PYX_ERR(0, 567, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_v0 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_v0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 567, __pyx_L3_error)
    __pyx_v_v1 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_v1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 567, __pyx_L3_error)
    __pyx_v_v2 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_v2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 567, __pyx_L3_error)
    __pyx_v_v3 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_v3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 567, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_vector", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 567, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyOrientation.init_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_4init_vector(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self), __pyx_v_v0, __pyx_v_v1, __pyx_v_v2, __pyx_v_v3);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_4init_vector(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, float __pyx_v_v0, float __pyx_v_v1, float __pyx_v_v2, float __pyx_v_v3) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_vector", 0);

  /* "pyzed/core.pyx":568
 * 
 *     def init_vector(self, float v0, float v1, float v2, float v3):
 *         self.orientation = Orientation(types.Vector4[float](v0, v1, v2, v3))             # <<<<<<<<<<<<<<
 * 
 *     def init_rotation(self, PyRotation rotation):
 */
  __pyx_v_self->orientation = sl::Orientation(sl::Vector4<float> (__pyx_v_v0, __pyx_v_v1, __pyx_v_v2, __pyx_v_v3));

  /* "pyzed/core.pyx":567
 *         self.orientation = Orientation(orient.orientation)
 * 
 *     def init_vector(self, float v0, float v1, float v2, float v3):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation(types.Vector4[float](v0, v1, v2, v3))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":570
 *         self.orientation = Orientation(types.Vector4[float](v0, v1, v2, v3))
 * 
 *     def init_rotation(self, PyRotation rotation):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation(rotation.rotation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_7init_rotation(PyObject *__pyx_v_self, PyObject *__pyx_v_rotation); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_6init_rotation[] = "PyOrientation.init_rotation(self, PyRotation rotation)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_7init_rotation(PyObject *__pyx_v_self, PyObject *__pyx_v_rotation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_rotation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rotation), __pyx_ptype_5pyzed_4core_PyRotation, 1, "rotation", 0))) __PYX_ERR(0, 570, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_6init_rotation(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_rotation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_6init_rotation(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_rotation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_rotation", 0);

  /* "pyzed/core.pyx":571
 * 
 *     def init_rotation(self, PyRotation rotation):
 *         self.orientation = Orientation(rotation.rotation)             # <<<<<<<<<<<<<<
 * 
 *     def init_translation(self, PyTranslation tr1, PyTranslation tr2):
 */
  __pyx_v_self->orientation = sl::Orientation(__pyx_v_rotation->rotation);

  /* "pyzed/core.pyx":570
 *         self.orientation = Orientation(types.Vector4[float](v0, v1, v2, v3))
 * 
 *     def init_rotation(self, PyRotation rotation):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation(rotation.rotation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":573
 *         self.orientation = Orientation(rotation.rotation)
 * 
 *     def init_translation(self, PyTranslation tr1, PyTranslation tr2):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation(tr1.translation, tr2.translation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_9init_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_8init_translation[] = "PyOrientation.init_translation(self, PyTranslation tr1, PyTranslation tr2)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_9init_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr1 = 0;
  struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_translation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tr1,&__pyx_n_s_tr2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tr1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tr2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_translation", 1, 2, 2, 1); __PYX_ERR(0, 573, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_translation") < 0)) __PYX_ERR(0, 573, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_tr1 = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)values[0]);
    __pyx_v_tr2 = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_translation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 573, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyOrientation.init_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tr1), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "tr1", 0))) __PYX_ERR(0, 573, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tr2), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "tr2", 0))) __PYX_ERR(0, 573, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_8init_translation(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self), __pyx_v_tr1, __pyx_v_tr2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_8init_translation(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr1, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_translation", 0);

  /* "pyzed/core.pyx":574
 * 
 *     def init_translation(self, PyTranslation tr1, PyTranslation tr2):
 *         self.orientation = Orientation(tr1.translation, tr2.translation)             # <<<<<<<<<<<<<<
 * 
 *     def set_rotation_matrix(self, PyRotation py_rotation):
 */
  __pyx_v_self->orientation = sl::Orientation(__pyx_v_tr1->translation, __pyx_v_tr2->translation);

  /* "pyzed/core.pyx":573
 *         self.orientation = Orientation(rotation.rotation)
 * 
 *     def init_translation(self, PyTranslation tr1, PyTranslation tr2):             # <<<<<<<<<<<<<<
 *         self.orientation = Orientation(tr1.translation, tr2.translation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":576
 *         self.orientation = Orientation(tr1.translation, tr2.translation)
 * 
 *     def set_rotation_matrix(self, PyRotation py_rotation):             # <<<<<<<<<<<<<<
 *        self.orientation.setRotationMatrix(py_rotation.rotation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_11set_rotation_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_py_rotation); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_10set_rotation_matrix[] = "PyOrientation.set_rotation_matrix(self, PyRotation py_rotation)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_11set_rotation_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_py_rotation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_matrix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_rotation), __pyx_ptype_5pyzed_4core_PyRotation, 1, "py_rotation", 0))) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_10set_rotation_matrix(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_py_rotation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_10set_rotation_matrix(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_py_rotation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_matrix", 0);

  /* "pyzed/core.pyx":577
 * 
 *     def set_rotation_matrix(self, PyRotation py_rotation):
 *        self.orientation.setRotationMatrix(py_rotation.rotation)             # <<<<<<<<<<<<<<
 * 
 *     def get_rotation_matrix(self):
 */
  __pyx_v_self->orientation.setRotationMatrix(__pyx_v_py_rotation->rotation);

  /* "pyzed/core.pyx":576
 *         self.orientation = Orientation(tr1.translation, tr2.translation)
 * 
 *     def set_rotation_matrix(self, PyRotation py_rotation):             # <<<<<<<<<<<<<<
 *        self.orientation.setRotationMatrix(py_rotation.rotation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":579
 *        self.orientation.setRotationMatrix(py_rotation.rotation)
 * 
 *     def get_rotation_matrix(self):             # <<<<<<<<<<<<<<
 *         py_rotation = PyRotation()
 *         py_rotation.mat = self.orientation.getRotationMatrix()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_13get_rotation_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_12get_rotation_matrix[] = "PyOrientation.get_rotation_matrix(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_13get_rotation_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rotation_matrix (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_12get_rotation_matrix(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_12get_rotation_matrix(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_py_rotation = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_rotation_matrix", 0);

  /* "pyzed/core.pyx":580
 * 
 *     def get_rotation_matrix(self):
 *         py_rotation = PyRotation()             # <<<<<<<<<<<<<<
 *         py_rotation.mat = self.orientation.getRotationMatrix()
 *         return py_rotation
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyRotation), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_rotation = ((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":581
 *     def get_rotation_matrix(self):
 *         py_rotation = PyRotation()
 *         py_rotation.mat = self.orientation.getRotationMatrix()             # <<<<<<<<<<<<<<
 *         return py_rotation
 * 
 */
  __pyx_v_py_rotation->__pyx_base.mat = __pyx_v_self->orientation.getRotationMatrix();

  /* "pyzed/core.pyx":582
 *         py_rotation = PyRotation()
 *         py_rotation.mat = self.orientation.getRotationMatrix()
 *         return py_rotation             # <<<<<<<<<<<<<<
 * 
 *     def set_identity(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_rotation));
  __pyx_r = ((PyObject *)__pyx_v_py_rotation);
  goto __pyx_L0;

  /* "pyzed/core.pyx":579
 *        self.orientation.setRotationMatrix(py_rotation.rotation)
 * 
 *     def get_rotation_matrix(self):             # <<<<<<<<<<<<<<
 *         py_rotation = PyRotation()
 *         py_rotation.mat = self.orientation.getRotationMatrix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyOrientation.get_rotation_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_rotation);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":584
 *         return py_rotation
 * 
 *     def set_identity(self):             # <<<<<<<<<<<<<<
 *         self.orientation.setIdentity()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_15set_identity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_14set_identity[] = "PyOrientation.set_identity(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_15set_identity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_identity (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_14set_identity(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_14set_identity(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_identity", 0);

  /* "pyzed/core.pyx":585
 * 
 *     def set_identity(self):
 *         self.orientation.setIdentity()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->orientation.setIdentity();

  /* "pyzed/core.pyx":586
 *     def set_identity(self):
 *         self.orientation.setIdentity()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def identity(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyzed/core.pyx":584
 *         return py_rotation
 * 
 *     def set_identity(self):             # <<<<<<<<<<<<<<
 *         self.orientation.setIdentity()
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":588
 *         return self
 * 
 *     def identity(self):             # <<<<<<<<<<<<<<
 *         self.orientation.identity()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_17identity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_16identity[] = "PyOrientation.identity(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_17identity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identity (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_16identity(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_16identity(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identity", 0);

  /* "pyzed/core.pyx":589
 * 
 *     def identity(self):
 *         self.orientation.identity()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->orientation.identity();

  /* "pyzed/core.pyx":590
 *     def identity(self):
 *         self.orientation.identity()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def set_zeros(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyzed/core.pyx":588
 *         return self
 * 
 *     def identity(self):             # <<<<<<<<<<<<<<
 *         self.orientation.identity()
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":592
 *         return self
 * 
 *     def set_zeros(self):             # <<<<<<<<<<<<<<
 *         self.orientation.setZeros()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_19set_zeros(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_18set_zeros[] = "PyOrientation.set_zeros(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_19set_zeros(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_zeros (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_18set_zeros(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_18set_zeros(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_zeros", 0);

  /* "pyzed/core.pyx":593
 * 
 *     def set_zeros(self):
 *         self.orientation.setZeros()             # <<<<<<<<<<<<<<
 * 
 *     def zeros(self):
 */
  __pyx_v_self->orientation.setZeros();

  /* "pyzed/core.pyx":592
 *         return self
 * 
 *     def set_zeros(self):             # <<<<<<<<<<<<<<
 *         self.orientation.setZeros()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":595
 *         self.orientation.setZeros()
 * 
 *     def zeros(self):             # <<<<<<<<<<<<<<
 *         self.orientation.zeros()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_21zeros(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_20zeros[] = "PyOrientation.zeros(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_21zeros(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zeros (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_20zeros(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_20zeros(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zeros", 0);

  /* "pyzed/core.pyx":596
 * 
 *     def zeros(self):
 *         self.orientation.zeros()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->orientation.zeros();

  /* "pyzed/core.pyx":597
 *     def zeros(self):
 *         self.orientation.zeros()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def normalize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyzed/core.pyx":595
 *         self.orientation.setZeros()
 * 
 *     def zeros(self):             # <<<<<<<<<<<<<<
 *         self.orientation.zeros()
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":599
 *         return self
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         self.orientation.normalise()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_23normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_22normalize[] = "PyOrientation.normalize(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_23normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_22normalize(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_22normalize(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);

  /* "pyzed/core.pyx":600
 * 
 *     def normalize(self):
 *         self.orientation.normalise()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->orientation.normalise();

  /* "pyzed/core.pyx":599
 *         return self
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         self.orientation.normalise()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":603
 * 
 *     @staticmethod
 *     def normalize_orientation(PyOrientation orient):             # <<<<<<<<<<<<<<
 *         orient.orientation.normalise()
 *         return orient
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_25normalize_orientation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_24normalize_orientation[] = "PyOrientation.normalize_orientation(PyOrientation orient)";
static PyMethodDef __pyx_mdef_5pyzed_4core_13PyOrientation_25normalize_orientation = {"normalize_orientation", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_25normalize_orientation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_13PyOrientation_24normalize_orientation};
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_25normalize_orientation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize_orientation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_orient,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_orient)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normalize_orientation") < 0)) __PYX_ERR(0, 603, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_orient = ((struct __pyx_obj_5pyzed_4core_PyOrientation *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalize_orientation", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 603, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyOrientation.normalize_orientation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_orient), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "orient", 0))) __PYX_ERR(0, 603, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_24normalize_orientation(__pyx_v_orient);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_24normalize_orientation(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize_orientation", 0);

  /* "pyzed/core.pyx":604
 *     @staticmethod
 *     def normalize_orientation(PyOrientation orient):
 *         orient.orientation.normalise()             # <<<<<<<<<<<<<<
 *         return orient
 * 
 */
  __pyx_v_orient->orientation.normalise();

  /* "pyzed/core.pyx":605
 *     def normalize_orientation(PyOrientation orient):
 *         orient.orientation.normalise()
 *         return orient             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_orient));
  __pyx_r = ((PyObject *)__pyx_v_orient);
  goto __pyx_L0;

  /* "pyzed/core.pyx":603
 * 
 *     @staticmethod
 *     def normalize_orientation(PyOrientation orient):             # <<<<<<<<<<<<<<
 *         orient.orientation.normalise()
 *         return orient
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":607
 *         return orient
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.orientation.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_27size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_26size[] = "PyOrientation.size(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_27size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_26size(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_26size(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("size", 0);

  /* "pyzed/core.pyx":608
 * 
 *     def size(self):
 *         return self.orientation.size()             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->orientation.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":607
 *         return orient
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.orientation.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyOrientation.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":610
 *         return self.orientation.size()
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_29get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_28get[] = "PyOrientation.get(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_29get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_28get(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_28get(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  PyArrayObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("get", 0);

  /* "pyzed/core.pyx":611
 * 
 *     def get(self):
 *         cdef np.ndarray arr = np.zeros(self.size())             # <<<<<<<<<<<<<<
 *         for i in range(self.size()):
 *             arr[i] = <float>self.orientation(i)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 611, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":612
 *     def get(self):
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             arr[i] = <float>self.orientation(i)
 *         return arr
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 612, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 612, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 612, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 612, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzed/core.pyx":613
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):
 *             arr[i] = <float>self.orientation(i)             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(((float)__pyx_v_self->orientation(__pyx_t_8))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1) < 0)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyzed/core.pyx":612
 *     def get(self):
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             arr[i] = <float>self.orientation(i)
 *         return arr
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyzed/core.pyx":614
 *         for i in range(self.size()):
 *             arr[i] = <float>self.orientation(i)
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(PyOrientation self, PyOrientation other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":610
 *         return self.orientation.size()
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(self.size())
 *         for i in range(self.size()):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.core.PyOrientation.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":616
 *         return arr
 * 
 *     def __mul__(PyOrientation self, PyOrientation other):             # <<<<<<<<<<<<<<
 *         orient = PyOrientation()
 *         orient.orientation = self.orientation * other.orientation
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_31__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_31__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "self", 0))) __PYX_ERR(0, 616, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "other", 0))) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_30__mul__(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_30__mul__(struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_other) {
  struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pyzed/core.pyx":617
 * 
 *     def __mul__(PyOrientation self, PyOrientation other):
 *         orient = PyOrientation()             # <<<<<<<<<<<<<<
 *         orient.orientation = self.orientation * other.orientation
 *         return orient
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyOrientation), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_orient = ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":618
 *     def __mul__(PyOrientation self, PyOrientation other):
 *         orient = PyOrientation()
 *         orient.orientation = self.orientation * other.orientation             # <<<<<<<<<<<<<<
 *         return orient
 * 
 */
  __pyx_v_orient->orientation = (__pyx_v_self->orientation * __pyx_v_other->orientation);

  /* "pyzed/core.pyx":619
 *         orient = PyOrientation()
 *         orient.orientation = self.orientation * other.orientation
 *         return orient             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_orient));
  __pyx_r = ((PyObject *)__pyx_v_orient);
  goto __pyx_L0;

  /* "pyzed/core.pyx":616
 *         return arr
 * 
 *     def __mul__(PyOrientation self, PyOrientation other):             # <<<<<<<<<<<<<<
 *         orient = PyOrientation()
 *         orient.orientation = self.orientation * other.orientation
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyOrientation.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_orient);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_32__reduce_cython__[] = "PyOrientation.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_32__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyOrientation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_13PyOrientation_34__setstate_cython__[] = "PyOrientation.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_13PyOrientation_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_13PyOrientation_34__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_13PyOrientation_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyOrientation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":623
 * 
 * cdef class PyTransform(types.PyMatrix4f):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.transform = Transform()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_11PyTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_11PyTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform___cinit__(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_11PyTransform___cinit__(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":624
 * cdef class PyTransform(types.PyMatrix4f):
 *     def __cinit__(self):
 *         self.transform = Transform()             # <<<<<<<<<<<<<<
 * 
 *     def init_transform(self, PyTransform motion):
 */
  __pyx_v_self->transform = sl::Transform();

  /* "pyzed/core.pyx":623
 * 
 * cdef class PyTransform(types.PyMatrix4f):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.transform = Transform()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":626
 *         self.transform = Transform()
 * 
 *     def init_transform(self, PyTransform motion):             # <<<<<<<<<<<<<<
 *         self.transform = Transform(motion.transform)
 *         self.mat = motion.mat
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_3init_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_motion); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_2init_transform[] = "PyTransform.init_transform(self, PyTransform motion)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_3init_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_motion) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_transform (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_motion), __pyx_ptype_5pyzed_4core_PyTransform, 1, "motion", 0))) __PYX_ERR(0, 626, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_2init_transform(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_motion));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_2init_transform(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_motion) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sl::Matrix4f __pyx_t_1;
  __Pyx_RefNannySetupContext("init_transform", 0);

  /* "pyzed/core.pyx":627
 * 
 *     def init_transform(self, PyTransform motion):
 *         self.transform = Transform(motion.transform)             # <<<<<<<<<<<<<<
 *         self.mat = motion.mat
 * 
 */
  __pyx_v_self->transform = sl::Transform(__pyx_v_motion->transform);

  /* "pyzed/core.pyx":628
 *     def init_transform(self, PyTransform motion):
 *         self.transform = Transform(motion.transform)
 *         self.mat = motion.mat             # <<<<<<<<<<<<<<
 * 
 *     def init_matrix(self, types.PyMatrix4f matrix):
 */
  __pyx_t_1 = __pyx_v_motion->__pyx_base.mat;
  __pyx_v_self->__pyx_base.mat = __pyx_t_1;

  /* "pyzed/core.pyx":626
 *         self.transform = Transform()
 * 
 *     def init_transform(self, PyTransform motion):             # <<<<<<<<<<<<<<
 *         self.transform = Transform(motion.transform)
 *         self.mat = motion.mat
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":630
 *         self.mat = motion.mat
 * 
 *     def init_matrix(self, types.PyMatrix4f matrix):             # <<<<<<<<<<<<<<
 *         self.transform = Transform(matrix.mat)
 *         self.mat = matrix.mat
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_5init_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_4init_matrix[] = "PyTransform.init_matrix(self, PyMatrix4f matrix)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_5init_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_matrix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_5pyzed_5types_PyMatrix4f, 1, "matrix", 0))) __PYX_ERR(0, 630, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_4init_matrix(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), ((struct __pyx_obj_5pyzed_5types_PyMatrix4f *)__pyx_v_matrix));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_4init_matrix(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_5types_PyMatrix4f *__pyx_v_matrix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sl::Matrix4f __pyx_t_1;
  __Pyx_RefNannySetupContext("init_matrix", 0);

  /* "pyzed/core.pyx":631
 * 
 *     def init_matrix(self, types.PyMatrix4f matrix):
 *         self.transform = Transform(matrix.mat)             # <<<<<<<<<<<<<<
 *         self.mat = matrix.mat
 * 
 */
  __pyx_v_self->transform = sl::Transform(__pyx_v_matrix->mat);

  /* "pyzed/core.pyx":632
 *     def init_matrix(self, types.PyMatrix4f matrix):
 *         self.transform = Transform(matrix.mat)
 *         self.mat = matrix.mat             # <<<<<<<<<<<<<<
 * 
 *     def init_rotation_translation(self, PyRotation rot, PyTranslation tr):
 */
  __pyx_t_1 = __pyx_v_matrix->mat;
  __pyx_v_self->__pyx_base.mat = __pyx_t_1;

  /* "pyzed/core.pyx":630
 *         self.mat = motion.mat
 * 
 *     def init_matrix(self, types.PyMatrix4f matrix):             # <<<<<<<<<<<<<<
 *         self.transform = Transform(matrix.mat)
 *         self.mat = matrix.mat
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":634
 *         self.mat = matrix.mat
 * 
 *     def init_rotation_translation(self, PyRotation rot, PyTranslation tr):             # <<<<<<<<<<<<<<
 *         self.transform = Transform(rot.rotation, tr.translation)
 *         self.mat = types.Matrix4f(self.transform.m)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_7init_rotation_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_6init_rotation_translation[] = "PyTransform.init_rotation_translation(self, PyRotation rot, PyTranslation tr)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_7init_rotation_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_rot = 0;
  struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_rotation_translation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rot,&__pyx_n_s_tr,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rot)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_rotation_translation", 1, 2, 2, 1); __PYX_ERR(0, 634, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_rotation_translation") < 0)) __PYX_ERR(0, 634, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_rot = ((struct __pyx_obj_5pyzed_4core_PyRotation *)values[0]);
    __pyx_v_tr = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_rotation_translation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 634, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyTransform.init_rotation_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rot), __pyx_ptype_5pyzed_4core_PyRotation, 1, "rot", 0))) __PYX_ERR(0, 634, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tr), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "tr", 0))) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_6init_rotation_translation(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), __pyx_v_rot, __pyx_v_tr);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_6init_rotation_translation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_rot, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_rotation_translation", 0);

  /* "pyzed/core.pyx":635
 * 
 *     def init_rotation_translation(self, PyRotation rot, PyTranslation tr):
 *         self.transform = Transform(rot.rotation, tr.translation)             # <<<<<<<<<<<<<<
 *         self.mat = types.Matrix4f(self.transform.m)
 * 
 */
  __pyx_v_self->transform = sl::Transform(__pyx_v_rot->rotation, __pyx_v_tr->translation);

  /* "pyzed/core.pyx":636
 *     def init_rotation_translation(self, PyRotation rot, PyTranslation tr):
 *         self.transform = Transform(rot.rotation, tr.translation)
 *         self.mat = types.Matrix4f(self.transform.m)             # <<<<<<<<<<<<<<
 * 
 *     def init_orientation_translation(self, PyOrientation orient, PyTranslation tr):
 */
  __pyx_v_self->__pyx_base.mat = sl::Matrix4f(__pyx_v_self->transform.m);

  /* "pyzed/core.pyx":634
 *         self.mat = matrix.mat
 * 
 *     def init_rotation_translation(self, PyRotation rot, PyTranslation tr):             # <<<<<<<<<<<<<<
 *         self.transform = Transform(rot.rotation, tr.translation)
 *         self.mat = types.Matrix4f(self.transform.m)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":638
 *         self.mat = types.Matrix4f(self.transform.m)
 * 
 *     def init_orientation_translation(self, PyOrientation orient, PyTranslation tr):             # <<<<<<<<<<<<<<
 *         self.transform = Transform(orient.orientation, tr.translation)
 *         self.mat = types.Matrix4f(self.transform.m)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_9init_orientation_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_8init_orientation_translation[] = "PyTransform.init_orientation_translation(self, PyOrientation orient, PyTranslation tr)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_9init_orientation_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient = 0;
  struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_orientation_translation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_orient,&__pyx_n_s_tr,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_orient)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_orientation_translation", 1, 2, 2, 1); __PYX_ERR(0, 638, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_orientation_translation") < 0)) __PYX_ERR(0, 638, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_orient = ((struct __pyx_obj_5pyzed_4core_PyOrientation *)values[0]);
    __pyx_v_tr = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_orientation_translation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 638, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyTransform.init_orientation_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_orient), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "orient", 0))) __PYX_ERR(0, 638, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tr), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "tr", 0))) __PYX_ERR(0, 638, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_8init_orientation_translation(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), __pyx_v_orient, __pyx_v_tr);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_8init_orientation_translation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_orient, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_tr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_orientation_translation", 0);

  /* "pyzed/core.pyx":639
 * 
 *     def init_orientation_translation(self, PyOrientation orient, PyTranslation tr):
 *         self.transform = Transform(orient.orientation, tr.translation)             # <<<<<<<<<<<<<<
 *         self.mat = types.Matrix4f(self.transform.m)
 * 
 */
  __pyx_v_self->transform = sl::Transform(__pyx_v_orient->orientation, __pyx_v_tr->translation);

  /* "pyzed/core.pyx":640
 *     def init_orientation_translation(self, PyOrientation orient, PyTranslation tr):
 *         self.transform = Transform(orient.orientation, tr.translation)
 *         self.mat = types.Matrix4f(self.transform.m)             # <<<<<<<<<<<<<<
 * 
 *     def set_rotation_matrix(self, PyRotation py_rotation):
 */
  __pyx_v_self->__pyx_base.mat = sl::Matrix4f(__pyx_v_self->transform.m);

  /* "pyzed/core.pyx":638
 *         self.mat = types.Matrix4f(self.transform.m)
 * 
 *     def init_orientation_translation(self, PyOrientation orient, PyTranslation tr):             # <<<<<<<<<<<<<<
 *         self.transform = Transform(orient.orientation, tr.translation)
 *         self.mat = types.Matrix4f(self.transform.m)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":642
 *         self.mat = types.Matrix4f(self.transform.m)
 * 
 *     def set_rotation_matrix(self, PyRotation py_rotation):             # <<<<<<<<<<<<<<
 *         self.transform.setRotationMatrix(<Rotation>py_rotation.mat)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_11set_rotation_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_py_rotation); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_10set_rotation_matrix[] = "PyTransform.set_rotation_matrix(self, PyRotation py_rotation)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_11set_rotation_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_py_rotation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_matrix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_rotation), __pyx_ptype_5pyzed_4core_PyRotation, 1, "py_rotation", 0))) __PYX_ERR(0, 642, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_10set_rotation_matrix(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_v_py_rotation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_10set_rotation_matrix(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_py_rotation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_matrix", 0);

  /* "pyzed/core.pyx":643
 * 
 *     def set_rotation_matrix(self, PyRotation py_rotation):
 *         self.transform.setRotationMatrix(<Rotation>py_rotation.mat)             # <<<<<<<<<<<<<<
 * 
 *     def get_rotation_matrix(self):
 */
  __pyx_v_self->transform.setRotationMatrix(((sl::Rotation)__pyx_v_py_rotation->__pyx_base.mat));

  /* "pyzed/core.pyx":642
 *         self.mat = types.Matrix4f(self.transform.m)
 * 
 *     def set_rotation_matrix(self, PyRotation py_rotation):             # <<<<<<<<<<<<<<
 *         self.transform.setRotationMatrix(<Rotation>py_rotation.mat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":645
 *         self.transform.setRotationMatrix(<Rotation>py_rotation.mat)
 * 
 *     def get_rotation_matrix(self):             # <<<<<<<<<<<<<<
 *         py_rotation = PyRotation()
 *         py_rotation.mat = self.transform.getRotationMatrix()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_13get_rotation_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_12get_rotation_matrix[] = "PyTransform.get_rotation_matrix(self)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_13get_rotation_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rotation_matrix (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_12get_rotation_matrix(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_12get_rotation_matrix(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self) {
  struct __pyx_obj_5pyzed_4core_PyRotation *__pyx_v_py_rotation = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_rotation_matrix", 0);

  /* "pyzed/core.pyx":646
 * 
 *     def get_rotation_matrix(self):
 *         py_rotation = PyRotation()             # <<<<<<<<<<<<<<
 *         py_rotation.mat = self.transform.getRotationMatrix()
 *         return py_rotation
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyRotation), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_rotation = ((struct __pyx_obj_5pyzed_4core_PyRotation *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":647
 *     def get_rotation_matrix(self):
 *         py_rotation = PyRotation()
 *         py_rotation.mat = self.transform.getRotationMatrix()             # <<<<<<<<<<<<<<
 *         return py_rotation
 * 
 */
  __pyx_v_py_rotation->__pyx_base.mat = __pyx_v_self->transform.getRotationMatrix();

  /* "pyzed/core.pyx":648
 *         py_rotation = PyRotation()
 *         py_rotation.mat = self.transform.getRotationMatrix()
 *         return py_rotation             # <<<<<<<<<<<<<<
 * 
 *     def set_translation(self, PyTranslation py_translation):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_rotation));
  __pyx_r = ((PyObject *)__pyx_v_py_rotation);
  goto __pyx_L0;

  /* "pyzed/core.pyx":645
 *         self.transform.setRotationMatrix(<Rotation>py_rotation.mat)
 * 
 *     def get_rotation_matrix(self):             # <<<<<<<<<<<<<<
 *         py_rotation = PyRotation()
 *         py_rotation.mat = self.transform.getRotationMatrix()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTransform.get_rotation_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_rotation);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":650
 *         return py_rotation
 * 
 *     def set_translation(self, PyTranslation py_translation):             # <<<<<<<<<<<<<<
 *         self.transform.setTranslation(py_translation.translation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_15set_translation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_translation); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_14set_translation[] = "PyTransform.set_translation(self, PyTranslation py_translation)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_15set_translation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_translation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_translation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_translation), __pyx_ptype_5pyzed_4core_PyTranslation, 1, "py_translation", 0))) __PYX_ERR(0, 650, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_14set_translation(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_v_py_translation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_14set_translation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_py_translation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_translation", 0);

  /* "pyzed/core.pyx":651
 * 
 *     def set_translation(self, PyTranslation py_translation):
 *         self.transform.setTranslation(py_translation.translation)             # <<<<<<<<<<<<<<
 * 
 *     def get_translation(self):
 */
  __pyx_v_self->transform.setTranslation(__pyx_v_py_translation->translation);

  /* "pyzed/core.pyx":650
 *         return py_rotation
 * 
 *     def set_translation(self, PyTranslation py_translation):             # <<<<<<<<<<<<<<
 *         self.transform.setTranslation(py_translation.translation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":653
 *         self.transform.setTranslation(py_translation.translation)
 * 
 *     def get_translation(self):             # <<<<<<<<<<<<<<
 *         py_translation = PyTranslation()
 *         py_translation.translation = self.transform.getTranslation()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_17get_translation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_16get_translation[] = "PyTransform.get_translation(self)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_17get_translation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_translation (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_16get_translation(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_16get_translation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self) {
  struct __pyx_obj_5pyzed_4core_PyTranslation *__pyx_v_py_translation = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_translation", 0);

  /* "pyzed/core.pyx":654
 * 
 *     def get_translation(self):
 *         py_translation = PyTranslation()             # <<<<<<<<<<<<<<
 *         py_translation.translation = self.transform.getTranslation()
 *         return py_translation
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyTranslation), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_translation = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":655
 *     def get_translation(self):
 *         py_translation = PyTranslation()
 *         py_translation.translation = self.transform.getTranslation()             # <<<<<<<<<<<<<<
 *         return py_translation
 * 
 */
  __pyx_v_py_translation->translation = __pyx_v_self->transform.getTranslation();

  /* "pyzed/core.pyx":656
 *         py_translation = PyTranslation()
 *         py_translation.translation = self.transform.getTranslation()
 *         return py_translation             # <<<<<<<<<<<<<<
 * 
 *     def set_orientation(self, PyOrientation py_orientation):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_translation));
  __pyx_r = ((PyObject *)__pyx_v_py_translation);
  goto __pyx_L0;

  /* "pyzed/core.pyx":653
 *         self.transform.setTranslation(py_translation.translation)
 * 
 *     def get_translation(self):             # <<<<<<<<<<<<<<
 *         py_translation = PyTranslation()
 *         py_translation.translation = self.transform.getTranslation()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTransform.get_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_translation);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":658
 *         return py_translation
 * 
 *     def set_orientation(self, PyOrientation py_orientation):             # <<<<<<<<<<<<<<
 *         self.transform.setOrientation(py_orientation.orientation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_19set_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_orientation); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_18set_orientation[] = "PyTransform.set_orientation(self, PyOrientation py_orientation)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_19set_orientation(PyObject *__pyx_v_self, PyObject *__pyx_v_py_orientation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_orientation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_orientation), __pyx_ptype_5pyzed_4core_PyOrientation, 1, "py_orientation", 0))) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_18set_orientation(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_v_py_orientation));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_18set_orientation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_py_orientation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_orientation", 0);

  /* "pyzed/core.pyx":659
 * 
 *     def set_orientation(self, PyOrientation py_orientation):
 *         self.transform.setOrientation(py_orientation.orientation)             # <<<<<<<<<<<<<<
 * 
 *     def get_orientation(self):
 */
  __pyx_v_self->transform.setOrientation(__pyx_v_py_orientation->orientation);

  /* "pyzed/core.pyx":658
 *         return py_translation
 * 
 *     def set_orientation(self, PyOrientation py_orientation):             # <<<<<<<<<<<<<<
 *         self.transform.setOrientation(py_orientation.orientation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":661
 *         self.transform.setOrientation(py_orientation.orientation)
 * 
 *     def get_orientation(self):             # <<<<<<<<<<<<<<
 *         py_orientation = PyOrientation()
 *         py_orientation.orientation = self.transform.getOrientation()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_21get_orientation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_20get_orientation[] = "PyTransform.get_orientation(self)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_21get_orientation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orientation (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_20get_orientation(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_20get_orientation(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self) {
  struct __pyx_obj_5pyzed_4core_PyOrientation *__pyx_v_py_orientation = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_orientation", 0);

  /* "pyzed/core.pyx":662
 * 
 *     def get_orientation(self):
 *         py_orientation = PyOrientation()             # <<<<<<<<<<<<<<
 *         py_orientation.orientation = self.transform.getOrientation()
 *         return py_orientation
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyOrientation), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_orientation = ((struct __pyx_obj_5pyzed_4core_PyOrientation *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":663
 *     def get_orientation(self):
 *         py_orientation = PyOrientation()
 *         py_orientation.orientation = self.transform.getOrientation()             # <<<<<<<<<<<<<<
 *         return py_orientation
 * 
 */
  __pyx_v_py_orientation->orientation = __pyx_v_self->transform.getOrientation();

  /* "pyzed/core.pyx":664
 *         py_orientation = PyOrientation()
 *         py_orientation.orientation = self.transform.getOrientation()
 *         return py_orientation             # <<<<<<<<<<<<<<
 * 
 *     def get_rotation_vector(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_orientation));
  __pyx_r = ((PyObject *)__pyx_v_py_orientation);
  goto __pyx_L0;

  /* "pyzed/core.pyx":661
 *         self.transform.setOrientation(py_orientation.orientation)
 * 
 *     def get_orientation(self):             # <<<<<<<<<<<<<<
 *         py_orientation = PyOrientation()
 *         py_orientation.orientation = self.transform.getOrientation()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTransform.get_orientation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_orientation);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":666
 *         return py_orientation
 * 
 *     def get_rotation_vector(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_23get_rotation_vector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_22get_rotation_vector[] = "PyTransform.get_rotation_vector(self)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_23get_rotation_vector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rotation_vector (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_22get_rotation_vector(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_22get_rotation_vector(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self) {
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  __Pyx_RefNannySetupContext("get_rotation_vector", 0);

  /* "pyzed/core.pyx":667
 * 
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.transform.getRotationVector()[i]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 667, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":668
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             arr[i] = self.transform.getRotationVector()[i]
 *         return arr
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyzed/core.pyx":669
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 *             arr[i] = self.transform.getRotationVector()[i]             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->transform.getRotationVector()[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyzed/core.pyx":670
 *         for i in range(3):
 *             arr[i] = self.transform.getRotationVector()[i]
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def set_rotation_vector(self, float input0, float input1, float input2):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":666
 *         return py_orientation
 * 
 *     def get_rotation_vector(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         for i in range(3):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyTransform.get_rotation_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":672
 *         return arr
 * 
 *     def set_rotation_vector(self, float input0, float input1, float input2):             # <<<<<<<<<<<<<<
 *         self.transform.setRotationVector(types.Vector3[float](input0, input1, input2))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_25set_rotation_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_24set_rotation_vector[] = "PyTransform.set_rotation_vector(self, float input0, float input1, float input2)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_25set_rotation_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_input0;
  float __pyx_v_input1;
  float __pyx_v_input2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input0,&__pyx_n_s_input1,&__pyx_n_s_input2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_rotation_vector", 1, 3, 3, 1); __PYX_ERR(0, 672, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_rotation_vector", 1, 3, 3, 2); __PYX_ERR(0, 672, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_rotation_vector") < 0)) __PYX_ERR(0, 672, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_input0 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_input0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
    __pyx_v_input1 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_input1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
    __pyx_v_input2 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_input2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_rotation_vector", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 672, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyTransform.set_rotation_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_24set_rotation_vector(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), __pyx_v_input0, __pyx_v_input1, __pyx_v_input2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_24set_rotation_vector(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, float __pyx_v_input0, float __pyx_v_input1, float __pyx_v_input2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_vector", 0);

  /* "pyzed/core.pyx":673
 * 
 *     def set_rotation_vector(self, float input0, float input1, float input2):
 *         self.transform.setRotationVector(types.Vector3[float](input0, input1, input2))             # <<<<<<<<<<<<<<
 * 
 *     def get_euler_angles(self, radian=True):
 */
  __pyx_v_self->transform.setRotationVector(sl::Vector3<float> (__pyx_v_input0, __pyx_v_input1, __pyx_v_input2));

  /* "pyzed/core.pyx":672
 *         return arr
 * 
 *     def set_rotation_vector(self, float input0, float input1, float input2):             # <<<<<<<<<<<<<<
 *         self.transform.setRotationVector(types.Vector3[float](input0, input1, input2))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":675
 *         self.transform.setRotationVector(types.Vector3[float](input0, input1, input2))
 * 
 *     def get_euler_angles(self, radian=True):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_27get_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_26get_euler_angles[] = "PyTransform.get_euler_angles(self, radian=True)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_27get_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_radian = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_euler_angles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_radian,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radian);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_euler_angles") < 0)) __PYX_ERR(0, 675, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_radian = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_euler_angles", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 675, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyTransform.get_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_26get_euler_angles(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), __pyx_v_radian);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_26get_euler_angles(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, PyObject *__pyx_v_radian) {
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  bool __pyx_t_6;
  __Pyx_RefNannySetupContext("get_euler_angles", 0);

  /* "pyzed/core.pyx":676
 * 
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             for i in range(3):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 676, __pyx_L1_error)
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":677
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 arr[i] = self.transform.getEulerAngles(radian)[i]
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_radian, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pyzed/core.pyx":678
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 arr[i] = self.transform.getEulerAngles(radian)[i]
 *         else:
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "pyzed/core.pyx":679
 *         if isinstance(radian, bool):
 *             for i in range(3):
 *                 arr[i] = self.transform.getEulerAngles(radian)[i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of boolean type.")
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_radian); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L1_error)
      __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->transform.getEulerAngles(__pyx_t_6)[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_arr), __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "pyzed/core.pyx":677
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 arr[i] = self.transform.getEulerAngles(radian)[i]
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":681
 *                 arr[i] = self.transform.getEulerAngles(radian)[i]
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 681, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":682
 *         else:
 *             raise TypeError("Argument is not of boolean type.")
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, radian=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "pyzed/core.pyx":675
 *         self.transform.setRotationVector(types.Vector3[float](input0, input1, input2))
 * 
 *     def get_euler_angles(self, radian=True):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray arr = np.zeros(3)
 *         if isinstance(radian, bool):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzed.core.PyTransform.get_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":684
 *         return arr
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, radian=True):             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             self.transform.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_29set_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_28set_euler_angles[] = "PyTransform.set_euler_angles(self, float input0, float input1, float input2, radian=True)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_29set_euler_angles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_input0;
  float __pyx_v_input1;
  float __pyx_v_input2;
  PyObject *__pyx_v_radian = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_euler_angles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input0,&__pyx_n_s_input1,&__pyx_n_s_input2,&__pyx_n_s_radian,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_euler_angles", 0, 3, 4, 1); __PYX_ERR(0, 684, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_euler_angles", 0, 3, 4, 2); __PYX_ERR(0, 684, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radian);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_euler_angles") < 0)) __PYX_ERR(0, 684, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input0 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_input0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 684, __pyx_L3_error)
    __pyx_v_input1 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_input1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 684, __pyx_L3_error)
    __pyx_v_input2 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_input2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 684, __pyx_L3_error)
    __pyx_v_radian = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_euler_angles", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 684, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyTransform.set_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_28set_euler_angles(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), __pyx_v_input0, __pyx_v_input1, __pyx_v_input2, __pyx_v_radian);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_28set_euler_angles(struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, float __pyx_v_input0, float __pyx_v_input1, float __pyx_v_input2, PyObject *__pyx_v_radian) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("set_euler_angles", 0);

  /* "pyzed/core.pyx":685
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, radian=True):
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             self.transform.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_radian, __pyx_ptype_7cpython_4bool_bool); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzed/core.pyx":686
 *     def set_euler_angles(self, float input0, float input1, float input2, radian=True):
 *         if isinstance(radian, bool):
 *             self.transform.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument is not of boolean type.")
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_radian); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L1_error)
    __pyx_v_self->transform.setEulerAngles(sl::Vector3<float> (__pyx_v_input0, __pyx_v_input1, __pyx_v_input2), __pyx_t_3);

    /* "pyzed/core.pyx":685
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, radian=True):
 *         if isinstance(radian, bool):             # <<<<<<<<<<<<<<
 *             self.transform.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyzed/core.pyx":688
 *             self.transform.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 * 
 * cdef class PyTextureImage:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 688, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyzed/core.pyx":684
 *         return arr
 * 
 *     def set_euler_angles(self, float input0, float input1, float input2, radian=True):             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             self.transform.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzed.core.PyTransform.set_euler_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_31__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_30__reduce_cython__[] = "PyTransform.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_31__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_30__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_30__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTransform.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_33__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_11PyTransform_32__setstate_cython__[] = "PyTransform.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_11PyTransform_33__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_11PyTransform_32__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_11PyTransform_32__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTransform.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":692
 * cdef class PyTextureImage:
 *     cdef TextureImage* texture_img
 *     def __cinit__(self, PyMat py_mat, PyTransform py_transform):             # <<<<<<<<<<<<<<
 *         self.texture_img = new TextureImage(py_mat.mat, py_transform.transform)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_14PyTextureImage_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_14PyTextureImage_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat = 0;
  struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_py_transform = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_mat,&__pyx_n_s_py_transform,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_mat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_transform)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 692, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 692, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_py_mat = ((struct __pyx_obj_5pyzed_4core_PyMat *)values[0]);
    __pyx_v_py_transform = ((struct __pyx_obj_5pyzed_4core_PyTransform *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 692, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyTextureImage.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_mat), __pyx_ptype_5pyzed_4core_PyMat, 1, "py_mat", 0))) __PYX_ERR(0, 692, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_transform), __pyx_ptype_5pyzed_4core_PyTransform, 1, "py_transform", 0))) __PYX_ERR(0, 692, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_14PyTextureImage___cinit__(((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_v_self), __pyx_v_py_mat, __pyx_v_py_transform);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_14PyTextureImage___cinit__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_py_mat, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_py_transform) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":693
 *     cdef TextureImage* texture_img
 *     def __cinit__(self, PyMat py_mat, PyTransform py_transform):
 *         self.texture_img = new TextureImage(py_mat.mat, py_transform.transform)             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __pyx_v_self->texture_img = new sl::TextureImage(__pyx_v_py_mat->mat, __pyx_v_py_transform->transform);

  /* "pyzed/core.pyx":692
 * cdef class PyTextureImage:
 *     cdef TextureImage* texture_img
 *     def __cinit__(self, PyMat py_mat, PyTransform py_transform):             # <<<<<<<<<<<<<<
 *         self.texture_img = new TextureImage(py_mat.mat, py_transform.transform)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":695
 *         self.texture_img = new TextureImage(py_mat.mat, py_transform.transform)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.texture_img.clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_3clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_14PyTextureImage_2clear[] = "PyTextureImage.clear(self)";
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_3clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_14PyTextureImage_2clear(((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_2clear(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "pyzed/core.pyx":696
 * 
 *     def clear(self):
 *         self.texture_img.clear()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->texture_img->clear();

  /* "pyzed/core.pyx":695
 *         self.texture_img = new TextureImage(py_mat.mat, py_transform.transform)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.texture_img.clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":699
 * 
 *     @property
 *     def img(self):             # <<<<<<<<<<<<<<
 *         image = PyMat()
 *         image.mat = self.texture_img.img
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_3img_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_3img_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_14PyTextureImage_3img___get__(((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_3img___get__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_image = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::Mat __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":700
 *     @property
 *     def img(self):
 *         image = PyMat()             # <<<<<<<<<<<<<<
 *         image.mat = self.texture_img.img
 *         return image
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyMat), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_image = ((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":701
 *     def img(self):
 *         image = PyMat()
 *         image.mat = self.texture_img.img             # <<<<<<<<<<<<<<
 *         return image
 * 
 */
  __pyx_t_2 = __pyx_v_self->texture_img->img;
  __pyx_v_image->mat = __pyx_t_2;

  /* "pyzed/core.pyx":702
 *         image = PyMat()
 *         image.mat = self.texture_img.img
 *         return image             # <<<<<<<<<<<<<<
 * 
 *     @img.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_image));
  __pyx_r = ((PyObject *)__pyx_v_image);
  goto __pyx_L0;

  /* "pyzed/core.pyx":699
 * 
 *     @property
 *     def img(self):             # <<<<<<<<<<<<<<
 *         image = PyMat()
 *         image.mat = self.texture_img.img
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTextureImage.img.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_image);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":705
 * 
 *     @img.setter
 *     def img(self, PyMat image):             # <<<<<<<<<<<<<<
 *         self.texture_img.img = image.mat
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_14PyTextureImage_3img_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_image); /*proto*/
static int __pyx_pw_5pyzed_4core_14PyTextureImage_3img_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_image) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_image), __pyx_ptype_5pyzed_4core_PyMat, 1, "image", 0))) __PYX_ERR(0, 705, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_14PyTextureImage_3img_2__set__(((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_v_image));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_14PyTextureImage_3img_2__set__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_image) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  sl::Mat __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/core.pyx":706
 *     @img.setter
 *     def img(self, PyMat image):
 *         self.texture_img.img = image.mat             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_v_image->mat;
  __pyx_v_self->texture_img->img = __pyx_t_1;

  /* "pyzed/core.pyx":705
 * 
 *     @img.setter
 *     def img(self, PyMat image):             # <<<<<<<<<<<<<<
 *         self.texture_img.img = image.mat
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":709
 * 
 *     @property
 *     def path(self):             # <<<<<<<<<<<<<<
 *         texture_path = PyTransform()
 *         texture_path.transform = self.texture_img.path
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_4path_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_4path_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_14PyTextureImage_4path___get__(((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_4path___get__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self) {
  struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_texture_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::Transform __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":710
 *     @property
 *     def path(self):
 *         texture_path = PyTransform()             # <<<<<<<<<<<<<<
 *         texture_path.transform = self.texture_img.path
 *         return texture_path
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyTransform), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_texture_path = ((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":711
 *     def path(self):
 *         texture_path = PyTransform()
 *         texture_path.transform = self.texture_img.path             # <<<<<<<<<<<<<<
 *         return texture_path
 * 
 */
  __pyx_t_2 = __pyx_v_self->texture_img->path;
  __pyx_v_texture_path->transform = __pyx_t_2;

  /* "pyzed/core.pyx":712
 *         texture_path = PyTransform()
 *         texture_path.transform = self.texture_img.path
 *         return texture_path             # <<<<<<<<<<<<<<
 * 
 *     @path.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_texture_path));
  __pyx_r = ((PyObject *)__pyx_v_texture_path);
  goto __pyx_L0;

  /* "pyzed/core.pyx":709
 * 
 *     @property
 *     def path(self):             # <<<<<<<<<<<<<<
 *         texture_path = PyTransform()
 *         texture_path.transform = self.texture_img.path
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTextureImage.path.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_texture_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":715
 * 
 *     @path.setter
 *     def path(self, PyTransform texture_path):             # <<<<<<<<<<<<<<
 *         self.texture_img.path = texture_path.transform
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_14PyTextureImage_4path_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_texture_path); /*proto*/
static int __pyx_pw_5pyzed_4core_14PyTextureImage_4path_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_texture_path) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_texture_path), __pyx_ptype_5pyzed_4core_PyTransform, 1, "texture_path", 0))) __PYX_ERR(0, 715, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_14PyTextureImage_4path_2__set__(((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_v_texture_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_14PyTextureImage_4path_2__set__(struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_texture_path) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  sl::Transform __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzed/core.pyx":716
 *     @path.setter
 *     def path(self, PyTransform texture_path):
 *         self.texture_img.path = texture_path.transform             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_v_texture_path->transform;
  __pyx_v_self->texture_img->path = __pyx_t_1;

  /* "pyzed/core.pyx":715
 * 
 *     @path.setter
 *     def path(self, PyTransform texture_path):             # <<<<<<<<<<<<<<
 *         self.texture_img.path = texture_path.transform
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_14PyTextureImage_4__reduce_cython__[] = "PyTextureImage.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_14PyTextureImage_4__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTextureImage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_14PyTextureImage_6__setstate_cython__[] = "PyTextureImage.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_14PyTextureImage_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_14PyTextureImage_6__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_14PyTextureImage_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTextureImage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":721
 * cdef class PyTextureImagePool:
 *     cdef TextureImagePool texture_img_pool
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.texture_img_pool = TextureImagePool()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzed_4core_18PyTextureImagePool_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzed_4core_18PyTextureImagePool_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzed_4core_18PyTextureImagePool___cinit__(((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzed_4core_18PyTextureImagePool___cinit__(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzed/core.pyx":722
 *     cdef TextureImagePool texture_img_pool
 *     def __cinit__(self):
 *         self.texture_img_pool = TextureImagePool()             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __pyx_v_self->texture_img_pool = sl::TextureImagePool();

  /* "pyzed/core.pyx":721
 * cdef class PyTextureImagePool:
 *     cdef TextureImagePool texture_img_pool
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.texture_img_pool = TextureImagePool()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":724
 *         self.texture_img_pool = TextureImagePool()
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.texture_img_pool.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_3size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_18PyTextureImagePool_2size[] = "PyTextureImagePool.size(self)";
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_3size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyTextureImagePool_2size(((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_2size(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("size", 0);

  /* "pyzed/core.pyx":725
 * 
 *     def size(self):
 *         return self.texture_img_pool.size()             # <<<<<<<<<<<<<<
 * 
 *     def stack(self, PyMat image, PyTransform path):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->texture_img_pool.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/core.pyx":724
 *         self.texture_img_pool = TextureImagePool()
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.texture_img_pool.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTextureImagePool.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":727
 *         return self.texture_img_pool.size()
 * 
 *     def stack(self, PyMat image, PyTransform path):             # <<<<<<<<<<<<<<
 *         self.texture_img_pool.stack(image.mat, path.transform)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_5stack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzed_4core_18PyTextureImagePool_4stack[] = "PyTextureImagePool.stack(self, PyMat image, PyTransform path)";
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_5stack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_image = 0;
  struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_path = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stack (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_image,&__pyx_n_s_path,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_image)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stack", 1, 2, 2, 1); __PYX_ERR(0, 727, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stack") < 0)) __PYX_ERR(0, 727, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_image = ((struct __pyx_obj_5pyzed_4core_PyMat *)values[0]);
    __pyx_v_path = ((struct __pyx_obj_5pyzed_4core_PyTransform *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stack", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 727, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzed.core.PyTextureImagePool.stack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_image), __pyx_ptype_5pyzed_4core_PyMat, 1, "image", 0))) __PYX_ERR(0, 727, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_5pyzed_4core_PyTransform, 1, "path", 0))) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_18PyTextureImagePool_4stack(((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_self), __pyx_v_image, __pyx_v_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_4stack(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_image, struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stack", 0);

  /* "pyzed/core.pyx":728
 * 
 *     def stack(self, PyMat image, PyTransform path):
 *         self.texture_img_pool.stack(image.mat, path.transform)             # <<<<<<<<<<<<<<
 * 
 *     def concat(self, PyTextureImagePool that):
 */
  __pyx_v_self->texture_img_pool.stack(__pyx_v_image->mat, __pyx_v_path->transform);

  /* "pyzed/core.pyx":727
 *         return self.texture_img_pool.size()
 * 
 *     def stack(self, PyMat image, PyTransform path):             # <<<<<<<<<<<<<<
 *         self.texture_img_pool.stack(image.mat, path.transform)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":730
 *         self.texture_img_pool.stack(image.mat, path.transform)
 * 
 *     def concat(self, PyTextureImagePool that):             # <<<<<<<<<<<<<<
 *         self.texture_img_pool.concat(that.texture_img_pool)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_7concat(PyObject *__pyx_v_self, PyObject *__pyx_v_that); /*proto*/
static char __pyx_doc_5pyzed_4core_18PyTextureImagePool_6concat[] = "PyTextureImagePool.concat(self, PyTextureImagePool that)";
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_7concat(PyObject *__pyx_v_self, PyObject *__pyx_v_that) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_that), __pyx_ptype_5pyzed_4core_PyTextureImagePool, 1, "that", 0))) __PYX_ERR(0, 730, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_4core_18PyTextureImagePool_6concat(((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_self), ((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_that));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_6concat(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self, struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_that) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat", 0);

  /* "pyzed/core.pyx":731
 * 
 *     def concat(self, PyTextureImagePool that):
 *         self.texture_img_pool.concat(that.texture_img_pool)             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __pyx_v_self->texture_img_pool.concat(__pyx_v_that->texture_img_pool);

  /* "pyzed/core.pyx":730
 *         self.texture_img_pool.stack(image.mat, path.transform)
 * 
 *     def concat(self, PyTextureImagePool that):             # <<<<<<<<<<<<<<
 *         self.texture_img_pool.concat(that.texture_img_pool)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":733
 *         self.texture_img_pool.concat(that.texture_img_pool)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.texture_img_pool.clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_9clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_18PyTextureImagePool_8clear[] = "PyTextureImagePool.clear(self)";
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_9clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyTextureImagePool_8clear(((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_8clear(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "pyzed/core.pyx":734
 * 
 *     def clear(self):
 *         self.texture_img_pool.clear()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->texture_img_pool.clear();

  /* "pyzed/core.pyx":733
 *         self.texture_img_pool.concat(that.texture_img_pool)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.texture_img_pool.clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/core.pyx":737
 * 
 *     @property
 *     def v(self):             # <<<<<<<<<<<<<<
 *         list = []
 *         for i in range(self.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_1v_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_1v_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyTextureImagePool_1v___get__(((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_1v___get__(struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self) {
  PyObject *__pyx_v_list = NULL;
  PyObject *__pyx_v_i = NULL;
  struct __pyx_obj_5pyzed_4core_PyMat *__pyx_v_img = NULL;
  struct __pyx_obj_5pyzed_4core_PyTransform *__pyx_v_path = NULL;
  struct __pyx_obj_5pyzed_4core_PyTextureImage *__pyx_v_py_texture_img_pool = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  std::vector<sl::TextureImage> ::size_type __pyx_t_6;
  sl::Mat __pyx_t_7;
  sl::Transform __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzed/core.pyx":738
 *     @property
 *     def v(self):
 *         list = []             # <<<<<<<<<<<<<<
 *         for i in range(self.size()):
 *             img = PyMat()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":739
 *     def v(self):
 *         list = []
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             img = PyMat()
 *             img.mat = self.texture_img_pool.v[i].img
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 739, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 739, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 739, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 739, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzed/core.pyx":740
 *         list = []
 *         for i in range(self.size()):
 *             img = PyMat()             # <<<<<<<<<<<<<<
 *             img.mat = self.texture_img_pool.v[i].img
 *             path = PyTransform()
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyMat), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_img, ((struct __pyx_obj_5pyzed_4core_PyMat *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyzed/core.pyx":741
 *         for i in range(self.size()):
 *             img = PyMat()
 *             img.mat = self.texture_img_pool.v[i].img             # <<<<<<<<<<<<<<
 *             path = PyTransform()
 *             path.transform = self.texture_img_pool.v[i].path
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 741, __pyx_L1_error)
    __pyx_t_7 = (__pyx_v_self->texture_img_pool.v[__pyx_t_6]).img;
    __pyx_v_img->mat = __pyx_t_7;

    /* "pyzed/core.pyx":742
 *             img = PyMat()
 *             img.mat = self.texture_img_pool.v[i].img
 *             path = PyTransform()             # <<<<<<<<<<<<<<
 *             path.transform = self.texture_img_pool.v[i].path
 *             py_texture_img_pool = PyTextureImage(img, path)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyTransform), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_path, ((struct __pyx_obj_5pyzed_4core_PyTransform *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyzed/core.pyx":743
 *             img.mat = self.texture_img_pool.v[i].img
 *             path = PyTransform()
 *             path.transform = self.texture_img_pool.v[i].path             # <<<<<<<<<<<<<<
 *             py_texture_img_pool = PyTextureImage(img, path)
 *             list.append(py_texture_img_pool)
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L1_error)
    __pyx_t_8 = (__pyx_v_self->texture_img_pool.v[__pyx_t_6]).path;
    __pyx_v_path->transform = __pyx_t_8;

    /* "pyzed/core.pyx":744
 *             path = PyTransform()
 *             path.transform = self.texture_img_pool.v[i].path
 *             py_texture_img_pool = PyTextureImage(img, path)             # <<<<<<<<<<<<<<
 *             list.append(py_texture_img_pool)
 *         return list
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_img));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_img));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_img));
    __Pyx_INCREF(((PyObject *)__pyx_v_path));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_path));
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzed_4core_PyTextureImage), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_py_texture_img_pool, ((struct __pyx_obj_5pyzed_4core_PyTextureImage *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyzed/core.pyx":745
 *             path.transform = self.texture_img_pool.v[i].path
 *             py_texture_img_pool = PyTextureImage(img, path)
 *             list.append(py_texture_img_pool)             # <<<<<<<<<<<<<<
 *         return list
 */
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_list, ((PyObject *)__pyx_v_py_texture_img_pool)); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 745, __pyx_L1_error)

    /* "pyzed/core.pyx":739
 *     def v(self):
 *         list = []
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             img = PyMat()
 *             img.mat = self.texture_img_pool.v[i].img
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzed/core.pyx":746
 *             py_texture_img_pool = PyTextureImage(img, path)
 *             list.append(py_texture_img_pool)
 *         return list             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_list);
  __pyx_r = __pyx_v_list;
  goto __pyx_L0;

  /* "pyzed/core.pyx":737
 * 
 *     @property
 *     def v(self):             # <<<<<<<<<<<<<<
 *         list = []
 *         for i in range(self.size()):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzed.core.PyTextureImagePool.v.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_list);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_img);
  __Pyx_XDECREF((PyObject *)__pyx_v_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_texture_img_pool);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_4core_18PyTextureImagePool_10__reduce_cython__[] = "PyTextureImagePool.__reduce_cython__(self)";
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyTextureImagePool_10__reduce_cython__(((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTextureImagePool.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5pyzed_4core_18PyTextureImagePool_12__setstate_cython__[] = "PyTextureImagePool.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5pyzed_4core_18PyTextureImagePool_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_4core_18PyTextureImagePool_12__setstate_cython__(((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_4core_18PyTextureImagePool_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzed_4core_PyTextureImagePool *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.core.PyTextureImagePool.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":223
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":229
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":234
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 235, __pyx_L1_error)

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":238
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 239, __pyx_L1_error)

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":252
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":259
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":273
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 276, __pyx_L1_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":295
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 295, __pyx_L1_error)
      break;
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":299
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":301
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 302, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":789
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":792
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":798
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":800
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":800
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":807
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":814
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 818, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 818, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 819, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 819, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 820, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 820, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 820, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 822, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":823
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 823, __pyx_L1_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 827, __pyx_L1_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":845
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 847, __pyx_L1_error)

        /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":850
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":854
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 854, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 857, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 857, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 858, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 858, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 858, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":859
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 859, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 859, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 859, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":862
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 862, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 862, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 862, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":863
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":864
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":865
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":866
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":868
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(2, 868, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 873, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":874
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":990
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":993
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":996
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":998
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":990
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1004
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1011
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1011, __pyx_L3_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1012, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1013
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1013, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1013, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1015
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1017
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1017, __pyx_L3_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1018
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1018, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1019
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1019, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1019, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1015
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1023, __pyx_L3_error)

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1024, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1025, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1025, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_double", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_double", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct__sl_3a__3a_Resolution")
 * cdef struct_type __pyx_convert__from_py_struct__sl_3a__3a_Resolution(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

static struct sl::Resolution __pyx_convert__from_py_struct__sl_3a__3a_Resolution(PyObject *__pyx_v_obj) {
  struct sl::Resolution __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct sl::Resolution __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct__sl_3a__3a_Resolution", 0);

  /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct__sl_3a__3a_Resolution(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, ((char const *)"Expected %.16s, got %.200s"), ((char *)"a mapping"), Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct__sl_3a__3a_Resolution(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  }

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['width']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['width']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'width'")
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 17, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['width']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['width']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'width'")
 *     result.width = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct__sl_3a__3a_Resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 18, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['width']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'width'")             # <<<<<<<<<<<<<<
 *     result.width = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 19, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['width']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'width'")
 *     result.width = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['height']
 */
  __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 20, __pyx_L1_error)
  __pyx_v_result.width = __pyx_t_10;

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'width'")
 *     result.width = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['height']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.width = value
 *     try:
 *         value = obj['height']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'height'")
 */
      __pyx_t_8 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_height); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 22, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'width'")
 *     result.width = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['height']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['height']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'height'")
 *     result.height = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct__sl_3a__3a_Resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(1, 23, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['height']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'height'")             # <<<<<<<<<<<<<<
 *     result.height = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 24, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;
    __pyx_L14_except_error:;

    /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'width'")
 *     result.width = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['height']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'height'")
 *     result.height = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 25, __pyx_L1_error)
  __pyx_v_result.height = __pyx_t_10;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'height'")
 *     result.height = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct__sl_3a__3a_Resolution")
 * cdef struct_type __pyx_convert__from_py_struct__sl_3a__3a_Resolution(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct__sl_3a__3a_Resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5pyzed_4core_PyMat(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pyzed_4core_PyMat *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_4core_PyMat *)o);
  new((void*)&(p->mat)) sl::Mat();
  if (unlikely(__pyx_pw_5pyzed_4core_5PyMat_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyMat(PyObject *o) {
  struct __pyx_obj_5pyzed_4core_PyMat *p = (struct __pyx_obj_5pyzed_4core_PyMat *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->mat);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_5PyMat_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_5PyMat_4name_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_5PyMat_verbose(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_5PyMat_7verbose_1__get__(o);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyMat[] = {
  {"init_mat_type", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_3init_mat_type, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_2init_mat_type},
  {"init_mat_cpu", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_5init_mat_cpu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_4init_mat_cpu},
  {"init_mat_cpu_gpu", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_7init_mat_cpu_gpu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_6init_mat_cpu_gpu},
  {"init_mat_resolution", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_9init_mat_resolution, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_8init_mat_resolution},
  {"init_mat_resolution_cpu", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_11init_mat_resolution_cpu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_10init_mat_resolution_cpu},
  {"init_mat_resolution_cpu_gpu", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_13init_mat_resolution_cpu_gpu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_12init_mat_resolution_cpu_gpu},
  {"init_mat", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_15init_mat, METH_O, __pyx_doc_5pyzed_4core_5PyMat_14init_mat},
  {"alloc_size", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_17alloc_size, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_16alloc_size},
  {"alloc_resolution", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_19alloc_resolution, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_18alloc_resolution},
  {"free", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_21free, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_20free},
  {"update_cpu_from_gpu", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_23update_cpu_from_gpu, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_22update_cpu_from_gpu},
  {"update_gpu_from_cpu", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_25update_gpu_from_cpu, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_24update_gpu_from_cpu},
  {"copy_to", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_27copy_to, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_26copy_to},
  {"set_from", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_29set_from, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_28set_from},
  {"read", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_31read, METH_O, __pyx_doc_5pyzed_4core_5PyMat_30read},
  {"write", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_33write, METH_O, __pyx_doc_5pyzed_4core_5PyMat_32write},
  {"set_to", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_35set_to, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_34set_to},
  {"set_value", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_37set_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_36set_value},
  {"get_value", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_39get_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_38get_value},
  {"get_width", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_41get_width, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_40get_width},
  {"get_height", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_43get_height, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_42get_height},
  {"get_resolution", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_45get_resolution, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_44get_resolution},
  {"get_channels", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_47get_channels, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_46get_channels},
  {"get_data_type", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_49get_data_type, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_48get_data_type},
  {"get_memory_type", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_51get_memory_type, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_50get_memory_type},
  {"get_data", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_53get_data, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_52get_data},
  {"get_step_bytes", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_55get_step_bytes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_54get_step_bytes},
  {"get_step", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_57get_step, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_56get_step},
  {"get_pixel_bytes", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_59get_pixel_bytes, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_58get_pixel_bytes},
  {"get_width_bytes", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_61get_width_bytes, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_60get_width_bytes},
  {"get_infos", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_63get_infos, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_62get_infos},
  {"is_init", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_65is_init, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_64is_init},
  {"is_memory_owner", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_67is_memory_owner, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_66is_memory_owner},
  {"clone", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_69clone, METH_O, __pyx_doc_5pyzed_4core_5PyMat_68clone},
  {"move", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_71move, METH_O, __pyx_doc_5pyzed_4core_5PyMat_70move},
  {"swap", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_73swap, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_5PyMat_72swap},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_77__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_5PyMat_76__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_5PyMat_79__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_5PyMat_78__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_4core_PyMat[] = {
  {(char *)"name", __pyx_getprop_5pyzed_4core_5PyMat_name, 0, (char *)0, 0},
  {(char *)"verbose", __pyx_getprop_5pyzed_4core_5PyMat_verbose, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyMat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyMat", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyMat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyMat, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5pyzed_4core_5PyMat_75__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyMat, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_4core_PyMat, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyMat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyRotation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5pyzed_4core_PyRotation *p;
  PyObject *o = __pyx_ptype_5pyzed_5types_PyMatrix3f->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_4core_PyRotation *)o);
  new((void*)&(p->rotation)) sl::Rotation();
  if (unlikely(__pyx_pw_5pyzed_4core_10PyRotation_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyRotation(PyObject *o) {
  struct __pyx_obj_5pyzed_4core_PyRotation *p = (struct __pyx_obj_5pyzed_4core_PyRotation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->rotation);
  if (likely(__pyx_ptype_5pyzed_5types_PyMatrix3f)) __pyx_ptype_5pyzed_5types_PyMatrix3f->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_5pyzed_4core_PyRotation);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyRotation[] = {
  {"init_rotation", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_3init_rotation, METH_O, __pyx_doc_5pyzed_4core_10PyRotation_2init_rotation},
  {"init_matrix", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_5init_matrix, METH_O, __pyx_doc_5pyzed_4core_10PyRotation_4init_matrix},
  {"init_orientation", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_7init_orientation, METH_O, __pyx_doc_5pyzed_4core_10PyRotation_6init_orientation},
  {"init_angle_translation", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_9init_angle_translation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_10PyRotation_8init_angle_translation},
  {"set_orientation", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_11set_orientation, METH_O, __pyx_doc_5pyzed_4core_10PyRotation_10set_orientation},
  {"get_orientation", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_13get_orientation, METH_NOARGS, __pyx_doc_5pyzed_4core_10PyRotation_12get_orientation},
  {"get_rotation_vector", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_15get_rotation_vector, METH_NOARGS, __pyx_doc_5pyzed_4core_10PyRotation_14get_rotation_vector},
  {"set_rotation_vector", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_17set_rotation_vector, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_10PyRotation_16set_rotation_vector},
  {"get_euler_angles", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_19get_euler_angles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_10PyRotation_18get_euler_angles},
  {"set_euler_angles", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_21set_euler_angles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_10PyRotation_20set_euler_angles},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_23__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_10PyRotation_22__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_10PyRotation_25__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_10PyRotation_24__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyRotation = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyRotation", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyRotation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyRotation, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyRotation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyRotation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyTranslation(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pyzed_4core_PyTranslation *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_4core_PyTranslation *)o);
  new((void*)&(p->translation)) sl::Translation();
  if (unlikely(__pyx_pw_5pyzed_4core_13PyTranslation_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyTranslation(PyObject *o) {
  struct __pyx_obj_5pyzed_4core_PyTranslation *p = (struct __pyx_obj_5pyzed_4core_PyTranslation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->translation);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyTranslation[] = {
  {"init_translation", (PyCFunction)__pyx_pw_5pyzed_4core_13PyTranslation_3init_translation, METH_O, __pyx_doc_5pyzed_4core_13PyTranslation_2init_translation},
  {"init_vector", (PyCFunction)__pyx_pw_5pyzed_4core_13PyTranslation_5init_vector, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_13PyTranslation_4init_vector},
  {"normalize", (PyCFunction)__pyx_pw_5pyzed_4core_13PyTranslation_7normalize, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyTranslation_6normalize},
  {"normalize_translation", (PyCFunction)__pyx_pw_5pyzed_4core_13PyTranslation_9normalize_translation, METH_O, __pyx_doc_5pyzed_4core_13PyTranslation_8normalize_translation},
  {"size", (PyCFunction)__pyx_pw_5pyzed_4core_13PyTranslation_11size, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyTranslation_10size},
  {"get", (PyCFunction)__pyx_pw_5pyzed_4core_13PyTranslation_13get, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyTranslation_12get},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_13PyTranslation_17__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyTranslation_16__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_13PyTranslation_19__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_13PyTranslation_18__setstate_cython__},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyTranslation = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_5pyzed_4core_13PyTranslation_15__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_5pyzed_4core_PyTranslation = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyTranslation", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyTranslation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyTranslation, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyTranslation, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyTranslation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyTranslation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyOrientation(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pyzed_4core_PyOrientation *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_4core_PyOrientation *)o);
  new((void*)&(p->orientation)) sl::Orientation();
  if (unlikely(__pyx_pw_5pyzed_4core_13PyOrientation_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyOrientation(PyObject *o) {
  struct __pyx_obj_5pyzed_4core_PyOrientation *p = (struct __pyx_obj_5pyzed_4core_PyOrientation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->orientation);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyOrientation[] = {
  {"init_orientation", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_3init_orientation, METH_O, __pyx_doc_5pyzed_4core_13PyOrientation_2init_orientation},
  {"init_vector", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_5init_vector, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_13PyOrientation_4init_vector},
  {"init_rotation", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_7init_rotation, METH_O, __pyx_doc_5pyzed_4core_13PyOrientation_6init_rotation},
  {"init_translation", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_9init_translation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_13PyOrientation_8init_translation},
  {"set_rotation_matrix", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_11set_rotation_matrix, METH_O, __pyx_doc_5pyzed_4core_13PyOrientation_10set_rotation_matrix},
  {"get_rotation_matrix", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_13get_rotation_matrix, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_12get_rotation_matrix},
  {"set_identity", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_15set_identity, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_14set_identity},
  {"identity", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_17identity, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_16identity},
  {"set_zeros", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_19set_zeros, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_18set_zeros},
  {"zeros", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_21zeros, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_20zeros},
  {"normalize", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_23normalize, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_22normalize},
  {"normalize_orientation", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_25normalize_orientation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_13PyOrientation_24normalize_orientation},
  {"size", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_27size, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_26size},
  {"get", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_29get, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_28get},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_33__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_13PyOrientation_32__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_13PyOrientation_35__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_13PyOrientation_34__setstate_cython__},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyOrientation = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_5pyzed_4core_13PyOrientation_31__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_5pyzed_4core_PyOrientation = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyOrientation", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyOrientation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyOrientation, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyOrientation, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyOrientation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyOrientation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyTransform(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5pyzed_4core_PyTransform *p;
  PyObject *o = __pyx_ptype_5pyzed_5types_PyMatrix4f->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_4core_PyTransform *)o);
  new((void*)&(p->transform)) sl::Transform();
  if (unlikely(__pyx_pw_5pyzed_4core_11PyTransform_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyTransform(PyObject *o) {
  struct __pyx_obj_5pyzed_4core_PyTransform *p = (struct __pyx_obj_5pyzed_4core_PyTransform *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->transform);
  if (likely(__pyx_ptype_5pyzed_5types_PyMatrix4f)) __pyx_ptype_5pyzed_5types_PyMatrix4f->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_5pyzed_4core_PyTransform);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyTransform[] = {
  {"init_transform", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_3init_transform, METH_O, __pyx_doc_5pyzed_4core_11PyTransform_2init_transform},
  {"init_matrix", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_5init_matrix, METH_O, __pyx_doc_5pyzed_4core_11PyTransform_4init_matrix},
  {"init_rotation_translation", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_7init_rotation_translation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_11PyTransform_6init_rotation_translation},
  {"init_orientation_translation", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_9init_orientation_translation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_11PyTransform_8init_orientation_translation},
  {"set_rotation_matrix", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_11set_rotation_matrix, METH_O, __pyx_doc_5pyzed_4core_11PyTransform_10set_rotation_matrix},
  {"get_rotation_matrix", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_13get_rotation_matrix, METH_NOARGS, __pyx_doc_5pyzed_4core_11PyTransform_12get_rotation_matrix},
  {"set_translation", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_15set_translation, METH_O, __pyx_doc_5pyzed_4core_11PyTransform_14set_translation},
  {"get_translation", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_17get_translation, METH_NOARGS, __pyx_doc_5pyzed_4core_11PyTransform_16get_translation},
  {"set_orientation", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_19set_orientation, METH_O, __pyx_doc_5pyzed_4core_11PyTransform_18set_orientation},
  {"get_orientation", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_21get_orientation, METH_NOARGS, __pyx_doc_5pyzed_4core_11PyTransform_20get_orientation},
  {"get_rotation_vector", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_23get_rotation_vector, METH_NOARGS, __pyx_doc_5pyzed_4core_11PyTransform_22get_rotation_vector},
  {"set_rotation_vector", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_25set_rotation_vector, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_11PyTransform_24set_rotation_vector},
  {"get_euler_angles", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_27get_euler_angles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_11PyTransform_26get_euler_angles},
  {"set_euler_angles", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_29set_euler_angles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_11PyTransform_28set_euler_angles},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_31__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_11PyTransform_30__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_11PyTransform_33__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_11PyTransform_32__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyTransform = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyTransform", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyTransform), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyTransform, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyTransform, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyTransform, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyCameraParameters(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyCameraParameters(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_fx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_2fx_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_fy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_2fy_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_cx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_2cx_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_cy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_2cy_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_disto(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_5disto_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_v_fov(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_5v_fov_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_h_fov(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_5h_fov_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_d_fov(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_5d_fov_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyCameraParameters_image_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyCameraParameters_10image_size_1__get__(o);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyCameraParameters[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_18PyCameraParameters_1__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_18PyCameraParameters___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_18PyCameraParameters_3__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_18PyCameraParameters_2__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_4core_PyCameraParameters[] = {
  {(char *)"fx", __pyx_getprop_5pyzed_4core_18PyCameraParameters_fx, 0, (char *)0, 0},
  {(char *)"fy", __pyx_getprop_5pyzed_4core_18PyCameraParameters_fy, 0, (char *)0, 0},
  {(char *)"cx", __pyx_getprop_5pyzed_4core_18PyCameraParameters_cx, 0, (char *)0, 0},
  {(char *)"cy", __pyx_getprop_5pyzed_4core_18PyCameraParameters_cy, 0, (char *)0, 0},
  {(char *)"disto", __pyx_getprop_5pyzed_4core_18PyCameraParameters_disto, 0, (char *)0, 0},
  {(char *)"v_fov", __pyx_getprop_5pyzed_4core_18PyCameraParameters_v_fov, 0, (char *)0, 0},
  {(char *)"h_fov", __pyx_getprop_5pyzed_4core_18PyCameraParameters_h_fov, 0, (char *)0, 0},
  {(char *)"d_fov", __pyx_getprop_5pyzed_4core_18PyCameraParameters_d_fov, 0, (char *)0, 0},
  {(char *)"image_size", __pyx_getprop_5pyzed_4core_18PyCameraParameters_image_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyCameraParameters = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyCameraParameters", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyCameraParameters), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyCameraParameters, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyCameraParameters, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_4core_PyCameraParameters, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyCameraParameters, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyCalibrationParameters(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)o);
  new((void*)&(p->R)) sl::Vector3<float> ();
  new((void*)&(p->T)) sl::Vector3<float> ();
  p->py_left_cam = ((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)Py_None); Py_INCREF(Py_None);
  p->py_right_cam = ((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5pyzed_4core_23PyCalibrationParameters_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyCalibrationParameters(PyObject *o) {
  struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *p = (struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->R);
  __Pyx_call_destructor(p->T);
  Py_CLEAR(p->py_left_cam);
  Py_CLEAR(p->py_right_cam);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5pyzed_4core_PyCalibrationParameters(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *p = (struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)o;
  if (p->py_left_cam) {
    e = (*v)(((PyObject *)p->py_left_cam), a); if (e) return e;
  }
  if (p->py_right_cam) {
    e = (*v)(((PyObject *)p->py_right_cam), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5pyzed_4core_PyCalibrationParameters(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *p = (struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)o;
  tmp = ((PyObject*)p->py_left_cam);
  p->py_left_cam = ((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_right_cam);
  p->py_right_cam = ((struct __pyx_obj_5pyzed_4core_PyCameraParameters *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5pyzed_4core_23PyCalibrationParameters_R(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_23PyCalibrationParameters_1R_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_23PyCalibrationParameters_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_23PyCalibrationParameters_1T_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_23PyCalibrationParameters_left_cam(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_23PyCalibrationParameters_8left_cam_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_23PyCalibrationParameters_right_cam(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_23PyCalibrationParameters_9right_cam_1__get__(o);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyCalibrationParameters[] = {
  {"set", (PyCFunction)__pyx_pw_5pyzed_4core_23PyCalibrationParameters_3set, METH_NOARGS, __pyx_doc_5pyzed_4core_23PyCalibrationParameters_2set},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_23PyCalibrationParameters_5__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_23PyCalibrationParameters_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_23PyCalibrationParameters_7__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_23PyCalibrationParameters_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_4core_PyCalibrationParameters[] = {
  {(char *)"R", __pyx_getprop_5pyzed_4core_23PyCalibrationParameters_R, 0, (char *)0, 0},
  {(char *)"T", __pyx_getprop_5pyzed_4core_23PyCalibrationParameters_T, 0, (char *)0, 0},
  {(char *)"left_cam", __pyx_getprop_5pyzed_4core_23PyCalibrationParameters_left_cam, 0, (char *)0, 0},
  {(char *)"right_cam", __pyx_getprop_5pyzed_4core_23PyCalibrationParameters_right_cam, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyCalibrationParameters = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyCalibrationParameters", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyCalibrationParameters), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyCalibrationParameters, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pyzed_4core_PyCalibrationParameters, /*tp_traverse*/
  __pyx_tp_clear_5pyzed_4core_PyCalibrationParameters, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyCalibrationParameters, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_4core_PyCalibrationParameters, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyCalibrationParameters, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyCameraInformation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5pyzed_4core_PyCameraInformation *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_4core_PyCameraInformation *)o);
  p->py_calib = ((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)Py_None); Py_INCREF(Py_None);
  p->py_calib_raw = ((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5pyzed_4core_19PyCameraInformation_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyCameraInformation(PyObject *o) {
  struct __pyx_obj_5pyzed_4core_PyCameraInformation *p = (struct __pyx_obj_5pyzed_4core_PyCameraInformation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->py_calib);
  Py_CLEAR(p->py_calib_raw);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5pyzed_4core_PyCameraInformation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pyzed_4core_PyCameraInformation *p = (struct __pyx_obj_5pyzed_4core_PyCameraInformation *)o;
  if (p->py_calib) {
    e = (*v)(((PyObject *)p->py_calib), a); if (e) return e;
  }
  if (p->py_calib_raw) {
    e = (*v)(((PyObject *)p->py_calib_raw), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5pyzed_4core_PyCameraInformation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5pyzed_4core_PyCameraInformation *p = (struct __pyx_obj_5pyzed_4core_PyCameraInformation *)o;
  tmp = ((PyObject*)p->py_calib);
  p->py_calib = ((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_calib_raw);
  p->py_calib_raw = ((struct __pyx_obj_5pyzed_4core_PyCalibrationParameters *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5pyzed_4core_19PyCameraInformation_calibration_parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_19PyCameraInformation_22calibration_parameters_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_19PyCameraInformation_calibration_parameters_raw(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_19PyCameraInformation_26calibration_parameters_raw_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_19PyCameraInformation_serial_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_19PyCameraInformation_13serial_number_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_19PyCameraInformation_firmware_version(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_19PyCameraInformation_16firmware_version_1__get__(o);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyCameraInformation[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_19PyCameraInformation_3__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_19PyCameraInformation_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_19PyCameraInformation_5__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_19PyCameraInformation_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_4core_PyCameraInformation[] = {
  {(char *)"calibration_parameters", __pyx_getprop_5pyzed_4core_19PyCameraInformation_calibration_parameters, 0, (char *)0, 0},
  {(char *)"calibration_parameters_raw", __pyx_getprop_5pyzed_4core_19PyCameraInformation_calibration_parameters_raw, 0, (char *)0, 0},
  {(char *)"serial_number", __pyx_getprop_5pyzed_4core_19PyCameraInformation_serial_number, 0, (char *)0, 0},
  {(char *)"firmware_version", __pyx_getprop_5pyzed_4core_19PyCameraInformation_firmware_version, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyCameraInformation = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyCameraInformation", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyCameraInformation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyCameraInformation, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pyzed_4core_PyCameraInformation, /*tp_traverse*/
  __pyx_tp_clear_5pyzed_4core_PyCameraInformation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyCameraInformation, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_4core_PyCameraInformation, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyCameraInformation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyResolution(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzed_4core_12PyResolution_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyResolution(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_12PyResolution_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_12PyResolution_5width_1__get__(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_12PyResolution_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_12PyResolution_6height_1__get__(o);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyResolution[] = {
  {"py_area", (PyCFunction)__pyx_pw_5pyzed_4core_12PyResolution_3py_area, METH_NOARGS, __pyx_doc_5pyzed_4core_12PyResolution_2py_area},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_12PyResolution_7__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_12PyResolution_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_12PyResolution_9__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_12PyResolution_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_4core_PyResolution[] = {
  {(char *)"width", __pyx_getprop_5pyzed_4core_12PyResolution_width, 0, (char *)0, 0},
  {(char *)"height", __pyx_getprop_5pyzed_4core_12PyResolution_height, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyResolution = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyResolution", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyResolution), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyResolution, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_5pyzed_4core_12PyResolution_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyResolution, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_4core_PyResolution, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyResolution, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyTextureImage(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzed_4core_14PyTextureImage_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyTextureImage(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_14PyTextureImage_img(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_14PyTextureImage_3img_1__get__(o);
}

static int __pyx_setprop_5pyzed_4core_14PyTextureImage_img(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_4core_14PyTextureImage_3img_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzed_4core_14PyTextureImage_path(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_14PyTextureImage_4path_1__get__(o);
}

static int __pyx_setprop_5pyzed_4core_14PyTextureImage_path(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzed_4core_14PyTextureImage_4path_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyTextureImage[] = {
  {"clear", (PyCFunction)__pyx_pw_5pyzed_4core_14PyTextureImage_3clear, METH_NOARGS, __pyx_doc_5pyzed_4core_14PyTextureImage_2clear},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_14PyTextureImage_5__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_14PyTextureImage_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_14PyTextureImage_7__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_14PyTextureImage_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_4core_PyTextureImage[] = {
  {(char *)"img", __pyx_getprop_5pyzed_4core_14PyTextureImage_img, __pyx_setprop_5pyzed_4core_14PyTextureImage_img, (char *)0, 0},
  {(char *)"path", __pyx_getprop_5pyzed_4core_14PyTextureImage_path, __pyx_setprop_5pyzed_4core_14PyTextureImage_path, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyTextureImage = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyTextureImage", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyTextureImage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyTextureImage, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyTextureImage, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_4core_PyTextureImage, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyTextureImage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzed_4core_PyTextureImagePool(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pyzed_4core_PyTextureImagePool *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)o);
  new((void*)&(p->texture_img_pool)) sl::TextureImagePool();
  if (unlikely(__pyx_pw_5pyzed_4core_18PyTextureImagePool_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzed_4core_PyTextureImagePool(PyObject *o) {
  struct __pyx_obj_5pyzed_4core_PyTextureImagePool *p = (struct __pyx_obj_5pyzed_4core_PyTextureImagePool *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->texture_img_pool);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzed_4core_18PyTextureImagePool_v(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzed_4core_18PyTextureImagePool_1v_1__get__(o);
}

static PyMethodDef __pyx_methods_5pyzed_4core_PyTextureImagePool[] = {
  {"size", (PyCFunction)__pyx_pw_5pyzed_4core_18PyTextureImagePool_3size, METH_NOARGS, __pyx_doc_5pyzed_4core_18PyTextureImagePool_2size},
  {"stack", (PyCFunction)__pyx_pw_5pyzed_4core_18PyTextureImagePool_5stack, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzed_4core_18PyTextureImagePool_4stack},
  {"concat", (PyCFunction)__pyx_pw_5pyzed_4core_18PyTextureImagePool_7concat, METH_O, __pyx_doc_5pyzed_4core_18PyTextureImagePool_6concat},
  {"clear", (PyCFunction)__pyx_pw_5pyzed_4core_18PyTextureImagePool_9clear, METH_NOARGS, __pyx_doc_5pyzed_4core_18PyTextureImagePool_8clear},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_18PyTextureImagePool_11__reduce_cython__, METH_NOARGS, __pyx_doc_5pyzed_4core_18PyTextureImagePool_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzed_4core_18PyTextureImagePool_13__setstate_cython__, METH_O, __pyx_doc_5pyzed_4core_18PyTextureImagePool_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzed_4core_PyTextureImagePool[] = {
  {(char *)"v", __pyx_getprop_5pyzed_4core_18PyTextureImagePool_v, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzed_4core_PyTextureImagePool = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzed.core.PyTextureImagePool", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzed_4core_PyTextureImagePool), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzed_4core_PyTextureImagePool, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzed_4core_PyTextureImagePool, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzed_4core_PyTextureImagePool, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzed_4core_PyTextureImagePool, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_core(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_core},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "core",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Argument_are_not_of_PyMAT_TYPE_o, __pyx_k_Argument_are_not_of_PyMAT_TYPE_o, sizeof(__pyx_k_Argument_are_not_of_PyMAT_TYPE_o), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_PyMAT_TYPE_ty, __pyx_k_Argument_is_not_of_PyMAT_TYPE_ty, sizeof(__pyx_k_Argument_is_not_of_PyMAT_TYPE_ty), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_PyMEM_type, __pyx_k_Argument_is_not_of_PyMEM_type, sizeof(__pyx_k_Argument_is_not_of_PyMEM_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_is_not_of_boolean_type, __pyx_k_Argument_is_not_of_boolean_type, sizeof(__pyx_k_Argument_is_not_of_boolean_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Arguments_must_be_of_PyMat_and_P, __pyx_k_Arguments_must_be_of_PyMat_and_P, sizeof(__pyx_k_Arguments_must_be_of_PyMat_and_P), 0, 0, 1, 0},
  {&__pyx_n_s_Enum, __pyx_k_Enum, sizeof(__pyx_k_Enum), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOPY_TYPE, __pyx_k_PyCOPY_TYPE, sizeof(__pyx_k_PyCOPY_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOPY_TYPE_CPU_CPU, __pyx_k_PyCOPY_TYPE_CPU_CPU, sizeof(__pyx_k_PyCOPY_TYPE_CPU_CPU), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOPY_TYPE_CPU_GPU, __pyx_k_PyCOPY_TYPE_CPU_GPU, sizeof(__pyx_k_PyCOPY_TYPE_CPU_GPU), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOPY_TYPE_GPU_CPU, __pyx_k_PyCOPY_TYPE_GPU_CPU, sizeof(__pyx_k_PyCOPY_TYPE_GPU_CPU), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOPY_TYPE_GPU_GPU, __pyx_k_PyCOPY_TYPE_GPU_GPU, sizeof(__pyx_k_PyCOPY_TYPE_GPU_GPU), 0, 0, 1, 1},
  {&__pyx_n_s_PyERROR_CODE, __pyx_k_PyERROR_CODE, sizeof(__pyx_k_PyERROR_CODE), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE, __pyx_k_PyMAT_TYPE, sizeof(__pyx_k_PyMAT_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE_32F_C1, __pyx_k_PyMAT_TYPE_32F_C1, sizeof(__pyx_k_PyMAT_TYPE_32F_C1), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE_32F_C2, __pyx_k_PyMAT_TYPE_32F_C2, sizeof(__pyx_k_PyMAT_TYPE_32F_C2), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE_32F_C3, __pyx_k_PyMAT_TYPE_32F_C3, sizeof(__pyx_k_PyMAT_TYPE_32F_C3), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE_32F_C4, __pyx_k_PyMAT_TYPE_32F_C4, sizeof(__pyx_k_PyMAT_TYPE_32F_C4), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE_8U_C1, __pyx_k_PyMAT_TYPE_8U_C1, sizeof(__pyx_k_PyMAT_TYPE_8U_C1), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE_8U_C2, __pyx_k_PyMAT_TYPE_8U_C2, sizeof(__pyx_k_PyMAT_TYPE_8U_C2), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE_8U_C3, __pyx_k_PyMAT_TYPE_8U_C3, sizeof(__pyx_k_PyMAT_TYPE_8U_C3), 0, 0, 1, 1},
  {&__pyx_n_s_PyMAT_TYPE_8U_C4, __pyx_k_PyMAT_TYPE_8U_C4, sizeof(__pyx_k_PyMAT_TYPE_8U_C4), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEM, __pyx_k_PyMEM, sizeof(__pyx_k_PyMEM), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEM_CPU, __pyx_k_PyMEM_CPU, sizeof(__pyx_k_PyMEM_CPU), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEM_GPU, __pyx_k_PyMEM_GPU, sizeof(__pyx_k_PyMEM_GPU), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_Mat_data_type_value_0, __pyx_k_Unknown_Mat_data_type_value_0, sizeof(__pyx_k_Unknown_Mat_data_type_value_0), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__36, __pyx_k__36, sizeof(__pyx_k__36), 0, 0, 1, 0},
  {&__pyx_n_s__70, __pyx_k__70, sizeof(__pyx_k__70), 0, 0, 1, 1},
  {&__pyx_n_s_angle, __pyx_k_angle, sizeof(__pyx_k_angle), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_camera, __pyx_k_camera, sizeof(__pyx_k_camera), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cpy_type, __pyx_k_cpy_type, sizeof(__pyx_k_cpy_type), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get_current_timestamp, __pyx_k_get_current_timestamp, sizeof(__pyx_k_get_current_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_get_data, __pyx_k_get_data, sizeof(__pyx_k_get_data), 0, 0, 1, 1},
  {&__pyx_n_s_get_data_type, __pyx_k_get_data_type, sizeof(__pyx_k_get_data_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_infos, __pyx_k_get_infos, sizeof(__pyx_k_get_infos), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_input0, __pyx_k_input0, sizeof(__pyx_k_input0), 0, 0, 1, 1},
  {&__pyx_n_s_input1, __pyx_k_input1, sizeof(__pyx_k_input1), 0, 0, 1, 1},
  {&__pyx_n_s_input2, __pyx_k_input2, sizeof(__pyx_k_input2), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_n_s_mat1, __pyx_k_mat1, sizeof(__pyx_k_mat1), 0, 0, 1, 1},
  {&__pyx_n_s_mat2, __pyx_k_mat2, sizeof(__pyx_k_mat2), 0, 0, 1, 1},
  {&__pyx_n_s_mat_type, __pyx_k_mat_type, sizeof(__pyx_k_mat_type), 0, 0, 1, 1},
  {&__pyx_n_s_memory_type, __pyx_k_memory_type, sizeof(__pyx_k_memory_type), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_normalize_orientation, __pyx_k_normalize_orientation, sizeof(__pyx_k_normalize_orientation), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_orient, __pyx_k_orient, sizeof(__pyx_k_orient), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_ptr_cpu, __pyx_k_ptr_cpu, sizeof(__pyx_k_ptr_cpu), 0, 0, 1, 1},
  {&__pyx_n_s_ptr_gpu, __pyx_k_ptr_gpu, sizeof(__pyx_k_ptr_gpu), 0, 0, 1, 1},
  {&__pyx_n_s_py_camera, __pyx_k_py_camera, sizeof(__pyx_k_py_camera), 0, 0, 1, 1},
  {&__pyx_n_s_py_mat, __pyx_k_py_mat, sizeof(__pyx_k_py_mat), 0, 0, 1, 1},
  {&__pyx_n_s_py_transform, __pyx_k_py_transform, sizeof(__pyx_k_py_transform), 0, 0, 1, 1},
  {&__pyx_n_s_pyzed_camera, __pyx_k_pyzed_camera, sizeof(__pyx_k_pyzed_camera), 0, 0, 1, 1},
  {&__pyx_n_s_pyzed_core, __pyx_k_pyzed_core, sizeof(__pyx_k_pyzed_core), 0, 0, 1, 1},
  {&__pyx_kp_s_pyzed_core_pyx, __pyx_k_pyzed_core_pyx, sizeof(__pyx_k_pyzed_core_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyzed_types, __pyx_k_pyzed_types, sizeof(__pyx_k_pyzed_types), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_radian, __pyx_k_radian, sizeof(__pyx_k_radian), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_resizer, __pyx_k_resizer, sizeof(__pyx_k_resizer), 0, 0, 1, 1},
  {&__pyx_n_s_resolution, __pyx_k_resolution, sizeof(__pyx_k_resolution), 0, 0, 1, 1},
  {&__pyx_n_s_rot, __pyx_k_rot, sizeof(__pyx_k_rot), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_camera_params_cannot_be_con, __pyx_k_self_camera_params_cannot_be_con, sizeof(__pyx_k_self_camera_params_cannot_be_con), 0, 0, 1, 0},
  {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_step_cpu, __pyx_k_step_cpu, sizeof(__pyx_k_step_cpu), 0, 0, 1, 1},
  {&__pyx_n_s_step_gpu, __pyx_k_step_gpu, sizeof(__pyx_k_step_gpu), 0, 0, 1, 1},
  {&__pyx_n_s_swap, __pyx_k_swap, sizeof(__pyx_k_swap), 0, 0, 1, 1},
  {&__pyx_n_s_t1, __pyx_k_t1, sizeof(__pyx_k_t1), 0, 0, 1, 1},
  {&__pyx_n_s_t2, __pyx_k_t2, sizeof(__pyx_k_t2), 0, 0, 1, 1},
  {&__pyx_n_s_t3, __pyx_k_t3, sizeof(__pyx_k_t3), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tr, __pyx_k_tr, sizeof(__pyx_k_tr), 0, 0, 1, 1},
  {&__pyx_n_s_tr1, __pyx_k_tr1, sizeof(__pyx_k_tr1), 0, 0, 1, 1},
  {&__pyx_n_s_tr2, __pyx_k_tr2, sizeof(__pyx_k_tr2), 0, 0, 1, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_v0, __pyx_k_v0, sizeof(__pyx_k_v0), 0, 0, 1, 1},
  {&__pyx_n_s_v1, __pyx_k_v1, sizeof(__pyx_k_v1), 0, 0, 1, 1},
  {&__pyx_n_s_v2, __pyx_k_v2, sizeof(__pyx_k_v2), 0, 0, 1, 1},
  {&__pyx_n_s_v3, __pyx_k_v3, sizeof(__pyx_k_v3), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 456, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 86, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 235, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1013, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(1, 18, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_camera_params_cannot_be_con); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.camera_params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_camera_params_cannot_be_con); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pyzed/core.pyx":140
 *     @property
 *     def R(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.calibration.R[i]
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pyzed/core.pyx":147
 *     @property
 *     def T(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.calibration.T[i]
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pyzed/core.pyx":198
 *             self.mat = Mat(width, height, mat_type.value, memory_type.value)
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Argument_are_not_of_PyMAT_TYPE_o); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pyzed/core.pyx":204
 *             self.mat = Mat(width, height, mat_type.value, ptr.encode(), step, memory_type.value)
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_cpu_gpu(self, width, height, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Argument_are_not_of_PyMAT_TYPE_o); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "pyzed/core.pyx":210
 *              self.mat = Mat(width, height, mat_type.value, ptr_cpu.encode(), step_cpu, ptr_gpu.encode(), step_gpu)
 *         else:
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_resolution(self, PyResolution resolution, mat_type, memory_type):
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyMAT_TYPE_ty); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "pyzed/core.pyx":216
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, memory_type.value)
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Argument_are_not_of_PyMAT_TYPE_o); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "pyzed/core.pyx":223
 *                             step, memory_type.value)
 *         else:
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat_resolution_cpu_gpu(self, PyResolution resolution, mat_type, ptr_cpu, step_cpu, ptr_gpu, step_gpu):
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Argument_are_not_of_PyMAT_TYPE_o); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pyzed/core.pyx":230
 *                              step_cpu, ptr_gpu.encode(), step_gpu)
 *         else:
 *             raise TypeError("Argument is not of PyMAT_TYPE type.")             # <<<<<<<<<<<<<<
 * 
 *     def init_mat(self, PyMat matrix):
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyMAT_TYPE_ty); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "pyzed/core.pyx":239
 *             self.mat.alloc(<size_t> width, <size_t> height, mat_type.value, memory_type.value)
 *         else:
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")             # <<<<<<<<<<<<<<
 * 
 *     def alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU):
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_Arguments_must_be_of_PyMat_and_P); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "pyzed/core.pyx":245
 *             self.mat.alloc(resolution.width, resolution.height, mat_type.value, memory_type.value)
 *         else:
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")             # <<<<<<<<<<<<<<
 * 
 *     def free(self, memory_type=None):
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_Arguments_must_be_of_PyMat_and_P); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "pyzed/core.pyx":253
 *             self.mat.free(MEM_CPU or MEM_GPU)
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def update_cpu_from_gpu(self):
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyMEM_type); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pyzed/core.pyx":419
 *                 memcpy(<void*>arr.data, <void*>getPointerFloat4(self.mat, memory_type.value), size)
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *         return arr
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyMEM_type); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "pyzed/core.pyx":427
 *             return self.mat.getStepBytes(memory_type.value)
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_step(self, memory_type=PyMEM.PyMEM_CPU):
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyMEM_type); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "pyzed/core.pyx":433
 *             return self.mat.getStep(memory_type.value)
 *         else:
 *             raise TypeError("Argument is not of PyMEM type.")             # <<<<<<<<<<<<<<
 * 
 *     def get_pixel_bytes(self):
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_PyMEM_type); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "pyzed/core.pyx":504
 * 
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.rotation.getRotationVector()[i]
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "pyzed/core.pyx":513
 * 
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             for i in range(3):
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "pyzed/core.pyx":518
 *                 arr[i] = self.rotation.getEulerAngles(radian)[i]
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_boolean_type); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "pyzed/core.pyx":525
 *             self.rotation.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 * 
 * cdef class PyTranslation:
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_boolean_type); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "pyzed/core.pyx":667
 * 
 *     def get_rotation_vector(self):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             arr[i] = self.transform.getRotationVector()[i]
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "pyzed/core.pyx":676
 * 
 *     def get_euler_angles(self, radian=True):
 *         cdef np.ndarray arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *         if isinstance(radian, bool):
 *             for i in range(3):
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "pyzed/core.pyx":681
 *                 arr[i] = self.transform.getEulerAngles(radian)[i]
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_boolean_type); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "pyzed/core.pyx":688
 *             self.transform.setEulerAngles(types.Vector3[float](input0, input1, input2), radian)
 *         else:
 *             raise TypeError("Argument is not of boolean type.")             # <<<<<<<<<<<<<<
 * 
 * cdef class PyTextureImage:
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_Argument_is_not_of_boolean_type); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(2, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(2, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":823
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(2, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(2, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1013
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(2, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1019
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(2, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "../../../AppData/Local/Programs/Python/Python35/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(2, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "FromPyStructUtility":19
 *         value = obj['width']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'width'")             # <<<<<<<<<<<<<<
 *     result.width = value
 *     try:
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "FromPyStructUtility":24
 *         value = obj['height']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'height'")             # <<<<<<<<<<<<<<
 *     result.height = value
 *     return result
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "pyzed/core.pyx":58
 * 
 * 
 * def get_current_timestamp():             # <<<<<<<<<<<<<<
 *     return getCurrentTimeStamp()
 * 
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_core_pyx, __pyx_n_s_get_current_timestamp, 58, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 58, __pyx_L1_error)

  /* "pyzed/core.pyx":457
 * 
 *     @staticmethod
 *     def swap(self, PyMat mat1, PyMat mat2):             # <<<<<<<<<<<<<<
 *         self.mat.swap(mat1, mat2)
 * 
 */
  __pyx_tuple__72 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_mat1, __pyx_n_s_mat2); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_core_pyx, __pyx_n_s_swap, 457, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 457, __pyx_L1_error)

  /* "pyzed/core.pyx":603
 * 
 *     @staticmethod
 *     def normalize_orientation(PyOrientation orient):             # <<<<<<<<<<<<<<
 *         orient.orientation.normalise()
 *         return orient
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_n_s_orient); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_core_pyx, __pyx_n_s_normalize_orientation, 603, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcore(void); /*proto*/
PyMODINIT_FUNC initcore(void)
#else
PyMODINIT_FUNC PyInit_core(void); /*proto*/
PyMODINIT_FUNC PyInit_core(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_core(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_core(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("core", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyzed__core) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyzed.core")) {
      if (unlikely(PyDict_SetItemString(modules, "pyzed.core", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyMat) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyMat.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyMat", (PyObject *)&__pyx_type_5pyzed_4core_PyMat) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyMat) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyMat = &__pyx_type_5pyzed_4core_PyMat;
  __pyx_ptype_5pyzed_5types_PyMatrix3f = __Pyx_ImportType("pyzed.types", "PyMatrix3f", sizeof(struct __pyx_obj_5pyzed_5types_PyMatrix3f), 1); if (unlikely(!__pyx_ptype_5pyzed_5types_PyMatrix3f)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyRotation.tp_base = __pyx_ptype_5pyzed_5types_PyMatrix3f;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyRotation) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyRotation.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyRotation", (PyObject *)&__pyx_type_5pyzed_4core_PyRotation) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyRotation) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyRotation = &__pyx_type_5pyzed_4core_PyRotation;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyTranslation) < 0) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyTranslation.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyTranslation", (PyObject *)&__pyx_type_5pyzed_4core_PyTranslation) < 0) __PYX_ERR(0, 527, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyTranslation) < 0) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyTranslation = &__pyx_type_5pyzed_4core_PyTranslation;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyOrientation) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyOrientation.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyOrientation", (PyObject *)&__pyx_type_5pyzed_4core_PyOrientation) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyOrientation) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyOrientation = &__pyx_type_5pyzed_4core_PyOrientation;
  __pyx_ptype_5pyzed_5types_PyMatrix4f = __Pyx_ImportType("pyzed.types", "PyMatrix4f", sizeof(struct __pyx_obj_5pyzed_5types_PyMatrix4f), 1); if (unlikely(!__pyx_ptype_5pyzed_5types_PyMatrix4f)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyTransform.tp_base = __pyx_ptype_5pyzed_5types_PyMatrix4f;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyTransform) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyTransform.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyTransform", (PyObject *)&__pyx_type_5pyzed_4core_PyTransform) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyTransform) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyTransform = &__pyx_type_5pyzed_4core_PyTransform;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyCameraParameters) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyCameraParameters.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyCameraParameters", (PyObject *)&__pyx_type_5pyzed_4core_PyCameraParameters) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyCameraParameters) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyCameraParameters = &__pyx_type_5pyzed_4core_PyCameraParameters;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyCalibrationParameters) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyCalibrationParameters.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyCalibrationParameters", (PyObject *)&__pyx_type_5pyzed_4core_PyCalibrationParameters) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyCalibrationParameters) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyCalibrationParameters = &__pyx_type_5pyzed_4core_PyCalibrationParameters;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyCameraInformation) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyCameraInformation.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyCameraInformation", (PyObject *)&__pyx_type_5pyzed_4core_PyCameraInformation) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyCameraInformation) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyCameraInformation = &__pyx_type_5pyzed_4core_PyCameraInformation;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyResolution) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyResolution.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyResolution", (PyObject *)&__pyx_type_5pyzed_4core_PyResolution) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyResolution) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyResolution = &__pyx_type_5pyzed_4core_PyResolution;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyTextureImage) < 0) __PYX_ERR(0, 690, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyTextureImage.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyTextureImage", (PyObject *)&__pyx_type_5pyzed_4core_PyTextureImage) < 0) __PYX_ERR(0, 690, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyTextureImage) < 0) __PYX_ERR(0, 690, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyTextureImage = &__pyx_type_5pyzed_4core_PyTextureImage;
  if (PyType_Ready(&__pyx_type_5pyzed_4core_PyTextureImagePool) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_type_5pyzed_4core_PyTextureImagePool.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyTextureImagePool", (PyObject *)&__pyx_type_5pyzed_4core_PyTextureImagePool) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzed_4core_PyTextureImagePool) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_ptype_5pyzed_4core_PyTextureImagePool = &__pyx_type_5pyzed_4core_PyTextureImagePool;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(4, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(5, 15, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 163, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 185, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 189, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 198, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 885, __pyx_L1_error)
  __pyx_ptype_5pyzed_4mesh_PyTexture = __Pyx_ImportType("pyzed.mesh", "PyTexture", sizeof(struct __pyx_obj_5pyzed_4mesh_PyTexture), 1); if (unlikely(!__pyx_ptype_5pyzed_4mesh_PyTexture)) __PYX_ERR(6, 100, __pyx_L1_error)
  __pyx_ptype_5pyzed_4mesh_PyChunk = __Pyx_ImportType("pyzed.mesh", "PyChunk", sizeof(struct __pyx_obj_5pyzed_4mesh_PyChunk), 1); if (unlikely(!__pyx_ptype_5pyzed_4mesh_PyChunk)) __PYX_ERR(6, 103, __pyx_L1_error)
  __pyx_ptype_5pyzed_4mesh_PyMesh = __Pyx_ImportType("pyzed.mesh", "PyMesh", sizeof(struct __pyx_obj_5pyzed_4mesh_PyMesh), 1); if (unlikely(!__pyx_ptype_5pyzed_4mesh_PyMesh)) __PYX_ERR(6, 106, __pyx_L1_error)
  __pyx_ptype_5pyzed_6camera_PyZEDCamera = __Pyx_ImportType("pyzed.camera", "PyZEDCamera", sizeof(struct __pyx_obj_5pyzed_6camera_PyZEDCamera), 1); if (unlikely(!__pyx_ptype_5pyzed_6camera_PyZEDCamera)) __PYX_ERR(7, 238, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pyzed/core.pyx":27
 * from cpython cimport bool
 * 
 * import enum             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_enum, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_enum, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":28
 * 
 * import enum
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import pyzed.types as types
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":30
 * import numpy as np
 * cimport numpy as np
 * import pyzed.types as types             # <<<<<<<<<<<<<<
 * cimport pyzed.camera as camera
 * import pyzed.camera as camera
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__70);
  __Pyx_GIVEREF(__pyx_n_s__70);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__70);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pyzed_types, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_2) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzed/core.pyx":32
 * import pyzed.types as types
 * cimport pyzed.camera as camera
 * import pyzed.camera as camera             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__70);
  __Pyx_GIVEREF(__pyx_n_s__70);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__70);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyzed_camera, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":35
 * 
 * 
 * class PyMEM(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyMEM_CPU = MEM_CPU
 *     PyMEM_GPU = MEM_GPU
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyMEM, __pyx_n_s_PyMEM, (PyObject *) NULL, __pyx_n_s_pyzed_core, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/core.pyx":36
 * 
 * class PyMEM(enum.Enum):
 *     PyMEM_CPU = MEM_CPU             # <<<<<<<<<<<<<<
 *     PyMEM_GPU = MEM_GPU
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MEM(sl::MEM_CPU); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEM_CPU, __pyx_t_4) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":37
 * class PyMEM(enum.Enum):
 *     PyMEM_CPU = MEM_CPU
 *     PyMEM_GPU = MEM_GPU             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MEM(sl::MEM_GPU); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEM_GPU, __pyx_t_4) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":35
 * 
 * 
 * class PyMEM(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyMEM_CPU = MEM_CPU
 *     PyMEM_GPU = MEM_GPU
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyMEM, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyMEM, __pyx_t_4) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":40
 * 
 * 
 * class PyCOPY_TYPE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyCOPY_TYPE_CPU_CPU = COPY_TYPE_CPU_CPU
 *     PyCOPY_TYPE_CPU_GPU = COPY_TYPE_CPU_GPU
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyCOPY_TYPE, __pyx_n_s_PyCOPY_TYPE, (PyObject *) NULL, __pyx_n_s_pyzed_core, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/core.pyx":41
 * 
 * class PyCOPY_TYPE(enum.Enum):
 *     PyCOPY_TYPE_CPU_CPU = COPY_TYPE_CPU_CPU             # <<<<<<<<<<<<<<
 *     PyCOPY_TYPE_CPU_GPU = COPY_TYPE_CPU_GPU
 *     PyCOPY_TYPE_GPU_GPU = COPY_TYPE_GPU_GPU
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_COPY_TYPE(sl::COPY_TYPE_CPU_CPU); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOPY_TYPE_CPU_CPU, __pyx_t_4) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":42
 * class PyCOPY_TYPE(enum.Enum):
 *     PyCOPY_TYPE_CPU_CPU = COPY_TYPE_CPU_CPU
 *     PyCOPY_TYPE_CPU_GPU = COPY_TYPE_CPU_GPU             # <<<<<<<<<<<<<<
 *     PyCOPY_TYPE_GPU_GPU = COPY_TYPE_GPU_GPU
 *     PyCOPY_TYPE_GPU_CPU = COPY_TYPE_GPU_CPU
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_COPY_TYPE(sl::COPY_TYPE_CPU_GPU); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOPY_TYPE_CPU_GPU, __pyx_t_4) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":43
 *     PyCOPY_TYPE_CPU_CPU = COPY_TYPE_CPU_CPU
 *     PyCOPY_TYPE_CPU_GPU = COPY_TYPE_CPU_GPU
 *     PyCOPY_TYPE_GPU_GPU = COPY_TYPE_GPU_GPU             # <<<<<<<<<<<<<<
 *     PyCOPY_TYPE_GPU_CPU = COPY_TYPE_GPU_CPU
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_COPY_TYPE(sl::COPY_TYPE_GPU_GPU); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOPY_TYPE_GPU_GPU, __pyx_t_4) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":44
 *     PyCOPY_TYPE_CPU_GPU = COPY_TYPE_CPU_GPU
 *     PyCOPY_TYPE_GPU_GPU = COPY_TYPE_GPU_GPU
 *     PyCOPY_TYPE_GPU_CPU = COPY_TYPE_GPU_CPU             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_COPY_TYPE(sl::COPY_TYPE_GPU_CPU); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOPY_TYPE_GPU_CPU, __pyx_t_4) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":40
 * 
 * 
 * class PyCOPY_TYPE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyCOPY_TYPE_CPU_CPU = COPY_TYPE_CPU_CPU
 *     PyCOPY_TYPE_CPU_GPU = COPY_TYPE_CPU_GPU
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyCOPY_TYPE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyCOPY_TYPE, __pyx_t_4) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":47
 * 
 * 
 * class PyMAT_TYPE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_32F_C1 = MAT_TYPE_32F_C1
 *     PyMAT_TYPE_32F_C2 = MAT_TYPE_32F_C2
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyMAT_TYPE, __pyx_n_s_PyMAT_TYPE, (PyObject *) NULL, __pyx_n_s_pyzed_core, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/core.pyx":48
 * 
 * class PyMAT_TYPE(enum.Enum):
 *     PyMAT_TYPE_32F_C1 = MAT_TYPE_32F_C1             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_32F_C2 = MAT_TYPE_32F_C2
 *     PyMAT_TYPE_32F_C3 = MAT_TYPE_32F_C3
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(sl::MAT_TYPE_32F_C1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_32F_C1, __pyx_t_4) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":49
 * class PyMAT_TYPE(enum.Enum):
 *     PyMAT_TYPE_32F_C1 = MAT_TYPE_32F_C1
 *     PyMAT_TYPE_32F_C2 = MAT_TYPE_32F_C2             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_32F_C3 = MAT_TYPE_32F_C3
 *     PyMAT_TYPE_32F_C4 = MAT_TYPE_32F_C4
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(sl::MAT_TYPE_32F_C2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_32F_C2, __pyx_t_4) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":50
 *     PyMAT_TYPE_32F_C1 = MAT_TYPE_32F_C1
 *     PyMAT_TYPE_32F_C2 = MAT_TYPE_32F_C2
 *     PyMAT_TYPE_32F_C3 = MAT_TYPE_32F_C3             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_32F_C4 = MAT_TYPE_32F_C4
 *     PyMAT_TYPE_8U_C1 = MAT_TYPE_8U_C1
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(sl::MAT_TYPE_32F_C3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_32F_C3, __pyx_t_4) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":51
 *     PyMAT_TYPE_32F_C2 = MAT_TYPE_32F_C2
 *     PyMAT_TYPE_32F_C3 = MAT_TYPE_32F_C3
 *     PyMAT_TYPE_32F_C4 = MAT_TYPE_32F_C4             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_8U_C1 = MAT_TYPE_8U_C1
 *     PyMAT_TYPE_8U_C2 = MAT_TYPE_8U_C2
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(sl::MAT_TYPE_32F_C4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_32F_C4, __pyx_t_4) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":52
 *     PyMAT_TYPE_32F_C3 = MAT_TYPE_32F_C3
 *     PyMAT_TYPE_32F_C4 = MAT_TYPE_32F_C4
 *     PyMAT_TYPE_8U_C1 = MAT_TYPE_8U_C1             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_8U_C2 = MAT_TYPE_8U_C2
 *     PyMAT_TYPE_8U_C3 = MAT_TYPE_8U_C3
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(sl::MAT_TYPE_8U_C1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_8U_C1, __pyx_t_4) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":53
 *     PyMAT_TYPE_32F_C4 = MAT_TYPE_32F_C4
 *     PyMAT_TYPE_8U_C1 = MAT_TYPE_8U_C1
 *     PyMAT_TYPE_8U_C2 = MAT_TYPE_8U_C2             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_8U_C3 = MAT_TYPE_8U_C3
 *     PyMAT_TYPE_8U_C4 = MAT_TYPE_8U_C4
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(sl::MAT_TYPE_8U_C2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_8U_C2, __pyx_t_4) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":54
 *     PyMAT_TYPE_8U_C1 = MAT_TYPE_8U_C1
 *     PyMAT_TYPE_8U_C2 = MAT_TYPE_8U_C2
 *     PyMAT_TYPE_8U_C3 = MAT_TYPE_8U_C3             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_8U_C4 = MAT_TYPE_8U_C4
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(sl::MAT_TYPE_8U_C3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_8U_C3, __pyx_t_4) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":55
 *     PyMAT_TYPE_8U_C2 = MAT_TYPE_8U_C2
 *     PyMAT_TYPE_8U_C3 = MAT_TYPE_8U_C3
 *     PyMAT_TYPE_8U_C4 = MAT_TYPE_8U_C4             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(sl::MAT_TYPE_8U_C4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMAT_TYPE_8U_C4, __pyx_t_4) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/core.pyx":47
 * 
 * 
 * class PyMAT_TYPE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyMAT_TYPE_32F_C1 = MAT_TYPE_32F_C1
 *     PyMAT_TYPE_32F_C2 = MAT_TYPE_32F_C2
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyMAT_TYPE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyMAT_TYPE, __pyx_t_4) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":58
 * 
 * 
 * def get_current_timestamp():             # <<<<<<<<<<<<<<
 *     return getCurrentTimeStamp()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_4core_1get_current_timestamp, NULL, __pyx_n_s_pyzed_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_current_timestamp, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/core.pyx":194
 *         self.mat = Mat()
 * 
 *     def init_mat_type(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(width, height, mat_type.value, memory_type.value)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__11 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/core.pyx":200
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_cpu(self, width, height, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(width, height, mat_type.value, ptr.encode(), step, memory_type.value)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__13 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":218
 *             raise TypeError("Argument are not of PyMAT_TYPE or PyMEM type.")
 * 
 *     def init_mat_resolution_cpu(self, PyResolution resolution, mat_type, ptr, step, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat = Mat(Resolution(resolution.width, resolution.height), mat_type.value, ptr.encode(),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__17 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/core.pyx":235
 *         self.mat = Mat(matrix.mat)
 * 
 *     def alloc_size(self, width, height, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat.alloc(<size_t> width, <size_t> height, mat_type.value, memory_type.value)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__20 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":241
 *             raise TypeError("Arguments must be of PyMat and PyMEM types.")
 * 
 *     def alloc_resolution(self, PyResolution resolution, mat_type, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if isinstance(mat_type, PyMAT_TYPE) and isinstance(memory_type, PyMEM):
 *             self.mat.alloc(resolution.width, resolution.height, mat_type.value, memory_type.value)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__22 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/core.pyx":261
 *         return types.PyERROR_CODE(self.mat.updateGPUfromCPU())
 * 
 *     def copy_to(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):             # <<<<<<<<<<<<<<
 *         dst = PyMat()
 *         print(types.PyERROR_CODE(self.mat.copyTo(dst.mat, cpy_type.value)))
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyCOPY_TYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyCOPY_TYPE_CPU_CPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__25 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":266
 *         return dst
 * 
 *     def set_from(self, cpy_type=PyCOPY_TYPE.PyCOPY_TYPE_CPU_CPU):             # <<<<<<<<<<<<<<
 *         dst = PyMat()
 *         print(self.mat.setFrom(dst.mat, cpy_type.value))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyCOPY_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyCOPY_TYPE_CPU_CPU); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__26 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/core.pyx":277
 *         return types.PyERROR_CODE(self.mat.write(filepath.encode()))
 * 
 *     def set_to(self, value, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setToUchar1(self.mat, value, memory_type.value))
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__27 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":301
 *                                       value[3]), memory_type.value))
 * 
 *     def set_value(self, x, y, value, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if self.get_data_type() == PyMAT_TYPE.PyMAT_TYPE_8U_C1:
 *             return types.PyERROR_CODE(setValueUchar1(self.mat, x, y, value, memory_type.value))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__28 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/core.pyx":325
 *                                       value[3]), memory_type.value))
 * 
 *     def get_value(self, x, y, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         cdef uchar1 value1u
 *         cdef types.Vector2[uchar1]* value2u = new types.Vector2[uchar1]()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__29 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":382
 *         return PyMEM(self.mat.getMemoryType())
 * 
 *     def get_data(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         shape = None
 *         if self.mat.getChannels() == 1:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__30 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/core.pyx":423
 *         return arr
 * 
 *     def get_step_bytes(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if type(memory_type) == PyMEM:
 *             return self.mat.getStepBytes(memory_type.value)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__32 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzed/core.pyx":429
 *             raise TypeError("Argument is not of PyMEM type.")
 * 
 *     def get_step(self, memory_type=PyMEM.PyMEM_CPU):             # <<<<<<<<<<<<<<
 *         if type(memory_type) == PyMEM:
 *             return self.mat.getStep(memory_type.value)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyMEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PyMEM_CPU); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__34 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzed/core.pyx":457
 * 
 *     @staticmethod
 *     def swap(self, PyMat mat1, PyMat mat2):             # <<<<<<<<<<<<<<
 *         self.mat.swap(mat1, mat2)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_4core_5PyMat_73swap, NULL, __pyx_n_s_pyzed_core); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzed_4core_PyMat->tp_dict, __pyx_n_s_swap, __pyx_t_2) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5pyzed_4core_PyMat);

  /* "pyzed/core.pyx":456
 *         return types.PyERROR_CODE(self.mat.move(py_mat.mat))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def swap(self, PyMat mat1, PyMat mat2):
 *         self.mat.swap(mat1, mat2)
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5pyzed_4core_PyMat, __pyx_n_s_swap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzed_4core_PyMat->tp_dict, __pyx_n_s_swap, __pyx_t_2) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5pyzed_4core_PyMat);

  /* "pyzed/core.pyx":603
 * 
 *     @staticmethod
 *     def normalize_orientation(PyOrientation orient):             # <<<<<<<<<<<<<<
 *         orient.orientation.normalise()
 *         return orient
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_4core_13PyOrientation_25normalize_orientation, NULL, __pyx_n_s_pyzed_core); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzed_4core_PyOrientation->tp_dict, __pyx_n_s_normalize_orientation, __pyx_t_2) < 0) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5pyzed_4core_PyOrientation);

  /* "pyzed/core.pyx":602
 *         self.orientation.normalise()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def normalize_orientation(PyOrientation orient):
 *         orient.orientation.normalise()
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5pyzed_4core_PyOrientation, __pyx_n_s_normalize_orientation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzed_4core_PyOrientation->tp_dict, __pyx_n_s_normalize_orientation, __pyx_t_2) < 0) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5pyzed_4core_PyOrientation);

  /* "pyzed/core.pyx":1
 * ########################################################################             # <<<<<<<<<<<<<<
 * #
 * # Copyright (c) 2017, STEREOLABS.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct__sl_3a__3a_Resolution")
 * cdef struct_type __pyx_convert__from_py_struct__sl_3a__3a_Resolution(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyzed.core", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyzed.core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* KeywordStringCheck */
  static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* SetItemInt */
    static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyCFunctionFastCall */
      #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
      static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* decode_c_string */
      static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* CallNextTpDealloc */
        static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* SetupReduce */
        static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CalculateMetaclass */
        static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
        static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetNameInClass */
        static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    return __Pyx_GetModuleGlobalName(name);
}
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
        static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject *use_cline;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        __Pyx_PyThreadState_Current, /*PyThreadState *tstate,*/
        py_code,                     /*PyCodeObject *code,*/
        __pyx_d,              /*PyObject *globals,*/
        0                            /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__sl_3a__3a_MEM(enum sl::MEM value) {
    const enum sl::MEM neg_one = (enum sl::MEM) -1, const_zero = (enum sl::MEM) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum sl::MEM) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum sl::MEM) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum sl::MEM) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum sl::MEM) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum sl::MEM) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum sl::MEM),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__sl_3a__3a_COPY_TYPE(enum sl::COPY_TYPE value) {
    const enum sl::COPY_TYPE neg_one = (enum sl::COPY_TYPE) -1, const_zero = (enum sl::COPY_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum sl::COPY_TYPE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum sl::COPY_TYPE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum sl::COPY_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum sl::COPY_TYPE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum sl::COPY_TYPE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum sl::COPY_TYPE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__sl_3a__3a_MAT_TYPE(enum sl::MAT_TYPE value) {
    const enum sl::MAT_TYPE neg_one = (enum sl::MAT_TYPE) -1, const_zero = (enum sl::MAT_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum sl::MAT_TYPE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum sl::MAT_TYPE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum sl::MAT_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum sl::MAT_TYPE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum sl::MAT_TYPE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum sl::MAT_TYPE),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_timeStamp(sl::timeStamp value) {
    const sl::timeStamp neg_one = (sl::timeStamp) -1, const_zero = (sl::timeStamp) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::timeStamp) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::timeStamp) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::timeStamp) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::timeStamp) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::timeStamp) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::timeStamp),
                                     little, !is_unsigned);
    }
}

static PyObject* __pyx_convert__to_py_struct__sl_3a__3a_Resolution(struct sl::Resolution s) {
          PyObject* res;
          PyObject* member;
          res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
          member = __Pyx_PyInt_FromSize_t(s.width); if (unlikely(!member)) goto bad;
          if (unlikely(PyDict_SetItem(res, __pyx_n_s_width, member) < 0)) goto bad;
          Py_DECREF(member);
          member = __Pyx_PyInt_FromSize_t(s.height); if (unlikely(!member)) goto bad;
          if (unlikely(PyDict_SetItem(res, __pyx_n_s_height, member) < 0)) goto bad;
          Py_DECREF(member);
          return res;
          bad:
          Py_XDECREF(member);
          Py_DECREF(res);
          return NULL;
        }
        /* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_ERROR_CODE(sl::ERROR_CODE value) {
    const sl::ERROR_CODE neg_one = (sl::ERROR_CODE) -1, const_zero = (sl::ERROR_CODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::ERROR_CODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::ERROR_CODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::ERROR_CODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::ERROR_CODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::ERROR_CODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::ERROR_CODE),
                                     little, !is_unsigned);
    }
}

/* Print */
        #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE enum sl::MAT_TYPE __Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(PyObject *x) {
    const enum sl::MAT_TYPE neg_one = (enum sl::MAT_TYPE) -1, const_zero = (enum sl::MAT_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum sl::MAT_TYPE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum sl::MAT_TYPE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum sl::MAT_TYPE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum sl::MAT_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) >= 2 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) (((((enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum sl::MAT_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) >= 3 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) (((((((enum sl::MAT_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum sl::MAT_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) >= 4 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) (((((((((enum sl::MAT_TYPE)digits[3]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum sl::MAT_TYPE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum sl::MAT_TYPE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MAT_TYPE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum sl::MAT_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MAT_TYPE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum sl::MAT_TYPE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) (((enum sl::MAT_TYPE)-1)*(((((enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum sl::MAT_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) ((((((enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) (((enum sl::MAT_TYPE)-1)*(((((((enum sl::MAT_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum sl::MAT_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) ((((((((enum sl::MAT_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) (((enum sl::MAT_TYPE)-1)*(((((((((enum sl::MAT_TYPE)digits[3]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum sl::MAT_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MAT_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MAT_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum sl::MAT_TYPE) ((((((((((enum sl::MAT_TYPE)digits[3]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::MAT_TYPE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum sl::MAT_TYPE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MAT_TYPE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum sl::MAT_TYPE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MAT_TYPE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum sl::MAT_TYPE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum sl::MAT_TYPE) -1;
        }
    } else {
        enum sl::MAT_TYPE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum sl::MAT_TYPE) -1;
        val = __Pyx_PyInt_As_enum__sl_3a__3a_MAT_TYPE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum sl::MAT_TYPE");
    return (enum sl::MAT_TYPE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum sl::MAT_TYPE");
    return (enum sl::MAT_TYPE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE enum sl::MEM __Pyx_PyInt_As_enum__sl_3a__3a_MEM(PyObject *x) {
    const enum sl::MEM neg_one = (enum sl::MEM) -1, const_zero = (enum sl::MEM) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum sl::MEM) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum sl::MEM, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum sl::MEM) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum sl::MEM) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum sl::MEM, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum sl::MEM) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) >= 2 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((((enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum sl::MEM) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) >= 3 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((((((enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum sl::MEM) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) >= 4 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((((((((enum sl::MEM)digits[3]) << PyLong_SHIFT) | (enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum sl::MEM) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum sl::MEM) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MEM, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum sl::MEM) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MEM, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum sl::MEM) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum sl::MEM, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum sl::MEM,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum sl::MEM) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 2 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((enum sl::MEM)-1)*(((((enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum sl::MEM) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 2 * PyLong_SHIFT) {
                            return (enum sl::MEM) ((((((enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum sl::MEM) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 3 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((enum sl::MEM)-1)*(((((((enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum sl::MEM) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 3 * PyLong_SHIFT) {
                            return (enum sl::MEM) ((((((((enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum sl::MEM) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 4 * PyLong_SHIFT) {
                            return (enum sl::MEM) (((enum sl::MEM)-1)*(((((((((enum sl::MEM)digits[3]) << PyLong_SHIFT) | (enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum sl::MEM) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::MEM, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::MEM) - 1 > 4 * PyLong_SHIFT) {
                            return (enum sl::MEM) ((((((((((enum sl::MEM)digits[3]) << PyLong_SHIFT) | (enum sl::MEM)digits[2]) << PyLong_SHIFT) | (enum sl::MEM)digits[1]) << PyLong_SHIFT) | (enum sl::MEM)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum sl::MEM) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MEM, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum sl::MEM) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::MEM, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum sl::MEM val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum sl::MEM) -1;
        }
    } else {
        enum sl::MEM val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum sl::MEM) -1;
        val = __Pyx_PyInt_As_enum__sl_3a__3a_MEM(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum sl::MEM");
    return (enum sl::MEM) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum sl::MEM");
    return (enum sl::MEM) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE enum sl::COPY_TYPE __Pyx_PyInt_As_enum__sl_3a__3a_COPY_TYPE(PyObject *x) {
    const enum sl::COPY_TYPE neg_one = (enum sl::COPY_TYPE) -1, const_zero = (enum sl::COPY_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum sl::COPY_TYPE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum sl::COPY_TYPE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum sl::COPY_TYPE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum sl::COPY_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) >= 2 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) (((((enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum sl::COPY_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) >= 3 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) (((((((enum sl::COPY_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum sl::COPY_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) >= 4 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) (((((((((enum sl::COPY_TYPE)digits[3]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum sl::COPY_TYPE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum sl::COPY_TYPE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::COPY_TYPE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum sl::COPY_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::COPY_TYPE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum sl::COPY_TYPE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) (((enum sl::COPY_TYPE)-1)*(((((enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum sl::COPY_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) ((((((enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) (((enum sl::COPY_TYPE)-1)*(((((((enum sl::COPY_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum sl::COPY_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) ((((((((enum sl::COPY_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) (((enum sl::COPY_TYPE)-1)*(((((((((enum sl::COPY_TYPE)digits[3]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum sl::COPY_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum sl::COPY_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum sl::COPY_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum sl::COPY_TYPE) ((((((((((enum sl::COPY_TYPE)digits[3]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[2]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[1]) << PyLong_SHIFT) | (enum sl::COPY_TYPE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum sl::COPY_TYPE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::COPY_TYPE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum sl::COPY_TYPE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum sl::COPY_TYPE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum sl::COPY_TYPE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum sl::COPY_TYPE) -1;
        }
    } else {
        enum sl::COPY_TYPE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum sl::COPY_TYPE) -1;
        val = __Pyx_PyInt_As_enum__sl_3a__3a_COPY_TYPE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum sl::COPY_TYPE");
    return (enum sl::COPY_TYPE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum sl::COPY_TYPE");
    return (enum sl::COPY_TYPE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned char, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) >= 2 * PyLong_SHIFT) {
                            return (unsigned char) (((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) >= 3 * PyLong_SHIFT) {
                            return (unsigned char) (((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) >= 4 * PyLong_SHIFT) {
                            return (unsigned char) (((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned char) (((unsigned char)-1)*(((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned char) ((((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned char) (((unsigned char)-1)*(((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned char) ((((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned char) (((unsigned char)-1)*(((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned char) ((((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned char) -1;
        }
    } else {
        unsigned char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned char) -1;
        val = __Pyx_PyInt_As_unsigned_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned char");
    return (unsigned char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned char");
    return (unsigned char) -1;
}

/* PrintOne */
        #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* FastTypeChecks */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
        #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
