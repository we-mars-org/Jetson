/* Generated by Cython 0.27.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\Program Files (x86)\\ZED SDK\\include\\sl\\defines.hpp"
        ],
        "include_dirs": [
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include",
            "C:\\Program Files (x86)\\ZED SDK\\include",
            "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0/include"
        ],
        "language": "c++",
        "libraries": [
            "sl_core64",
            "sl_scanning64",
            "sl_zed64"
        ],
        "library_dirs": [
            "C:\\Users\\djorna.Pokedex\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\numpy\\core\\include",
            "C:\\Program Files (x86)\\ZED SDK\\lib",
            "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0/lib/x64"
        ],
        "name": "pyzed.defines",
        "sources": [
            "pyzed/defines.pyx"
        ]
    },
    "module_name": "pyzed.defines"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_1"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyzed__defines
#define __PYX_HAVE_API__pyzed__defines
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include "sl/defines.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pyzed\\defines.pyx",
  "stringsource",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SENSING_MODE(sl::SENSING_MODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_DEPTH_FORMAT(sl::DEPTH_FORMAT value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_POINT_CLOUD_FORMAT(sl::POINT_CLOUD_FORMAT value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_REFERENCE_FRAME(sl::REFERENCE_FRAME value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SVO_COMPRESSION_MODE(sl::SVO_COMPRESSION_MODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::RESOLUTION __Pyx_PyInt_As_sl_3a__3a_RESOLUTION(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::SELF_CALIBRATION_STATE __Pyx_PyInt_As_sl_3a__3a_SELF_CALIBRATION_STATE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::DEPTH_MODE __Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::SENSING_MODE __Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::UNIT __Pyx_PyInt_As_sl_3a__3a_UNIT(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::TRACKING_STATE __Pyx_PyInt_As_sl_3a__3a_TRACKING_STATE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE sl::SPATIAL_MAPPING_STATE __Pyx_PyInt_As_sl_3a__3a_SPATIAL_MAPPING_STATE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'pyzed.defines' */
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const std::vector<std::pair<int,int> >  &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pyzed.defines"
int __pyx_module_is_main_pyzed__defines = 0;

/* Implementation of 'pyzed.defines' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_Enum[] = "Enum";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_unit[] = "unit";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_PyUNIT[] = "PyUNIT";
static const char __pyx_k_PyVIEW[] = "PyVIEW";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_PyMEASURE[] = "PyMEASURE";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_PyUNIT_FOOT[] = "PyUNIT_FOOT";
static const char __pyx_k_PyUNIT_INCH[] = "PyUNIT_INCH";
static const char __pyx_k_PyUNIT_LAST[] = "PyUNIT_LAST";
static const char __pyx_k_PyVIEW_LAST[] = "PyVIEW_LAST";
static const char __pyx_k_PyVIEW_LEFT[] = "PyVIEW_LEFT";
static const char __pyx_k_str_to_mode[] = "str_to_mode";
static const char __pyx_k_str_to_unit[] = "str_to_unit";
static const char __pyx_k_video_modes[] = "video_modes";
static const char __pyx_k_PyDEPTH_MODE[] = "PyDEPTH_MODE";
static const char __pyx_k_PyRESOLUTION[] = "PyRESOLUTION";
static const char __pyx_k_PyUNIT_METER[] = "PyUNIT_METER";
static const char __pyx_k_PyUNIT___str[] = "PyUNIT.__str__";
static const char __pyx_k_PyVIEW_DEPTH[] = "PyVIEW_DEPTH";
static const char __pyx_k_PyVIEW_RIGHT[] = "PyVIEW_RIGHT";
static const char __pyx_k_PyMEASURE_XYZ[] = "PyMEASURE_XYZ";
static const char __pyx_k_PyUNIT___repr[] = "PyUNIT.__repr__";
static const char __pyx_k_pyzed_defines[] = "pyzed.defines";
static const char __pyx_k_PyDEPTH_FORMAT[] = "PyDEPTH_FORMAT";
static const char __pyx_k_PyMEASURE_LAST[] = "PyMEASURE_LAST";
static const char __pyx_k_PySENSING_MODE[] = "PySENSING_MODE";
static const char __pyx_k_PyVIEW_NORMALS[] = "PyVIEW_NORMALS";
static const char __pyx_k_PyMEASURE_DEPTH[] = "PyMEASURE_DEPTH";
static const char __pyx_k_PyRESOLUTION_VGA[] = "PyRESOLUTION_VGA";
static const char __pyx_k_PyTRACKING_STATE[] = "PyTRACKING_STATE";
static const char __pyx_k_PyVIEW_LEFT_GRAY[] = "PyVIEW_LEFT_GRAY";
static const char __pyx_k_PyCAMERA_SETTINGS[] = "PyCAMERA_SETTINGS";
static const char __pyx_k_PyDEPTH_MODE_LAST[] = "PyDEPTH_MODE_LAST";
static const char __pyx_k_PyDEPTH_MODE_NONE[] = "PyDEPTH_MODE_NONE";
static const char __pyx_k_PyMEASURE_NORMALS[] = "PyMEASURE_NORMALS";
static const char __pyx_k_PyMEASURE_XYZABGR[] = "PyMEASURE_XYZABGR";
static const char __pyx_k_PyMEASURE_XYZARGB[] = "PyMEASURE_XYZARGB";
static const char __pyx_k_PyMEASURE_XYZBGRA[] = "PyMEASURE_XYZBGRA";
static const char __pyx_k_PyMEASURE_XYZRGBA[] = "PyMEASURE_XYZRGBA";
static const char __pyx_k_PyREFERENCE_FRAME[] = "PyREFERENCE_FRAME";
static const char __pyx_k_PyRESOLUTION_HD2K[] = "PyRESOLUTION_HD2K";
static const char __pyx_k_PyRESOLUTION_LAST[] = "PyRESOLUTION_LAST";
static const char __pyx_k_PyUNIT_CENTIMETER[] = "PyUNIT_CENTIMETER";
static const char __pyx_k_PyUNIT_MILLIMETER[] = "PyUNIT_MILLIMETER";
static const char __pyx_k_PyVIEW_CONFIDENCE[] = "PyVIEW_CONFIDENCE";
static const char __pyx_k_PyVIEW_RIGHT_GRAY[] = "PyVIEW_RIGHT_GRAY";
static const char __pyx_k_pyzed_defines_pyx[] = "pyzed\\defines.pyx";
static const char __pyx_k_PyDEPTH_FORMAT_PFM[] = "PyDEPTH_FORMAT_PFM";
static const char __pyx_k_PyDEPTH_FORMAT_PGM[] = "PyDEPTH_FORMAT_PGM";
static const char __pyx_k_PyDEPTH_FORMAT_PNG[] = "PyDEPTH_FORMAT_PNG";
static const char __pyx_k_PyDEPTH_MODE___str[] = "PyDEPTH_MODE.__str__";
static const char __pyx_k_PyRESOLUTION_HD720[] = "PyRESOLUTION_HD720";
static const char __pyx_k_PyRESOLUTION___str[] = "PyRESOLUTION.__str__";
static const char __pyx_k_PyVIEW_DEPTH_RIGHT[] = "PyVIEW_DEPTH_RIGHT";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_PyAREA_EXPORT_STATE[] = "PyAREA_EXPORT_STATE";
static const char __pyx_k_PyCOORDINATE_SYSTEM[] = "PyCOORDINATE_SYSTEM";
static const char __pyx_k_PyDEPTH_FORMAT_LAST[] = "PyDEPTH_FORMAT_LAST";
static const char __pyx_k_PyDEPTH_MODE_MEDIUM[] = "PyDEPTH_MODE_MEDIUM";
static const char __pyx_k_PyDEPTH_MODE___repr[] = "PyDEPTH_MODE.__repr__";
static const char __pyx_k_PyMEASURE_DISPARITY[] = "PyMEASURE_DISPARITY";
static const char __pyx_k_PyMEASURE_XYZ_RIGHT[] = "PyMEASURE_XYZ_RIGHT";
static const char __pyx_k_PyRESOLUTION_HD1080[] = "PyRESOLUTION_HD1080";
static const char __pyx_k_PyRESOLUTION___repr[] = "PyRESOLUTION.__repr__";
static const char __pyx_k_PySENSING_MODE_FILL[] = "PySENSING_MODE_FILL";
static const char __pyx_k_PySENSING_MODE_LAST[] = "PySENSING_MODE_LAST";
static const char __pyx_k_PyTRACKING_STATE_OK[] = "PyTRACKING_STATE_OK";
static const char __pyx_k_PyVIEW_SIDE_BY_SIDE[] = "PyVIEW_SIDE_BY_SIDE";
static const char __pyx_k_PyDEPTH_MODE_QUALITY[] = "PyDEPTH_MODE_QUALITY";
static const char __pyx_k_PyMEASURE_CONFIDENCE[] = "PyMEASURE_CONFIDENCE";
static const char __pyx_k_PyPOINT_CLOUD_FORMAT[] = "PyPOINT_CLOUD_FORMAT";
static const char __pyx_k_PySENSING_MODE___str[] = "PySENSING_MODE.__str__";
static const char __pyx_k_PyTRACKING_STATE_OFF[] = "PyTRACKING_STATE_OFF";
static const char __pyx_k_PyVIEW_NORMALS_RIGHT[] = "PyVIEW_NORMALS_RIGHT";
static const char __pyx_k_PyCAMERA_SETTINGS_HUE[] = "PyCAMERA_SETTINGS_HUE";
static const char __pyx_k_PyMEASURE_DEPTH_RIGHT[] = "PyMEASURE_DEPTH_RIGHT";
static const char __pyx_k_PySENSING_MODE___repr[] = "PySENSING_MODE.__repr__";
static const char __pyx_k_PyTRACKING_STATE_LAST[] = "PyTRACKING_STATE_LAST";
static const char __pyx_k_PyCAMERA_SETTINGS_GAIN[] = "PyCAMERA_SETTINGS_GAIN";
static const char __pyx_k_PyCAMERA_SETTINGS_LAST[] = "PyCAMERA_SETTINGS_LAST";
static const char __pyx_k_PyREFERENCE_FRAME_LAST[] = "PyREFERENCE_FRAME_LAST";
static const char __pyx_k_PySVO_COMPRESSION_MODE[] = "PySVO_COMPRESSION_MODE";
static const char __pyx_k_PyTRACKING_STATE___str[] = "PyTRACKING_STATE.__str__";
static const char __pyx_k_PyMEASURE_NORMALS_RIGHT[] = "PyMEASURE_NORMALS_RIGHT";
static const char __pyx_k_PyMEASURE_XYZABGR_RIGHT[] = "PyMEASURE_XYZABGR_RIGHT";
static const char __pyx_k_PyMEASURE_XYZARGB_RIGHT[] = "PyMEASURE_XYZARGB_RIGHT";
static const char __pyx_k_PyMEASURE_XYZBGRA_RIGHT[] = "PyMEASURE_XYZBGRA_RIGHT";
static const char __pyx_k_PyMEASURE_XYZRGBA_RIGHT[] = "PyMEASURE_XYZRGBA_RIGHT";
static const char __pyx_k_PyREFERENCE_FRAME_WORLD[] = "PyREFERENCE_FRAME_WORLD";
static const char __pyx_k_PySENSING_MODE_STANDARD[] = "PySENSING_MODE_STANDARD";
static const char __pyx_k_PySPATIAL_MAPPING_STATE[] = "PySPATIAL_MAPPING_STATE";
static const char __pyx_k_PyTRACKING_STATE___repr[] = "PyTRACKING_STATE.__repr__";
static const char __pyx_k_PyVIEW_LEFT_UNRECTIFIED[] = "PyVIEW_LEFT_UNRECTIFIED";
static const char __pyx_k_PyAREA_EXPORT_STATE_LAST[] = "PyAREA_EXPORT_STATE_LAST";
static const char __pyx_k_PyCOORDINATE_SYSTEM_LAST[] = "PyCOORDINATE_SYSTEM_LAST";
static const char __pyx_k_PyDEPTH_MODE_PERFORMANCE[] = "PyDEPTH_MODE_PERFORMANCE";
static const char __pyx_k_PyREFERENCE_FRAME_CAMERA[] = "PyREFERENCE_FRAME_CAMERA";
static const char __pyx_k_PySELF_CALIBRATION_STATE[] = "PySELF_CALIBRATION_STATE";
static const char __pyx_k_PyVIEW_RIGHT_UNRECTIFIED[] = "PyVIEW_RIGHT_UNRECTIFIED";
static const char __pyx_k_PyCOORDINATE_SYSTEM_IMAGE[] = "PyCOORDINATE_SYSTEM_IMAGE";
static const char __pyx_k_PyMEASURE_DISPARITY_RIGHT[] = "PyMEASURE_DISPARITY_RIGHT";
static const char __pyx_k_PyPOINT_CLOUD_FORMAT_LAST[] = "PyPOINT_CLOUD_FORMAT_LAST";
static const char __pyx_k_PyCAMERA_SETTINGS_CONTRAST[] = "PyCAMERA_SETTINGS_CONTRAST";
static const char __pyx_k_PyCAMERA_SETTINGS_EXPOSURE[] = "PyCAMERA_SETTINGS_EXPOSURE";
static const char __pyx_k_PySPATIAL_MAPPING_STATE_OK[] = "PySPATIAL_MAPPING_STATE_OK";
static const char __pyx_k_PySVO_COMPRESSION_MODE_RAW[] = "PySVO_COMPRESSION_MODE_RAW";
static const char __pyx_k_PyTRACKING_STATE_SEARCHING[] = "PyTRACKING_STATE_SEARCHING";
static const char __pyx_k_PyAREA_EXPORT_STATE_RUNNING[] = "PyAREA_EXPORT_STATE_RUNNING";
static const char __pyx_k_PyAREA_EXPORT_STATE_SUCCESS[] = "PyAREA_EXPORT_STATE_SUCCESS";
static const char __pyx_k_PySVO_COMPRESSION_MODE_LAST[] = "PySVO_COMPRESSION_MODE_LAST";
static const char __pyx_k_PyCAMERA_SETTINGS_BRIGHTNESS[] = "PyCAMERA_SETTINGS_BRIGHTNESS";
static const char __pyx_k_PyCAMERA_SETTINGS_SATURATION[] = "PyCAMERA_SETTINGS_SATURATION";
static const char __pyx_k_PySPATIAL_MAPPING_STATE_LAST[] = "PySPATIAL_MAPPING_STATE_LAST";
static const char __pyx_k_PySVO_COMPRESSION_MODE_LOSSY[] = "PySVO_COMPRESSION_MODE_LOSSY";
static const char __pyx_k_PyTRACKING_STATE_FPS_TOO_LOW[] = "PyTRACKING_STATE_FPS_TOO_LOW";
static const char __pyx_k_PyVIEW_LEFT_UNRECTIFIED_GRAY[] = "PyVIEW_LEFT_UNRECTIFIED_GRAY";
static const char __pyx_k_PySELF_CALIBRATION_STATE_LAST[] = "PySELF_CALIBRATION_STATE_LAST";
static const char __pyx_k_PySPATIAL_MAPPING_STATE___str[] = "PySPATIAL_MAPPING_STATE.__str__";
static const char __pyx_k_PyVIEW_RIGHT_UNRECTIFIED_GRAY[] = "PyVIEW_RIGHT_UNRECTIFIED_GRAY";
static const char __pyx_k_PyAREA_EXPORT_STATE_FILE_EMPTY[] = "PyAREA_EXPORT_STATE_FILE_EMPTY";
static const char __pyx_k_PyAREA_EXPORT_STATE_FILE_ERROR[] = "PyAREA_EXPORT_STATE_FILE_ERROR";
static const char __pyx_k_PyCAMERA_SETTINGS_WHITEBALANCE[] = "PyCAMERA_SETTINGS_WHITEBALANCE";
static const char __pyx_k_PyPOINT_CLOUD_FORMAT_PCD_ASCII[] = "PyPOINT_CLOUD_FORMAT_PCD_ASCII";
static const char __pyx_k_PyPOINT_CLOUD_FORMAT_PLY_ASCII[] = "PyPOINT_CLOUD_FORMAT_PLY_ASCII";
static const char __pyx_k_PyPOINT_CLOUD_FORMAT_VTK_ASCII[] = "PyPOINT_CLOUD_FORMAT_VTK_ASCII";
static const char __pyx_k_PyPOINT_CLOUD_FORMAT_XYZ_ASCII[] = "PyPOINT_CLOUD_FORMAT_XYZ_ASCII";
static const char __pyx_k_PySELF_CALIBRATION_STATE___str[] = "PySELF_CALIBRATION_STATE.__str__";
static const char __pyx_k_PySPATIAL_MAPPING_STATE___repr[] = "PySPATIAL_MAPPING_STATE.__repr__";
static const char __pyx_k_PyAREA_EXPORT_STATE_NOT_STARTED[] = "PyAREA_EXPORT_STATE_NOT_STARTED";
static const char __pyx_k_PyCOORDINATE_SYSTEM_LEFT_HANDED[] = "PyCOORDINATE_SYSTEM_LEFT_HANDED_Y_UP";
static const char __pyx_k_PySELF_CALIBRATION_STATE_FAILED[] = "PySELF_CALIBRATION_STATE_FAILED";
static const char __pyx_k_PySELF_CALIBRATION_STATE___repr[] = "PySELF_CALIBRATION_STATE.__repr__";
static const char __pyx_k_PySPATIAL_MAPPING_STATE_FPS_TOO[] = "PySPATIAL_MAPPING_STATE_FPS_TOO_LOW";
static const char __pyx_k_PySVO_COMPRESSION_MODE_LOSSLESS[] = "PySVO_COMPRESSION_MODE_LOSSLESS";
static const char __pyx_k_PyAREA_EXPORT_STATE_SPATIAL_MEMO[] = "PyAREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED";
static const char __pyx_k_PyCAMERA_SETTINGS_AUTO_WHITEBALA[] = "PyCAMERA_SETTINGS_AUTO_WHITEBALANCE";
static const char __pyx_k_PyCOORDINATE_SYSTEM_RIGHT_HANDED[] = "PyCOORDINATE_SYSTEM_RIGHT_HANDED_Y_UP";
static const char __pyx_k_PySELF_CALIBRATION_STATE_NOT_STA[] = "PySELF_CALIBRATION_STATE_NOT_STARTED";
static const char __pyx_k_PySELF_CALIBRATION_STATE_RUNNING[] = "PySELF_CALIBRATION_STATE_RUNNING";
static const char __pyx_k_PySELF_CALIBRATION_STATE_SUCCESS[] = "PySELF_CALIBRATION_STATE_SUCCESS";
static const char __pyx_k_PySPATIAL_MAPPING_STATE_INITIALI[] = "PySPATIAL_MAPPING_STATE_INITIALIZING";
static const char __pyx_k_PySPATIAL_MAPPING_STATE_NOT_ENAB[] = "PySPATIAL_MAPPING_STATE_NOT_ENABLED";
static const char __pyx_k_PySPATIAL_MAPPING_STATE_NOT_ENOU[] = "PySPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY";
static const char __pyx_k_PyCOORDINATE_SYSTEM_LEFT_HANDED_2[] = "PyCOORDINATE_SYSTEM_LEFT_HANDED_Z_UP";
static const char __pyx_k_PyCOORDINATE_SYSTEM_RIGHT_HANDED_2[] = "PyCOORDINATE_SYSTEM_RIGHT_HANDED_Z_UP";
static PyObject *__pyx_n_s_Enum;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE_FILE_EMPTY;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE_FILE_ERROR;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE_LAST;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE_NOT_STARTED;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE_RUNNING;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE_SPATIAL_MEMO;
static PyObject *__pyx_n_s_PyAREA_EXPORT_STATE_SUCCESS;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_AUTO_WHITEBALA;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_BRIGHTNESS;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_CONTRAST;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_EXPOSURE;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_GAIN;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_HUE;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_LAST;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_SATURATION;
static PyObject *__pyx_n_s_PyCAMERA_SETTINGS_WHITEBALANCE;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM_IMAGE;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM_LAST;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM_LEFT_HANDED;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM_LEFT_HANDED_2;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM_RIGHT_HANDED;
static PyObject *__pyx_n_s_PyCOORDINATE_SYSTEM_RIGHT_HANDED_2;
static PyObject *__pyx_n_s_PyDEPTH_FORMAT;
static PyObject *__pyx_n_s_PyDEPTH_FORMAT_LAST;
static PyObject *__pyx_n_s_PyDEPTH_FORMAT_PFM;
static PyObject *__pyx_n_s_PyDEPTH_FORMAT_PGM;
static PyObject *__pyx_n_s_PyDEPTH_FORMAT_PNG;
static PyObject *__pyx_n_s_PyDEPTH_MODE;
static PyObject *__pyx_n_s_PyDEPTH_MODE_LAST;
static PyObject *__pyx_n_s_PyDEPTH_MODE_MEDIUM;
static PyObject *__pyx_n_s_PyDEPTH_MODE_NONE;
static PyObject *__pyx_n_s_PyDEPTH_MODE_PERFORMANCE;
static PyObject *__pyx_n_s_PyDEPTH_MODE_QUALITY;
static PyObject *__pyx_n_s_PyDEPTH_MODE___repr;
static PyObject *__pyx_n_s_PyDEPTH_MODE___str;
static PyObject *__pyx_n_s_PyMEASURE;
static PyObject *__pyx_n_s_PyMEASURE_CONFIDENCE;
static PyObject *__pyx_n_s_PyMEASURE_DEPTH;
static PyObject *__pyx_n_s_PyMEASURE_DEPTH_RIGHT;
static PyObject *__pyx_n_s_PyMEASURE_DISPARITY;
static PyObject *__pyx_n_s_PyMEASURE_DISPARITY_RIGHT;
static PyObject *__pyx_n_s_PyMEASURE_LAST;
static PyObject *__pyx_n_s_PyMEASURE_NORMALS;
static PyObject *__pyx_n_s_PyMEASURE_NORMALS_RIGHT;
static PyObject *__pyx_n_s_PyMEASURE_XYZ;
static PyObject *__pyx_n_s_PyMEASURE_XYZABGR;
static PyObject *__pyx_n_s_PyMEASURE_XYZABGR_RIGHT;
static PyObject *__pyx_n_s_PyMEASURE_XYZARGB;
static PyObject *__pyx_n_s_PyMEASURE_XYZARGB_RIGHT;
static PyObject *__pyx_n_s_PyMEASURE_XYZBGRA;
static PyObject *__pyx_n_s_PyMEASURE_XYZBGRA_RIGHT;
static PyObject *__pyx_n_s_PyMEASURE_XYZRGBA;
static PyObject *__pyx_n_s_PyMEASURE_XYZRGBA_RIGHT;
static PyObject *__pyx_n_s_PyMEASURE_XYZ_RIGHT;
static PyObject *__pyx_n_s_PyPOINT_CLOUD_FORMAT;
static PyObject *__pyx_n_s_PyPOINT_CLOUD_FORMAT_LAST;
static PyObject *__pyx_n_s_PyPOINT_CLOUD_FORMAT_PCD_ASCII;
static PyObject *__pyx_n_s_PyPOINT_CLOUD_FORMAT_PLY_ASCII;
static PyObject *__pyx_n_s_PyPOINT_CLOUD_FORMAT_VTK_ASCII;
static PyObject *__pyx_n_s_PyPOINT_CLOUD_FORMAT_XYZ_ASCII;
static PyObject *__pyx_n_s_PyREFERENCE_FRAME;
static PyObject *__pyx_n_s_PyREFERENCE_FRAME_CAMERA;
static PyObject *__pyx_n_s_PyREFERENCE_FRAME_LAST;
static PyObject *__pyx_n_s_PyREFERENCE_FRAME_WORLD;
static PyObject *__pyx_n_s_PyRESOLUTION;
static PyObject *__pyx_n_s_PyRESOLUTION_HD1080;
static PyObject *__pyx_n_s_PyRESOLUTION_HD2K;
static PyObject *__pyx_n_s_PyRESOLUTION_HD720;
static PyObject *__pyx_n_s_PyRESOLUTION_LAST;
static PyObject *__pyx_n_s_PyRESOLUTION_VGA;
static PyObject *__pyx_n_s_PyRESOLUTION___repr;
static PyObject *__pyx_n_s_PyRESOLUTION___str;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE_FAILED;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE_LAST;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE_NOT_STA;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE_RUNNING;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE_SUCCESS;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE___repr;
static PyObject *__pyx_n_s_PySELF_CALIBRATION_STATE___str;
static PyObject *__pyx_n_s_PySENSING_MODE;
static PyObject *__pyx_n_s_PySENSING_MODE_FILL;
static PyObject *__pyx_n_s_PySENSING_MODE_LAST;
static PyObject *__pyx_n_s_PySENSING_MODE_STANDARD;
static PyObject *__pyx_n_s_PySENSING_MODE___repr;
static PyObject *__pyx_n_s_PySENSING_MODE___str;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE_FPS_TOO;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE_INITIALI;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE_LAST;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE_NOT_ENAB;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE_NOT_ENOU;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE_OK;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE___repr;
static PyObject *__pyx_n_s_PySPATIAL_MAPPING_STATE___str;
static PyObject *__pyx_n_s_PySVO_COMPRESSION_MODE;
static PyObject *__pyx_n_s_PySVO_COMPRESSION_MODE_LAST;
static PyObject *__pyx_n_s_PySVO_COMPRESSION_MODE_LOSSLESS;
static PyObject *__pyx_n_s_PySVO_COMPRESSION_MODE_LOSSY;
static PyObject *__pyx_n_s_PySVO_COMPRESSION_MODE_RAW;
static PyObject *__pyx_n_s_PyTRACKING_STATE;
static PyObject *__pyx_n_s_PyTRACKING_STATE_FPS_TOO_LOW;
static PyObject *__pyx_n_s_PyTRACKING_STATE_LAST;
static PyObject *__pyx_n_s_PyTRACKING_STATE_OFF;
static PyObject *__pyx_n_s_PyTRACKING_STATE_OK;
static PyObject *__pyx_n_s_PyTRACKING_STATE_SEARCHING;
static PyObject *__pyx_n_s_PyTRACKING_STATE___repr;
static PyObject *__pyx_n_s_PyTRACKING_STATE___str;
static PyObject *__pyx_n_s_PyUNIT;
static PyObject *__pyx_n_s_PyUNIT_CENTIMETER;
static PyObject *__pyx_n_s_PyUNIT_FOOT;
static PyObject *__pyx_n_s_PyUNIT_INCH;
static PyObject *__pyx_n_s_PyUNIT_LAST;
static PyObject *__pyx_n_s_PyUNIT_METER;
static PyObject *__pyx_n_s_PyUNIT_MILLIMETER;
static PyObject *__pyx_n_s_PyUNIT___repr;
static PyObject *__pyx_n_s_PyUNIT___str;
static PyObject *__pyx_n_s_PyVIEW;
static PyObject *__pyx_n_s_PyVIEW_CONFIDENCE;
static PyObject *__pyx_n_s_PyVIEW_DEPTH;
static PyObject *__pyx_n_s_PyVIEW_DEPTH_RIGHT;
static PyObject *__pyx_n_s_PyVIEW_LAST;
static PyObject *__pyx_n_s_PyVIEW_LEFT;
static PyObject *__pyx_n_s_PyVIEW_LEFT_GRAY;
static PyObject *__pyx_n_s_PyVIEW_LEFT_UNRECTIFIED;
static PyObject *__pyx_n_s_PyVIEW_LEFT_UNRECTIFIED_GRAY;
static PyObject *__pyx_n_s_PyVIEW_NORMALS;
static PyObject *__pyx_n_s_PyVIEW_NORMALS_RIGHT;
static PyObject *__pyx_n_s_PyVIEW_RIGHT;
static PyObject *__pyx_n_s_PyVIEW_RIGHT_GRAY;
static PyObject *__pyx_n_s_PyVIEW_RIGHT_UNRECTIFIED;
static PyObject *__pyx_n_s_PyVIEW_RIGHT_UNRECTIFIED_GRAY;
static PyObject *__pyx_n_s_PyVIEW_SIDE_BY_SIDE;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enum;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyzed_defines;
static PyObject *__pyx_kp_s_pyzed_defines_pyx;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_str_to_mode;
static PyObject *__pyx_n_s_str_to_unit;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_unit;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_video_modes;
static PyObject *__pyx_pf_5pyzed_7defines_12PyRESOLUTION___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_12PyRESOLUTION_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_24PySELF_CALIBRATION_STATE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_24PySELF_CALIBRATION_STATE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_12PyDEPTH_MODE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_12PyDEPTH_MODE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_14PySENSING_MODE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_14PySENSING_MODE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_6PyUNIT___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_6PyUNIT_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_16PyTRACKING_STATE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_16PyTRACKING_STATE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_23PySPATIAL_MAPPING_STATE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_video_modes(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_2str_to_mode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_5pyzed_7defines_4str_to_unit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_unit); /* proto */
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;

/* "pyzed/defines.pyx":33
 *     PyRESOLUTION_LAST = RESOLUTION_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return resolution2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_12PyRESOLUTION_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_12PyRESOLUTION___str__[] = "PyRESOLUTION.__str__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_12PyRESOLUTION_1__str__ = {"__str__", (PyCFunction)__pyx_pw_5pyzed_7defines_12PyRESOLUTION_1__str__, METH_O, __pyx_doc_5pyzed_7defines_12PyRESOLUTION___str__};
static PyObject *__pyx_pw_5pyzed_7defines_12PyRESOLUTION_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_12PyRESOLUTION___str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_12PyRESOLUTION___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::RESOLUTION __pyx_t_2;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pyzed/defines.pyx":34
 * 
 *     def __str__(self):
 *         return resolution2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::RESOLUTION)__Pyx_PyInt_As_sl_3a__3a_RESOLUTION(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::resolution2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":33
 *     PyRESOLUTION_LAST = RESOLUTION_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return resolution2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PyRESOLUTION.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":36
 *         return resolution2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return resolution2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_12PyRESOLUTION_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_12PyRESOLUTION_2__repr__[] = "PyRESOLUTION.__repr__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_12PyRESOLUTION_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_5pyzed_7defines_12PyRESOLUTION_3__repr__, METH_O, __pyx_doc_5pyzed_7defines_12PyRESOLUTION_2__repr__};
static PyObject *__pyx_pw_5pyzed_7defines_12PyRESOLUTION_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_12PyRESOLUTION_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_12PyRESOLUTION_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::RESOLUTION __pyx_t_2;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzed/defines.pyx":37
 * 
 *     def __repr__(self):
 *         return resolution2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::RESOLUTION)__Pyx_PyInt_As_sl_3a__3a_RESOLUTION(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::resolution2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":36
 *         return resolution2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return resolution2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PyRESOLUTION.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":59
 *     PySELF_CALIBRATION_STATE_LAST = SELF_CALIBRATION_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return statusCode2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_24PySELF_CALIBRATION_STATE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_24PySELF_CALIBRATION_STATE___str__[] = "PySELF_CALIBRATION_STATE.__str__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_24PySELF_CALIBRATION_STATE_1__str__ = {"__str__", (PyCFunction)__pyx_pw_5pyzed_7defines_24PySELF_CALIBRATION_STATE_1__str__, METH_O, __pyx_doc_5pyzed_7defines_24PySELF_CALIBRATION_STATE___str__};
static PyObject *__pyx_pw_5pyzed_7defines_24PySELF_CALIBRATION_STATE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_24PySELF_CALIBRATION_STATE___str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_24PySELF_CALIBRATION_STATE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::SELF_CALIBRATION_STATE __pyx_t_2;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pyzed/defines.pyx":60
 * 
 *     def __str__(self):
 *         return statusCode2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::SELF_CALIBRATION_STATE)__Pyx_PyInt_As_sl_3a__3a_SELF_CALIBRATION_STATE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::statusCode2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":59
 *     PySELF_CALIBRATION_STATE_LAST = SELF_CALIBRATION_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return statusCode2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PySELF_CALIBRATION_STATE.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":62
 *         return statusCode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return statusCode2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_24PySELF_CALIBRATION_STATE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_24PySELF_CALIBRATION_STATE_2__repr__[] = "PySELF_CALIBRATION_STATE.__repr__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_24PySELF_CALIBRATION_STATE_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_5pyzed_7defines_24PySELF_CALIBRATION_STATE_3__repr__, METH_O, __pyx_doc_5pyzed_7defines_24PySELF_CALIBRATION_STATE_2__repr__};
static PyObject *__pyx_pw_5pyzed_7defines_24PySELF_CALIBRATION_STATE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_24PySELF_CALIBRATION_STATE_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_24PySELF_CALIBRATION_STATE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::SELF_CALIBRATION_STATE __pyx_t_2;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzed/defines.pyx":63
 * 
 *     def __repr__(self):
 *         return statusCode2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::SELF_CALIBRATION_STATE)__Pyx_PyInt_As_sl_3a__3a_SELF_CALIBRATION_STATE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::statusCode2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":62
 *         return statusCode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return statusCode2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PySELF_CALIBRATION_STATE.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":73
 *     PyDEPTH_MODE_LAST = DEPTH_MODE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return depthMode2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_12PyDEPTH_MODE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_12PyDEPTH_MODE___str__[] = "PyDEPTH_MODE.__str__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_12PyDEPTH_MODE_1__str__ = {"__str__", (PyCFunction)__pyx_pw_5pyzed_7defines_12PyDEPTH_MODE_1__str__, METH_O, __pyx_doc_5pyzed_7defines_12PyDEPTH_MODE___str__};
static PyObject *__pyx_pw_5pyzed_7defines_12PyDEPTH_MODE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_12PyDEPTH_MODE___str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_12PyDEPTH_MODE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::DEPTH_MODE __pyx_t_2;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pyzed/defines.pyx":74
 * 
 *     def __str__(self):
 *         return depthMode2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::DEPTH_MODE)__Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::depthMode2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":73
 *     PyDEPTH_MODE_LAST = DEPTH_MODE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return depthMode2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PyDEPTH_MODE.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":76
 *         return depthMode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return depthMode2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_12PyDEPTH_MODE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_12PyDEPTH_MODE_2__repr__[] = "PyDEPTH_MODE.__repr__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_12PyDEPTH_MODE_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_5pyzed_7defines_12PyDEPTH_MODE_3__repr__, METH_O, __pyx_doc_5pyzed_7defines_12PyDEPTH_MODE_2__repr__};
static PyObject *__pyx_pw_5pyzed_7defines_12PyDEPTH_MODE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_12PyDEPTH_MODE_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_12PyDEPTH_MODE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::DEPTH_MODE __pyx_t_2;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzed/defines.pyx":77
 * 
 *     def __repr__(self):
 *         return depthMode2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::DEPTH_MODE)__Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::depthMode2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":76
 *         return depthMode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return depthMode2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PyDEPTH_MODE.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":85
 *     PySENSING_MODE_LAST = SENSING_MODE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return sensingMode2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_14PySENSING_MODE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_14PySENSING_MODE___str__[] = "PySENSING_MODE.__str__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_14PySENSING_MODE_1__str__ = {"__str__", (PyCFunction)__pyx_pw_5pyzed_7defines_14PySENSING_MODE_1__str__, METH_O, __pyx_doc_5pyzed_7defines_14PySENSING_MODE___str__};
static PyObject *__pyx_pw_5pyzed_7defines_14PySENSING_MODE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_14PySENSING_MODE___str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_14PySENSING_MODE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::SENSING_MODE __pyx_t_2;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pyzed/defines.pyx":86
 * 
 *     def __str__(self):
 *         return sensingMode2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::SENSING_MODE)__Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::sensingMode2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":85
 *     PySENSING_MODE_LAST = SENSING_MODE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return sensingMode2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PySENSING_MODE.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":88
 *         return sensingMode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return sensingMode2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_14PySENSING_MODE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_14PySENSING_MODE_2__repr__[] = "PySENSING_MODE.__repr__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_14PySENSING_MODE_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_5pyzed_7defines_14PySENSING_MODE_3__repr__, METH_O, __pyx_doc_5pyzed_7defines_14PySENSING_MODE_2__repr__};
static PyObject *__pyx_pw_5pyzed_7defines_14PySENSING_MODE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_14PySENSING_MODE_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_14PySENSING_MODE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::SENSING_MODE __pyx_t_2;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzed/defines.pyx":89
 * 
 *     def __repr__(self):
 *         return sensingMode2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::SENSING_MODE)__Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::sensingMode2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":88
 *         return sensingMode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return sensingMode2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PySENSING_MODE.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":100
 *     PyUNIT_LAST = UNIT_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return unit2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_6PyUNIT_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_6PyUNIT___str__[] = "PyUNIT.__str__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_6PyUNIT_1__str__ = {"__str__", (PyCFunction)__pyx_pw_5pyzed_7defines_6PyUNIT_1__str__, METH_O, __pyx_doc_5pyzed_7defines_6PyUNIT___str__};
static PyObject *__pyx_pw_5pyzed_7defines_6PyUNIT_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_6PyUNIT___str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_6PyUNIT___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::UNIT __pyx_t_2;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pyzed/defines.pyx":101
 * 
 *     def __str__(self):
 *         return unit2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::UNIT)__Pyx_PyInt_As_sl_3a__3a_UNIT(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::unit2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":100
 *     PyUNIT_LAST = UNIT_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return unit2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PyUNIT.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":103
 *         return unit2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return unit2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_6PyUNIT_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_6PyUNIT_2__repr__[] = "PyUNIT.__repr__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_6PyUNIT_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_5pyzed_7defines_6PyUNIT_3__repr__, METH_O, __pyx_doc_5pyzed_7defines_6PyUNIT_2__repr__};
static PyObject *__pyx_pw_5pyzed_7defines_6PyUNIT_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_6PyUNIT_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_6PyUNIT_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::UNIT __pyx_t_2;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzed/defines.pyx":104
 * 
 *     def __repr__(self):
 *         return unit2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::UNIT)__Pyx_PyInt_As_sl_3a__3a_UNIT(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::unit2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":103
 *         return unit2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return unit2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PyUNIT.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":177
 *     PyTRACKING_STATE_LAST = TRACKING_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return trackingState2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_16PyTRACKING_STATE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_16PyTRACKING_STATE___str__[] = "PyTRACKING_STATE.__str__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_16PyTRACKING_STATE_1__str__ = {"__str__", (PyCFunction)__pyx_pw_5pyzed_7defines_16PyTRACKING_STATE_1__str__, METH_O, __pyx_doc_5pyzed_7defines_16PyTRACKING_STATE___str__};
static PyObject *__pyx_pw_5pyzed_7defines_16PyTRACKING_STATE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_16PyTRACKING_STATE___str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_16PyTRACKING_STATE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::TRACKING_STATE __pyx_t_2;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pyzed/defines.pyx":178
 * 
 *     def __str__(self):
 *         return trackingState2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::TRACKING_STATE)__Pyx_PyInt_As_sl_3a__3a_TRACKING_STATE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::trackingState2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":177
 *     PyTRACKING_STATE_LAST = TRACKING_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return trackingState2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PyTRACKING_STATE.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":180
 *         return trackingState2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return trackingState2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_16PyTRACKING_STATE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_16PyTRACKING_STATE_2__repr__[] = "PyTRACKING_STATE.__repr__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_16PyTRACKING_STATE_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_5pyzed_7defines_16PyTRACKING_STATE_3__repr__, METH_O, __pyx_doc_5pyzed_7defines_16PyTRACKING_STATE_2__repr__};
static PyObject *__pyx_pw_5pyzed_7defines_16PyTRACKING_STATE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_16PyTRACKING_STATE_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_16PyTRACKING_STATE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::TRACKING_STATE __pyx_t_2;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzed/defines.pyx":181
 * 
 *     def __repr__(self):
 *         return trackingState2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::TRACKING_STATE)__Pyx_PyInt_As_sl_3a__3a_TRACKING_STATE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::trackingState2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":180
 *         return trackingState2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return trackingState2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PyTRACKING_STATE.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":208
 *     PySPATIAL_MAPPING_STATE_LAST = SPATIAL_MAPPING_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return spatialMappingState2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_23PySPATIAL_MAPPING_STATE___str__[] = "PySPATIAL_MAPPING_STATE.__str__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_1__str__ = {"__str__", (PyCFunction)__pyx_pw_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_1__str__, METH_O, __pyx_doc_5pyzed_7defines_23PySPATIAL_MAPPING_STATE___str__};
static PyObject *__pyx_pw_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_1__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_23PySPATIAL_MAPPING_STATE___str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_23PySPATIAL_MAPPING_STATE___str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::SPATIAL_MAPPING_STATE __pyx_t_2;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pyzed/defines.pyx":209
 * 
 *     def __str__(self):
 *         return spatialMappingState2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::SPATIAL_MAPPING_STATE)__Pyx_PyInt_As_sl_3a__3a_SPATIAL_MAPPING_STATE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::spatialMappingState2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":208
 *     PySPATIAL_MAPPING_STATE_LAST = SPATIAL_MAPPING_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return spatialMappingState2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PySPATIAL_MAPPING_STATE.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":211
 *         return spatialMappingState2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return spatialMappingState2str(self.value).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_2__repr__[] = "PySPATIAL_MAPPING_STATE.__repr__(self)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_3__repr__, METH_O, __pyx_doc_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_2__repr__};
static PyObject *__pyx_pw_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sl::SPATIAL_MAPPING_STATE __pyx_t_2;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzed/defines.pyx":212
 * 
 *     def __repr__(self):
 *         return spatialMappingState2str(self.value).decode()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((sl::SPATIAL_MAPPING_STATE)__Pyx_PyInt_As_sl_3a__3a_SPATIAL_MAPPING_STATE(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_cpp_string(sl::spatialMappingState2str(__pyx_t_2), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":211
 *         return spatialMappingState2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return spatialMappingState2str(self.value).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.PySPATIAL_MAPPING_STATE.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":222
 * 
 * 
 * def video_modes():             # <<<<<<<<<<<<<<
 *     return cameraResolution
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_1video_modes(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzed_7defines_video_modes[] = "video_modes()";
static PyMethodDef __pyx_mdef_5pyzed_7defines_1video_modes = {"video_modes", (PyCFunction)__pyx_pw_5pyzed_7defines_1video_modes, METH_NOARGS, __pyx_doc_5pyzed_7defines_video_modes};
static PyObject *__pyx_pw_5pyzed_7defines_1video_modes(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("video_modes (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzed_7defines_video_modes(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_video_modes(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("video_modes", 0);

  /* "pyzed/defines.pyx":223
 * 
 * def video_modes():
 *     return cameraResolution             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(sl::cameraResolution); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":222
 * 
 * 
 * def video_modes():             # <<<<<<<<<<<<<<
 *     return cameraResolution
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzed.defines.video_modes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":226
 * 
 * 
 * def str_to_mode(str mode):             # <<<<<<<<<<<<<<
 *     return PyDEPTH_MODE(str2mode(mode.encode()))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_3str_to_mode(PyObject *__pyx_self, PyObject *__pyx_v_mode); /*proto*/
static char __pyx_doc_5pyzed_7defines_2str_to_mode[] = "str_to_mode(str mode)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_3str_to_mode = {"str_to_mode", (PyCFunction)__pyx_pw_5pyzed_7defines_3str_to_mode, METH_O, __pyx_doc_5pyzed_7defines_2str_to_mode};
static PyObject *__pyx_pw_5pyzed_7defines_3str_to_mode(PyObject *__pyx_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("str_to_mode (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mode), (&PyString_Type), 1, "mode", 1))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_7defines_2str_to_mode(__pyx_self, ((PyObject*)__pyx_v_mode));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_2str_to_mode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  __Pyx_RefNannySetupContext("str_to_mode", 0);

  /* "pyzed/defines.pyx":227
 * 
 * def str_to_mode(str mode):
 *     return PyDEPTH_MODE(str2mode(mode.encode()))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyDEPTH_MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mode, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::str2mode(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":226
 * 
 * 
 * def str_to_mode(str mode):             # <<<<<<<<<<<<<<
 *     return PyDEPTH_MODE(str2mode(mode.encode()))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.defines.str_to_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzed/defines.pyx":230
 * 
 * 
 * def str_to_unit(str unit):             # <<<<<<<<<<<<<<
 *     return PyUNIT(str2unit(unit.encode()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzed_7defines_5str_to_unit(PyObject *__pyx_self, PyObject *__pyx_v_unit); /*proto*/
static char __pyx_doc_5pyzed_7defines_4str_to_unit[] = "str_to_unit(str unit)";
static PyMethodDef __pyx_mdef_5pyzed_7defines_5str_to_unit = {"str_to_unit", (PyCFunction)__pyx_pw_5pyzed_7defines_5str_to_unit, METH_O, __pyx_doc_5pyzed_7defines_4str_to_unit};
static PyObject *__pyx_pw_5pyzed_7defines_5str_to_unit(PyObject *__pyx_self, PyObject *__pyx_v_unit) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("str_to_unit (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_unit), (&PyString_Type), 1, "unit", 1))) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_r = __pyx_pf_5pyzed_7defines_4str_to_unit(__pyx_self, ((PyObject*)__pyx_v_unit));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzed_7defines_4str_to_unit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_unit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  __Pyx_RefNannySetupContext("str_to_unit", 0);

  /* "pyzed/defines.pyx":231
 * 
 * def str_to_unit(str unit):
 *     return PyUNIT(str2unit(unit.encode()))             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyUNIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_unit, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::str2unit(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzed/defines.pyx":230
 * 
 * 
 * def str_to_unit(str unit):             # <<<<<<<<<<<<<<
 *     return PyUNIT(str2unit(unit.encode()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzed.defines.str_to_unit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____int", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const std::vector<std::pair<int,int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_pair_to_py_int____int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_defines(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_defines},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "defines",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Enum, __pyx_k_Enum, sizeof(__pyx_k_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_PyAREA_EXPORT_STATE, __pyx_k_PyAREA_EXPORT_STATE, sizeof(__pyx_k_PyAREA_EXPORT_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_PyAREA_EXPORT_STATE_FILE_EMPTY, __pyx_k_PyAREA_EXPORT_STATE_FILE_EMPTY, sizeof(__pyx_k_PyAREA_EXPORT_STATE_FILE_EMPTY), 0, 0, 1, 1},
  {&__pyx_n_s_PyAREA_EXPORT_STATE_FILE_ERROR, __pyx_k_PyAREA_EXPORT_STATE_FILE_ERROR, sizeof(__pyx_k_PyAREA_EXPORT_STATE_FILE_ERROR), 0, 0, 1, 1},
  {&__pyx_n_s_PyAREA_EXPORT_STATE_LAST, __pyx_k_PyAREA_EXPORT_STATE_LAST, sizeof(__pyx_k_PyAREA_EXPORT_STATE_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyAREA_EXPORT_STATE_NOT_STARTED, __pyx_k_PyAREA_EXPORT_STATE_NOT_STARTED, sizeof(__pyx_k_PyAREA_EXPORT_STATE_NOT_STARTED), 0, 0, 1, 1},
  {&__pyx_n_s_PyAREA_EXPORT_STATE_RUNNING, __pyx_k_PyAREA_EXPORT_STATE_RUNNING, sizeof(__pyx_k_PyAREA_EXPORT_STATE_RUNNING), 0, 0, 1, 1},
  {&__pyx_n_s_PyAREA_EXPORT_STATE_SPATIAL_MEMO, __pyx_k_PyAREA_EXPORT_STATE_SPATIAL_MEMO, sizeof(__pyx_k_PyAREA_EXPORT_STATE_SPATIAL_MEMO), 0, 0, 1, 1},
  {&__pyx_n_s_PyAREA_EXPORT_STATE_SUCCESS, __pyx_k_PyAREA_EXPORT_STATE_SUCCESS, sizeof(__pyx_k_PyAREA_EXPORT_STATE_SUCCESS), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS, __pyx_k_PyCAMERA_SETTINGS, sizeof(__pyx_k_PyCAMERA_SETTINGS), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_AUTO_WHITEBALA, __pyx_k_PyCAMERA_SETTINGS_AUTO_WHITEBALA, sizeof(__pyx_k_PyCAMERA_SETTINGS_AUTO_WHITEBALA), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_BRIGHTNESS, __pyx_k_PyCAMERA_SETTINGS_BRIGHTNESS, sizeof(__pyx_k_PyCAMERA_SETTINGS_BRIGHTNESS), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_CONTRAST, __pyx_k_PyCAMERA_SETTINGS_CONTRAST, sizeof(__pyx_k_PyCAMERA_SETTINGS_CONTRAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_EXPOSURE, __pyx_k_PyCAMERA_SETTINGS_EXPOSURE, sizeof(__pyx_k_PyCAMERA_SETTINGS_EXPOSURE), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_GAIN, __pyx_k_PyCAMERA_SETTINGS_GAIN, sizeof(__pyx_k_PyCAMERA_SETTINGS_GAIN), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_HUE, __pyx_k_PyCAMERA_SETTINGS_HUE, sizeof(__pyx_k_PyCAMERA_SETTINGS_HUE), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_LAST, __pyx_k_PyCAMERA_SETTINGS_LAST, sizeof(__pyx_k_PyCAMERA_SETTINGS_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_SATURATION, __pyx_k_PyCAMERA_SETTINGS_SATURATION, sizeof(__pyx_k_PyCAMERA_SETTINGS_SATURATION), 0, 0, 1, 1},
  {&__pyx_n_s_PyCAMERA_SETTINGS_WHITEBALANCE, __pyx_k_PyCAMERA_SETTINGS_WHITEBALANCE, sizeof(__pyx_k_PyCAMERA_SETTINGS_WHITEBALANCE), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM, __pyx_k_PyCOORDINATE_SYSTEM, sizeof(__pyx_k_PyCOORDINATE_SYSTEM), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM_IMAGE, __pyx_k_PyCOORDINATE_SYSTEM_IMAGE, sizeof(__pyx_k_PyCOORDINATE_SYSTEM_IMAGE), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM_LAST, __pyx_k_PyCOORDINATE_SYSTEM_LAST, sizeof(__pyx_k_PyCOORDINATE_SYSTEM_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM_LEFT_HANDED, __pyx_k_PyCOORDINATE_SYSTEM_LEFT_HANDED, sizeof(__pyx_k_PyCOORDINATE_SYSTEM_LEFT_HANDED), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM_LEFT_HANDED_2, __pyx_k_PyCOORDINATE_SYSTEM_LEFT_HANDED_2, sizeof(__pyx_k_PyCOORDINATE_SYSTEM_LEFT_HANDED_2), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM_RIGHT_HANDED, __pyx_k_PyCOORDINATE_SYSTEM_RIGHT_HANDED, sizeof(__pyx_k_PyCOORDINATE_SYSTEM_RIGHT_HANDED), 0, 0, 1, 1},
  {&__pyx_n_s_PyCOORDINATE_SYSTEM_RIGHT_HANDED_2, __pyx_k_PyCOORDINATE_SYSTEM_RIGHT_HANDED_2, sizeof(__pyx_k_PyCOORDINATE_SYSTEM_RIGHT_HANDED_2), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_FORMAT, __pyx_k_PyDEPTH_FORMAT, sizeof(__pyx_k_PyDEPTH_FORMAT), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_FORMAT_LAST, __pyx_k_PyDEPTH_FORMAT_LAST, sizeof(__pyx_k_PyDEPTH_FORMAT_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_FORMAT_PFM, __pyx_k_PyDEPTH_FORMAT_PFM, sizeof(__pyx_k_PyDEPTH_FORMAT_PFM), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_FORMAT_PGM, __pyx_k_PyDEPTH_FORMAT_PGM, sizeof(__pyx_k_PyDEPTH_FORMAT_PGM), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_FORMAT_PNG, __pyx_k_PyDEPTH_FORMAT_PNG, sizeof(__pyx_k_PyDEPTH_FORMAT_PNG), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE, __pyx_k_PyDEPTH_MODE, sizeof(__pyx_k_PyDEPTH_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE_LAST, __pyx_k_PyDEPTH_MODE_LAST, sizeof(__pyx_k_PyDEPTH_MODE_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE_MEDIUM, __pyx_k_PyDEPTH_MODE_MEDIUM, sizeof(__pyx_k_PyDEPTH_MODE_MEDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE_NONE, __pyx_k_PyDEPTH_MODE_NONE, sizeof(__pyx_k_PyDEPTH_MODE_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE_PERFORMANCE, __pyx_k_PyDEPTH_MODE_PERFORMANCE, sizeof(__pyx_k_PyDEPTH_MODE_PERFORMANCE), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE_QUALITY, __pyx_k_PyDEPTH_MODE_QUALITY, sizeof(__pyx_k_PyDEPTH_MODE_QUALITY), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE___repr, __pyx_k_PyDEPTH_MODE___repr, sizeof(__pyx_k_PyDEPTH_MODE___repr), 0, 0, 1, 1},
  {&__pyx_n_s_PyDEPTH_MODE___str, __pyx_k_PyDEPTH_MODE___str, sizeof(__pyx_k_PyDEPTH_MODE___str), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE, __pyx_k_PyMEASURE, sizeof(__pyx_k_PyMEASURE), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_CONFIDENCE, __pyx_k_PyMEASURE_CONFIDENCE, sizeof(__pyx_k_PyMEASURE_CONFIDENCE), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_DEPTH, __pyx_k_PyMEASURE_DEPTH, sizeof(__pyx_k_PyMEASURE_DEPTH), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_DEPTH_RIGHT, __pyx_k_PyMEASURE_DEPTH_RIGHT, sizeof(__pyx_k_PyMEASURE_DEPTH_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_DISPARITY, __pyx_k_PyMEASURE_DISPARITY, sizeof(__pyx_k_PyMEASURE_DISPARITY), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_DISPARITY_RIGHT, __pyx_k_PyMEASURE_DISPARITY_RIGHT, sizeof(__pyx_k_PyMEASURE_DISPARITY_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_LAST, __pyx_k_PyMEASURE_LAST, sizeof(__pyx_k_PyMEASURE_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_NORMALS, __pyx_k_PyMEASURE_NORMALS, sizeof(__pyx_k_PyMEASURE_NORMALS), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_NORMALS_RIGHT, __pyx_k_PyMEASURE_NORMALS_RIGHT, sizeof(__pyx_k_PyMEASURE_NORMALS_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZ, __pyx_k_PyMEASURE_XYZ, sizeof(__pyx_k_PyMEASURE_XYZ), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZABGR, __pyx_k_PyMEASURE_XYZABGR, sizeof(__pyx_k_PyMEASURE_XYZABGR), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZABGR_RIGHT, __pyx_k_PyMEASURE_XYZABGR_RIGHT, sizeof(__pyx_k_PyMEASURE_XYZABGR_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZARGB, __pyx_k_PyMEASURE_XYZARGB, sizeof(__pyx_k_PyMEASURE_XYZARGB), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZARGB_RIGHT, __pyx_k_PyMEASURE_XYZARGB_RIGHT, sizeof(__pyx_k_PyMEASURE_XYZARGB_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZBGRA, __pyx_k_PyMEASURE_XYZBGRA, sizeof(__pyx_k_PyMEASURE_XYZBGRA), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZBGRA_RIGHT, __pyx_k_PyMEASURE_XYZBGRA_RIGHT, sizeof(__pyx_k_PyMEASURE_XYZBGRA_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZRGBA, __pyx_k_PyMEASURE_XYZRGBA, sizeof(__pyx_k_PyMEASURE_XYZRGBA), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZRGBA_RIGHT, __pyx_k_PyMEASURE_XYZRGBA_RIGHT, sizeof(__pyx_k_PyMEASURE_XYZRGBA_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyMEASURE_XYZ_RIGHT, __pyx_k_PyMEASURE_XYZ_RIGHT, sizeof(__pyx_k_PyMEASURE_XYZ_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyPOINT_CLOUD_FORMAT, __pyx_k_PyPOINT_CLOUD_FORMAT, sizeof(__pyx_k_PyPOINT_CLOUD_FORMAT), 0, 0, 1, 1},
  {&__pyx_n_s_PyPOINT_CLOUD_FORMAT_LAST, __pyx_k_PyPOINT_CLOUD_FORMAT_LAST, sizeof(__pyx_k_PyPOINT_CLOUD_FORMAT_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyPOINT_CLOUD_FORMAT_PCD_ASCII, __pyx_k_PyPOINT_CLOUD_FORMAT_PCD_ASCII, sizeof(__pyx_k_PyPOINT_CLOUD_FORMAT_PCD_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_PyPOINT_CLOUD_FORMAT_PLY_ASCII, __pyx_k_PyPOINT_CLOUD_FORMAT_PLY_ASCII, sizeof(__pyx_k_PyPOINT_CLOUD_FORMAT_PLY_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_PyPOINT_CLOUD_FORMAT_VTK_ASCII, __pyx_k_PyPOINT_CLOUD_FORMAT_VTK_ASCII, sizeof(__pyx_k_PyPOINT_CLOUD_FORMAT_VTK_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_PyPOINT_CLOUD_FORMAT_XYZ_ASCII, __pyx_k_PyPOINT_CLOUD_FORMAT_XYZ_ASCII, sizeof(__pyx_k_PyPOINT_CLOUD_FORMAT_XYZ_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_PyREFERENCE_FRAME, __pyx_k_PyREFERENCE_FRAME, sizeof(__pyx_k_PyREFERENCE_FRAME), 0, 0, 1, 1},
  {&__pyx_n_s_PyREFERENCE_FRAME_CAMERA, __pyx_k_PyREFERENCE_FRAME_CAMERA, sizeof(__pyx_k_PyREFERENCE_FRAME_CAMERA), 0, 0, 1, 1},
  {&__pyx_n_s_PyREFERENCE_FRAME_LAST, __pyx_k_PyREFERENCE_FRAME_LAST, sizeof(__pyx_k_PyREFERENCE_FRAME_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyREFERENCE_FRAME_WORLD, __pyx_k_PyREFERENCE_FRAME_WORLD, sizeof(__pyx_k_PyREFERENCE_FRAME_WORLD), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION, __pyx_k_PyRESOLUTION, sizeof(__pyx_k_PyRESOLUTION), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_HD1080, __pyx_k_PyRESOLUTION_HD1080, sizeof(__pyx_k_PyRESOLUTION_HD1080), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_HD2K, __pyx_k_PyRESOLUTION_HD2K, sizeof(__pyx_k_PyRESOLUTION_HD2K), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_HD720, __pyx_k_PyRESOLUTION_HD720, sizeof(__pyx_k_PyRESOLUTION_HD720), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_LAST, __pyx_k_PyRESOLUTION_LAST, sizeof(__pyx_k_PyRESOLUTION_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION_VGA, __pyx_k_PyRESOLUTION_VGA, sizeof(__pyx_k_PyRESOLUTION_VGA), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION___repr, __pyx_k_PyRESOLUTION___repr, sizeof(__pyx_k_PyRESOLUTION___repr), 0, 0, 1, 1},
  {&__pyx_n_s_PyRESOLUTION___str, __pyx_k_PyRESOLUTION___str, sizeof(__pyx_k_PyRESOLUTION___str), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE, __pyx_k_PySELF_CALIBRATION_STATE, sizeof(__pyx_k_PySELF_CALIBRATION_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE_FAILED, __pyx_k_PySELF_CALIBRATION_STATE_FAILED, sizeof(__pyx_k_PySELF_CALIBRATION_STATE_FAILED), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE_LAST, __pyx_k_PySELF_CALIBRATION_STATE_LAST, sizeof(__pyx_k_PySELF_CALIBRATION_STATE_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE_NOT_STA, __pyx_k_PySELF_CALIBRATION_STATE_NOT_STA, sizeof(__pyx_k_PySELF_CALIBRATION_STATE_NOT_STA), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE_RUNNING, __pyx_k_PySELF_CALIBRATION_STATE_RUNNING, sizeof(__pyx_k_PySELF_CALIBRATION_STATE_RUNNING), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE_SUCCESS, __pyx_k_PySELF_CALIBRATION_STATE_SUCCESS, sizeof(__pyx_k_PySELF_CALIBRATION_STATE_SUCCESS), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE___repr, __pyx_k_PySELF_CALIBRATION_STATE___repr, sizeof(__pyx_k_PySELF_CALIBRATION_STATE___repr), 0, 0, 1, 1},
  {&__pyx_n_s_PySELF_CALIBRATION_STATE___str, __pyx_k_PySELF_CALIBRATION_STATE___str, sizeof(__pyx_k_PySELF_CALIBRATION_STATE___str), 0, 0, 1, 1},
  {&__pyx_n_s_PySENSING_MODE, __pyx_k_PySENSING_MODE, sizeof(__pyx_k_PySENSING_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_PySENSING_MODE_FILL, __pyx_k_PySENSING_MODE_FILL, sizeof(__pyx_k_PySENSING_MODE_FILL), 0, 0, 1, 1},
  {&__pyx_n_s_PySENSING_MODE_LAST, __pyx_k_PySENSING_MODE_LAST, sizeof(__pyx_k_PySENSING_MODE_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PySENSING_MODE_STANDARD, __pyx_k_PySENSING_MODE_STANDARD, sizeof(__pyx_k_PySENSING_MODE_STANDARD), 0, 0, 1, 1},
  {&__pyx_n_s_PySENSING_MODE___repr, __pyx_k_PySENSING_MODE___repr, sizeof(__pyx_k_PySENSING_MODE___repr), 0, 0, 1, 1},
  {&__pyx_n_s_PySENSING_MODE___str, __pyx_k_PySENSING_MODE___str, sizeof(__pyx_k_PySENSING_MODE___str), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE, __pyx_k_PySPATIAL_MAPPING_STATE, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE_FPS_TOO, __pyx_k_PySPATIAL_MAPPING_STATE_FPS_TOO, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE_FPS_TOO), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE_INITIALI, __pyx_k_PySPATIAL_MAPPING_STATE_INITIALI, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE_INITIALI), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE_LAST, __pyx_k_PySPATIAL_MAPPING_STATE_LAST, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE_NOT_ENAB, __pyx_k_PySPATIAL_MAPPING_STATE_NOT_ENAB, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE_NOT_ENAB), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE_NOT_ENOU, __pyx_k_PySPATIAL_MAPPING_STATE_NOT_ENOU, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE_NOT_ENOU), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE_OK, __pyx_k_PySPATIAL_MAPPING_STATE_OK, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE_OK), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE___repr, __pyx_k_PySPATIAL_MAPPING_STATE___repr, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE___repr), 0, 0, 1, 1},
  {&__pyx_n_s_PySPATIAL_MAPPING_STATE___str, __pyx_k_PySPATIAL_MAPPING_STATE___str, sizeof(__pyx_k_PySPATIAL_MAPPING_STATE___str), 0, 0, 1, 1},
  {&__pyx_n_s_PySVO_COMPRESSION_MODE, __pyx_k_PySVO_COMPRESSION_MODE, sizeof(__pyx_k_PySVO_COMPRESSION_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_PySVO_COMPRESSION_MODE_LAST, __pyx_k_PySVO_COMPRESSION_MODE_LAST, sizeof(__pyx_k_PySVO_COMPRESSION_MODE_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PySVO_COMPRESSION_MODE_LOSSLESS, __pyx_k_PySVO_COMPRESSION_MODE_LOSSLESS, sizeof(__pyx_k_PySVO_COMPRESSION_MODE_LOSSLESS), 0, 0, 1, 1},
  {&__pyx_n_s_PySVO_COMPRESSION_MODE_LOSSY, __pyx_k_PySVO_COMPRESSION_MODE_LOSSY, sizeof(__pyx_k_PySVO_COMPRESSION_MODE_LOSSY), 0, 0, 1, 1},
  {&__pyx_n_s_PySVO_COMPRESSION_MODE_RAW, __pyx_k_PySVO_COMPRESSION_MODE_RAW, sizeof(__pyx_k_PySVO_COMPRESSION_MODE_RAW), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE, __pyx_k_PyTRACKING_STATE, sizeof(__pyx_k_PyTRACKING_STATE), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE_FPS_TOO_LOW, __pyx_k_PyTRACKING_STATE_FPS_TOO_LOW, sizeof(__pyx_k_PyTRACKING_STATE_FPS_TOO_LOW), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE_LAST, __pyx_k_PyTRACKING_STATE_LAST, sizeof(__pyx_k_PyTRACKING_STATE_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE_OFF, __pyx_k_PyTRACKING_STATE_OFF, sizeof(__pyx_k_PyTRACKING_STATE_OFF), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE_OK, __pyx_k_PyTRACKING_STATE_OK, sizeof(__pyx_k_PyTRACKING_STATE_OK), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE_SEARCHING, __pyx_k_PyTRACKING_STATE_SEARCHING, sizeof(__pyx_k_PyTRACKING_STATE_SEARCHING), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE___repr, __pyx_k_PyTRACKING_STATE___repr, sizeof(__pyx_k_PyTRACKING_STATE___repr), 0, 0, 1, 1},
  {&__pyx_n_s_PyTRACKING_STATE___str, __pyx_k_PyTRACKING_STATE___str, sizeof(__pyx_k_PyTRACKING_STATE___str), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT, __pyx_k_PyUNIT, sizeof(__pyx_k_PyUNIT), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT_CENTIMETER, __pyx_k_PyUNIT_CENTIMETER, sizeof(__pyx_k_PyUNIT_CENTIMETER), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT_FOOT, __pyx_k_PyUNIT_FOOT, sizeof(__pyx_k_PyUNIT_FOOT), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT_INCH, __pyx_k_PyUNIT_INCH, sizeof(__pyx_k_PyUNIT_INCH), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT_LAST, __pyx_k_PyUNIT_LAST, sizeof(__pyx_k_PyUNIT_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT_METER, __pyx_k_PyUNIT_METER, sizeof(__pyx_k_PyUNIT_METER), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT_MILLIMETER, __pyx_k_PyUNIT_MILLIMETER, sizeof(__pyx_k_PyUNIT_MILLIMETER), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT___repr, __pyx_k_PyUNIT___repr, sizeof(__pyx_k_PyUNIT___repr), 0, 0, 1, 1},
  {&__pyx_n_s_PyUNIT___str, __pyx_k_PyUNIT___str, sizeof(__pyx_k_PyUNIT___str), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW, __pyx_k_PyVIEW, sizeof(__pyx_k_PyVIEW), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_CONFIDENCE, __pyx_k_PyVIEW_CONFIDENCE, sizeof(__pyx_k_PyVIEW_CONFIDENCE), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_DEPTH, __pyx_k_PyVIEW_DEPTH, sizeof(__pyx_k_PyVIEW_DEPTH), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_DEPTH_RIGHT, __pyx_k_PyVIEW_DEPTH_RIGHT, sizeof(__pyx_k_PyVIEW_DEPTH_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_LAST, __pyx_k_PyVIEW_LAST, sizeof(__pyx_k_PyVIEW_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_LEFT, __pyx_k_PyVIEW_LEFT, sizeof(__pyx_k_PyVIEW_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_LEFT_GRAY, __pyx_k_PyVIEW_LEFT_GRAY, sizeof(__pyx_k_PyVIEW_LEFT_GRAY), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_LEFT_UNRECTIFIED, __pyx_k_PyVIEW_LEFT_UNRECTIFIED, sizeof(__pyx_k_PyVIEW_LEFT_UNRECTIFIED), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_LEFT_UNRECTIFIED_GRAY, __pyx_k_PyVIEW_LEFT_UNRECTIFIED_GRAY, sizeof(__pyx_k_PyVIEW_LEFT_UNRECTIFIED_GRAY), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_NORMALS, __pyx_k_PyVIEW_NORMALS, sizeof(__pyx_k_PyVIEW_NORMALS), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_NORMALS_RIGHT, __pyx_k_PyVIEW_NORMALS_RIGHT, sizeof(__pyx_k_PyVIEW_NORMALS_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_RIGHT, __pyx_k_PyVIEW_RIGHT, sizeof(__pyx_k_PyVIEW_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_RIGHT_GRAY, __pyx_k_PyVIEW_RIGHT_GRAY, sizeof(__pyx_k_PyVIEW_RIGHT_GRAY), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_RIGHT_UNRECTIFIED, __pyx_k_PyVIEW_RIGHT_UNRECTIFIED, sizeof(__pyx_k_PyVIEW_RIGHT_UNRECTIFIED), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_RIGHT_UNRECTIFIED_GRAY, __pyx_k_PyVIEW_RIGHT_UNRECTIFIED_GRAY, sizeof(__pyx_k_PyVIEW_RIGHT_UNRECTIFIED_GRAY), 0, 0, 1, 1},
  {&__pyx_n_s_PyVIEW_SIDE_BY_SIDE, __pyx_k_PyVIEW_SIDE_BY_SIDE, sizeof(__pyx_k_PyVIEW_SIDE_BY_SIDE), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyzed_defines, __pyx_k_pyzed_defines, sizeof(__pyx_k_pyzed_defines), 0, 0, 1, 1},
  {&__pyx_kp_s_pyzed_defines_pyx, __pyx_k_pyzed_defines_pyx, sizeof(__pyx_k_pyzed_defines_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_str_to_mode, __pyx_k_str_to_mode, sizeof(__pyx_k_str_to_mode), 0, 0, 1, 1},
  {&__pyx_n_s_str_to_unit, __pyx_k_str_to_unit, sizeof(__pyx_k_str_to_unit), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_unit, __pyx_k_unit, sizeof(__pyx_k_unit), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_video_modes, __pyx_k_video_modes, sizeof(__pyx_k_video_modes), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 61, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyzed/defines.pyx":33
 *     PyRESOLUTION_LAST = RESOLUTION_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return resolution2str(self.value).decode()
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str, 33, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 33, __pyx_L1_error)

  /* "pyzed/defines.pyx":36
 *         return resolution2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return resolution2str(self.value).decode()
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_repr, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 36, __pyx_L1_error)

  /* "pyzed/defines.pyx":59
 *     PySELF_CALIBRATION_STATE_LAST = SELF_CALIBRATION_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return statusCode2str(self.value).decode()
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "pyzed/defines.pyx":62
 *         return statusCode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return statusCode2str(self.value).decode()
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_repr, 62, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 62, __pyx_L1_error)

  /* "pyzed/defines.pyx":73
 *     PyDEPTH_MODE_LAST = DEPTH_MODE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return depthMode2str(self.value).decode()
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str, 73, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 73, __pyx_L1_error)

  /* "pyzed/defines.pyx":76
 *         return depthMode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return depthMode2str(self.value).decode()
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_repr, 76, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 76, __pyx_L1_error)

  /* "pyzed/defines.pyx":85
 *     PySENSING_MODE_LAST = SENSING_MODE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return sensingMode2str(self.value).decode()
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str, 85, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 85, __pyx_L1_error)

  /* "pyzed/defines.pyx":88
 *         return sensingMode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return sensingMode2str(self.value).decode()
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_repr, 88, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 88, __pyx_L1_error)

  /* "pyzed/defines.pyx":100
 *     PyUNIT_LAST = UNIT_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return unit2str(self.value).decode()
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 100, __pyx_L1_error)

  /* "pyzed/defines.pyx":103
 *         return unit2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return unit2str(self.value).decode()
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_repr, 103, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 103, __pyx_L1_error)

  /* "pyzed/defines.pyx":177
 *     PyTRACKING_STATE_LAST = TRACKING_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return trackingState2str(self.value).decode()
 * 
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str, 177, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 177, __pyx_L1_error)

  /* "pyzed/defines.pyx":180
 *         return trackingState2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return trackingState2str(self.value).decode()
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_repr, 180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 180, __pyx_L1_error)

  /* "pyzed/defines.pyx":208
 *     PySPATIAL_MAPPING_STATE_LAST = SPATIAL_MAPPING_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return spatialMappingState2str(self.value).decode()
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str, 208, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 208, __pyx_L1_error)

  /* "pyzed/defines.pyx":211
 *         return spatialMappingState2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return spatialMappingState2str(self.value).decode()
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_repr, 211, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 211, __pyx_L1_error)

  /* "pyzed/defines.pyx":222
 * 
 * 
 * def video_modes():             # <<<<<<<<<<<<<<
 *     return cameraResolution
 * 
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_video_modes, 222, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 222, __pyx_L1_error)

  /* "pyzed/defines.pyx":226
 * 
 * 
 * def str_to_mode(str mode):             # <<<<<<<<<<<<<<
 *     return PyDEPTH_MODE(str2mode(mode.encode()))
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_n_s_mode); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str_to_mode, 226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 226, __pyx_L1_error)

  /* "pyzed/defines.pyx":230
 * 
 * 
 * def str_to_unit(str unit):             # <<<<<<<<<<<<<<
 *     return PyUNIT(str2unit(unit.encode()))
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_n_s_unit); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyzed_defines_pyx, __pyx_n_s_str_to_unit, 230, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initdefines(void); /*proto*/
PyMODINIT_FUNC initdefines(void)
#else
PyMODINIT_FUNC PyInit_defines(void); /*proto*/
PyMODINIT_FUNC PyInit_defines(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_defines(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_defines(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("defines", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyzed__defines) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyzed.defines")) {
      if (unlikely(PyDict_SetItemString(modules, "pyzed.defines", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pyzed/defines.pyx":23
 * # Source file of the defines Python module.
 * 
 * import enum             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_enum, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_enum, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":26
 * 
 * 
 * class PyRESOLUTION(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_HD2K = RESOLUTION_HD2K
 *     PyRESOLUTION_HD1080 = RESOLUTION_HD1080
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyRESOLUTION, __pyx_n_s_PyRESOLUTION, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":27
 * 
 * class PyRESOLUTION(enum.Enum):
 *     PyRESOLUTION_HD2K = RESOLUTION_HD2K             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_HD1080 = RESOLUTION_HD1080
 *     PyRESOLUTION_HD720 = RESOLUTION_HD720
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION_HD2K); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRESOLUTION_HD2K, __pyx_t_4) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":28
 * class PyRESOLUTION(enum.Enum):
 *     PyRESOLUTION_HD2K = RESOLUTION_HD2K
 *     PyRESOLUTION_HD1080 = RESOLUTION_HD1080             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_HD720 = RESOLUTION_HD720
 *     PyRESOLUTION_VGA  = RESOLUTION_VGA
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION_HD1080); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRESOLUTION_HD1080, __pyx_t_4) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":29
 *     PyRESOLUTION_HD2K = RESOLUTION_HD2K
 *     PyRESOLUTION_HD1080 = RESOLUTION_HD1080
 *     PyRESOLUTION_HD720 = RESOLUTION_HD720             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_VGA  = RESOLUTION_VGA
 *     PyRESOLUTION_LAST = RESOLUTION_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION_HD720); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRESOLUTION_HD720, __pyx_t_4) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":30
 *     PyRESOLUTION_HD1080 = RESOLUTION_HD1080
 *     PyRESOLUTION_HD720 = RESOLUTION_HD720
 *     PyRESOLUTION_VGA  = RESOLUTION_VGA             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_LAST = RESOLUTION_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION_VGA); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRESOLUTION_VGA, __pyx_t_4) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":31
 *     PyRESOLUTION_HD720 = RESOLUTION_HD720
 *     PyRESOLUTION_VGA  = RESOLUTION_VGA
 *     PyRESOLUTION_LAST = RESOLUTION_LAST             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyRESOLUTION_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":33
 *     PyRESOLUTION_LAST = RESOLUTION_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return resolution2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_12PyRESOLUTION_1__str__, 0, __pyx_n_s_PyRESOLUTION___str, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":36
 *         return resolution2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return resolution2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_12PyRESOLUTION_3__repr__, 0, __pyx_n_s_PyRESOLUTION___repr, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":26
 * 
 * 
 * class PyRESOLUTION(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyRESOLUTION_HD2K = RESOLUTION_HD2K
 *     PyRESOLUTION_HD1080 = RESOLUTION_HD1080
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyRESOLUTION, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyRESOLUTION, __pyx_t_4) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":40
 * 
 * 
 * class PyCAMERA_SETTINGS(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_BRIGHTNESS = CAMERA_SETTINGS_BRIGHTNESS
 *     PyCAMERA_SETTINGS_CONTRAST = CAMERA_SETTINGS_CONTRAST
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyCAMERA_SETTINGS, __pyx_n_s_PyCAMERA_SETTINGS, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":41
 * 
 * class PyCAMERA_SETTINGS(enum.Enum):
 *     PyCAMERA_SETTINGS_BRIGHTNESS = CAMERA_SETTINGS_BRIGHTNESS             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_CONTRAST = CAMERA_SETTINGS_CONTRAST
 *     PyCAMERA_SETTINGS_HUE = CAMERA_SETTINGS_HUE
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_BRIGHTNESS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_BRIGHTNESS, __pyx_t_4) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":42
 * class PyCAMERA_SETTINGS(enum.Enum):
 *     PyCAMERA_SETTINGS_BRIGHTNESS = CAMERA_SETTINGS_BRIGHTNESS
 *     PyCAMERA_SETTINGS_CONTRAST = CAMERA_SETTINGS_CONTRAST             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_HUE = CAMERA_SETTINGS_HUE
 *     PyCAMERA_SETTINGS_SATURATION = CAMERA_SETTINGS_SATURATION
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_CONTRAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_CONTRAST, __pyx_t_4) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":43
 *     PyCAMERA_SETTINGS_BRIGHTNESS = CAMERA_SETTINGS_BRIGHTNESS
 *     PyCAMERA_SETTINGS_CONTRAST = CAMERA_SETTINGS_CONTRAST
 *     PyCAMERA_SETTINGS_HUE = CAMERA_SETTINGS_HUE             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_SATURATION = CAMERA_SETTINGS_SATURATION
 *     PyCAMERA_SETTINGS_GAIN = CAMERA_SETTINGS_GAIN
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_HUE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_HUE, __pyx_t_4) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":44
 *     PyCAMERA_SETTINGS_CONTRAST = CAMERA_SETTINGS_CONTRAST
 *     PyCAMERA_SETTINGS_HUE = CAMERA_SETTINGS_HUE
 *     PyCAMERA_SETTINGS_SATURATION = CAMERA_SETTINGS_SATURATION             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_GAIN = CAMERA_SETTINGS_GAIN
 *     PyCAMERA_SETTINGS_EXPOSURE = CAMERA_SETTINGS_EXPOSURE
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_SATURATION); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_SATURATION, __pyx_t_4) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":45
 *     PyCAMERA_SETTINGS_HUE = CAMERA_SETTINGS_HUE
 *     PyCAMERA_SETTINGS_SATURATION = CAMERA_SETTINGS_SATURATION
 *     PyCAMERA_SETTINGS_GAIN = CAMERA_SETTINGS_GAIN             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_EXPOSURE = CAMERA_SETTINGS_EXPOSURE
 *     PyCAMERA_SETTINGS_WHITEBALANCE = CAMERA_SETTINGS_WHITEBALANCE
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_GAIN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_GAIN, __pyx_t_4) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":46
 *     PyCAMERA_SETTINGS_SATURATION = CAMERA_SETTINGS_SATURATION
 *     PyCAMERA_SETTINGS_GAIN = CAMERA_SETTINGS_GAIN
 *     PyCAMERA_SETTINGS_EXPOSURE = CAMERA_SETTINGS_EXPOSURE             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_WHITEBALANCE = CAMERA_SETTINGS_WHITEBALANCE
 *     PyCAMERA_SETTINGS_AUTO_WHITEBALANCE = CAMERA_SETTINGS_AUTO_WHITEBALANCE
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_EXPOSURE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_EXPOSURE, __pyx_t_4) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":47
 *     PyCAMERA_SETTINGS_GAIN = CAMERA_SETTINGS_GAIN
 *     PyCAMERA_SETTINGS_EXPOSURE = CAMERA_SETTINGS_EXPOSURE
 *     PyCAMERA_SETTINGS_WHITEBALANCE = CAMERA_SETTINGS_WHITEBALANCE             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_AUTO_WHITEBALANCE = CAMERA_SETTINGS_AUTO_WHITEBALANCE
 *     PyCAMERA_SETTINGS_LAST = CAMERA_SETTINGS_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_WHITEBALANCE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_WHITEBALANCE, __pyx_t_4) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":48
 *     PyCAMERA_SETTINGS_EXPOSURE = CAMERA_SETTINGS_EXPOSURE
 *     PyCAMERA_SETTINGS_WHITEBALANCE = CAMERA_SETTINGS_WHITEBALANCE
 *     PyCAMERA_SETTINGS_AUTO_WHITEBALANCE = CAMERA_SETTINGS_AUTO_WHITEBALANCE             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_LAST = CAMERA_SETTINGS_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_AUTO_WHITEBALANCE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_AUTO_WHITEBALA, __pyx_t_4) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":49
 *     PyCAMERA_SETTINGS_WHITEBALANCE = CAMERA_SETTINGS_WHITEBALANCE
 *     PyCAMERA_SETTINGS_AUTO_WHITEBALANCE = CAMERA_SETTINGS_AUTO_WHITEBALANCE
 *     PyCAMERA_SETTINGS_LAST = CAMERA_SETTINGS_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCAMERA_SETTINGS_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":40
 * 
 * 
 * class PyCAMERA_SETTINGS(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyCAMERA_SETTINGS_BRIGHTNESS = CAMERA_SETTINGS_BRIGHTNESS
 *     PyCAMERA_SETTINGS_CONTRAST = CAMERA_SETTINGS_CONTRAST
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyCAMERA_SETTINGS, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyCAMERA_SETTINGS, __pyx_t_4) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":52
 * 
 * 
 * class PySELF_CALIBRATION_STATE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PySELF_CALIBRATION_STATE_NOT_STARTED = SELF_CALIBRATION_STATE_NOT_STARTED
 *     PySELF_CALIBRATION_STATE_RUNNING = SELF_CALIBRATION_STATE_RUNNING
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PySELF_CALIBRATION_STATE, __pyx_n_s_PySELF_CALIBRATION_STATE, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":53
 * 
 * class PySELF_CALIBRATION_STATE(enum.Enum):
 *     PySELF_CALIBRATION_STATE_NOT_STARTED = SELF_CALIBRATION_STATE_NOT_STARTED             # <<<<<<<<<<<<<<
 *     PySELF_CALIBRATION_STATE_RUNNING = SELF_CALIBRATION_STATE_RUNNING
 *     PySELF_CALIBRATION_STATE_FAILED = SELF_CALIBRATION_STATE_FAILED
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE_NOT_STARTED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySELF_CALIBRATION_STATE_NOT_STA, __pyx_t_4) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":54
 * class PySELF_CALIBRATION_STATE(enum.Enum):
 *     PySELF_CALIBRATION_STATE_NOT_STARTED = SELF_CALIBRATION_STATE_NOT_STARTED
 *     PySELF_CALIBRATION_STATE_RUNNING = SELF_CALIBRATION_STATE_RUNNING             # <<<<<<<<<<<<<<
 *     PySELF_CALIBRATION_STATE_FAILED = SELF_CALIBRATION_STATE_FAILED
 *     PySELF_CALIBRATION_STATE_SUCCESS = SELF_CALIBRATION_STATE_SUCCESS
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE_RUNNING); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySELF_CALIBRATION_STATE_RUNNING, __pyx_t_4) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":55
 *     PySELF_CALIBRATION_STATE_NOT_STARTED = SELF_CALIBRATION_STATE_NOT_STARTED
 *     PySELF_CALIBRATION_STATE_RUNNING = SELF_CALIBRATION_STATE_RUNNING
 *     PySELF_CALIBRATION_STATE_FAILED = SELF_CALIBRATION_STATE_FAILED             # <<<<<<<<<<<<<<
 *     PySELF_CALIBRATION_STATE_SUCCESS = SELF_CALIBRATION_STATE_SUCCESS
 *     PySELF_CALIBRATION_STATE_LAST = SELF_CALIBRATION_STATE_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE_FAILED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySELF_CALIBRATION_STATE_FAILED, __pyx_t_4) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":56
 *     PySELF_CALIBRATION_STATE_RUNNING = SELF_CALIBRATION_STATE_RUNNING
 *     PySELF_CALIBRATION_STATE_FAILED = SELF_CALIBRATION_STATE_FAILED
 *     PySELF_CALIBRATION_STATE_SUCCESS = SELF_CALIBRATION_STATE_SUCCESS             # <<<<<<<<<<<<<<
 *     PySELF_CALIBRATION_STATE_LAST = SELF_CALIBRATION_STATE_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE_SUCCESS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySELF_CALIBRATION_STATE_SUCCESS, __pyx_t_4) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":57
 *     PySELF_CALIBRATION_STATE_FAILED = SELF_CALIBRATION_STATE_FAILED
 *     PySELF_CALIBRATION_STATE_SUCCESS = SELF_CALIBRATION_STATE_SUCCESS
 *     PySELF_CALIBRATION_STATE_LAST = SELF_CALIBRATION_STATE_LAST             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySELF_CALIBRATION_STATE_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":59
 *     PySELF_CALIBRATION_STATE_LAST = SELF_CALIBRATION_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return statusCode2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_24PySELF_CALIBRATION_STATE_1__str__, 0, __pyx_n_s_PySELF_CALIBRATION_STATE___str, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":62
 *         return statusCode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return statusCode2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_24PySELF_CALIBRATION_STATE_3__repr__, 0, __pyx_n_s_PySELF_CALIBRATION_STATE___repr, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":52
 * 
 * 
 * class PySELF_CALIBRATION_STATE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PySELF_CALIBRATION_STATE_NOT_STARTED = SELF_CALIBRATION_STATE_NOT_STARTED
 *     PySELF_CALIBRATION_STATE_RUNNING = SELF_CALIBRATION_STATE_RUNNING
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PySELF_CALIBRATION_STATE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PySELF_CALIBRATION_STATE, __pyx_t_4) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":66
 * 
 * 
 * class PyDEPTH_MODE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyDEPTH_MODE_NONE = DEPTH_MODE_NONE
 *     PyDEPTH_MODE_PERFORMANCE = DEPTH_MODE_PERFORMANCE
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyDEPTH_MODE, __pyx_n_s_PyDEPTH_MODE, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":67
 * 
 * class PyDEPTH_MODE(enum.Enum):
 *     PyDEPTH_MODE_NONE = DEPTH_MODE_NONE             # <<<<<<<<<<<<<<
 *     PyDEPTH_MODE_PERFORMANCE = DEPTH_MODE_PERFORMANCE
 *     PyDEPTH_MODE_MEDIUM = DEPTH_MODE_MEDIUM
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE_NONE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_MODE_NONE, __pyx_t_4) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":68
 * class PyDEPTH_MODE(enum.Enum):
 *     PyDEPTH_MODE_NONE = DEPTH_MODE_NONE
 *     PyDEPTH_MODE_PERFORMANCE = DEPTH_MODE_PERFORMANCE             # <<<<<<<<<<<<<<
 *     PyDEPTH_MODE_MEDIUM = DEPTH_MODE_MEDIUM
 *     PyDEPTH_MODE_QUALITY = DEPTH_MODE_QUALITY
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE_PERFORMANCE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_MODE_PERFORMANCE, __pyx_t_4) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":69
 *     PyDEPTH_MODE_NONE = DEPTH_MODE_NONE
 *     PyDEPTH_MODE_PERFORMANCE = DEPTH_MODE_PERFORMANCE
 *     PyDEPTH_MODE_MEDIUM = DEPTH_MODE_MEDIUM             # <<<<<<<<<<<<<<
 *     PyDEPTH_MODE_QUALITY = DEPTH_MODE_QUALITY
 *     PyDEPTH_MODE_LAST = DEPTH_MODE_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE_MEDIUM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_MODE_MEDIUM, __pyx_t_4) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":70
 *     PyDEPTH_MODE_PERFORMANCE = DEPTH_MODE_PERFORMANCE
 *     PyDEPTH_MODE_MEDIUM = DEPTH_MODE_MEDIUM
 *     PyDEPTH_MODE_QUALITY = DEPTH_MODE_QUALITY             # <<<<<<<<<<<<<<
 *     PyDEPTH_MODE_LAST = DEPTH_MODE_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE_QUALITY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_MODE_QUALITY, __pyx_t_4) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":71
 *     PyDEPTH_MODE_MEDIUM = DEPTH_MODE_MEDIUM
 *     PyDEPTH_MODE_QUALITY = DEPTH_MODE_QUALITY
 *     PyDEPTH_MODE_LAST = DEPTH_MODE_LAST             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_MODE_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":73
 *     PyDEPTH_MODE_LAST = DEPTH_MODE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return depthMode2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_12PyDEPTH_MODE_1__str__, 0, __pyx_n_s_PyDEPTH_MODE___str, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":76
 *         return depthMode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return depthMode2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_12PyDEPTH_MODE_3__repr__, 0, __pyx_n_s_PyDEPTH_MODE___repr, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":66
 * 
 * 
 * class PyDEPTH_MODE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyDEPTH_MODE_NONE = DEPTH_MODE_NONE
 *     PyDEPTH_MODE_PERFORMANCE = DEPTH_MODE_PERFORMANCE
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyDEPTH_MODE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyDEPTH_MODE, __pyx_t_4) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":80
 * 
 * 
 * class PySENSING_MODE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PySENSING_MODE_STANDARD = SENSING_MODE_STANDARD
 *     PySENSING_MODE_FILL = SENSING_MODE_FILL
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PySENSING_MODE, __pyx_n_s_PySENSING_MODE, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":81
 * 
 * class PySENSING_MODE(enum.Enum):
 *     PySENSING_MODE_STANDARD = SENSING_MODE_STANDARD             # <<<<<<<<<<<<<<
 *     PySENSING_MODE_FILL = SENSING_MODE_FILL
 *     PySENSING_MODE_LAST = SENSING_MODE_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SENSING_MODE(sl::SENSING_MODE_STANDARD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySENSING_MODE_STANDARD, __pyx_t_4) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":82
 * class PySENSING_MODE(enum.Enum):
 *     PySENSING_MODE_STANDARD = SENSING_MODE_STANDARD
 *     PySENSING_MODE_FILL = SENSING_MODE_FILL             # <<<<<<<<<<<<<<
 *     PySENSING_MODE_LAST = SENSING_MODE_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SENSING_MODE(sl::SENSING_MODE_FILL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySENSING_MODE_FILL, __pyx_t_4) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":83
 *     PySENSING_MODE_STANDARD = SENSING_MODE_STANDARD
 *     PySENSING_MODE_FILL = SENSING_MODE_FILL
 *     PySENSING_MODE_LAST = SENSING_MODE_LAST             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SENSING_MODE(sl::SENSING_MODE_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySENSING_MODE_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":85
 *     PySENSING_MODE_LAST = SENSING_MODE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return sensingMode2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_14PySENSING_MODE_1__str__, 0, __pyx_n_s_PySENSING_MODE___str, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":88
 *         return sensingMode2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return sensingMode2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_14PySENSING_MODE_3__repr__, 0, __pyx_n_s_PySENSING_MODE___repr, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":80
 * 
 * 
 * class PySENSING_MODE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PySENSING_MODE_STANDARD = SENSING_MODE_STANDARD
 *     PySENSING_MODE_FILL = SENSING_MODE_FILL
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PySENSING_MODE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PySENSING_MODE, __pyx_t_4) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":92
 * 
 * 
 * class PyUNIT(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyUNIT_MILLIMETER = UNIT_MILLIMETER
 *     PyUNIT_CENTIMETER = UNIT_CENTIMETER
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyUNIT, __pyx_n_s_PyUNIT, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":93
 * 
 * class PyUNIT(enum.Enum):
 *     PyUNIT_MILLIMETER = UNIT_MILLIMETER             # <<<<<<<<<<<<<<
 *     PyUNIT_CENTIMETER = UNIT_CENTIMETER
 *     PyUNIT_METER = UNIT_METER
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT_MILLIMETER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyUNIT_MILLIMETER, __pyx_t_4) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":94
 * class PyUNIT(enum.Enum):
 *     PyUNIT_MILLIMETER = UNIT_MILLIMETER
 *     PyUNIT_CENTIMETER = UNIT_CENTIMETER             # <<<<<<<<<<<<<<
 *     PyUNIT_METER = UNIT_METER
 *     PyUNIT_INCH = UNIT_INCH
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT_CENTIMETER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyUNIT_CENTIMETER, __pyx_t_4) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":95
 *     PyUNIT_MILLIMETER = UNIT_MILLIMETER
 *     PyUNIT_CENTIMETER = UNIT_CENTIMETER
 *     PyUNIT_METER = UNIT_METER             # <<<<<<<<<<<<<<
 *     PyUNIT_INCH = UNIT_INCH
 *     PyUNIT_FOOT = UNIT_FOOT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT_METER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyUNIT_METER, __pyx_t_4) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":96
 *     PyUNIT_CENTIMETER = UNIT_CENTIMETER
 *     PyUNIT_METER = UNIT_METER
 *     PyUNIT_INCH = UNIT_INCH             # <<<<<<<<<<<<<<
 *     PyUNIT_FOOT = UNIT_FOOT
 *     PyUNIT_LAST = UNIT_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT_INCH); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyUNIT_INCH, __pyx_t_4) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":97
 *     PyUNIT_METER = UNIT_METER
 *     PyUNIT_INCH = UNIT_INCH
 *     PyUNIT_FOOT = UNIT_FOOT             # <<<<<<<<<<<<<<
 *     PyUNIT_LAST = UNIT_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT_FOOT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyUNIT_FOOT, __pyx_t_4) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":98
 *     PyUNIT_INCH = UNIT_INCH
 *     PyUNIT_FOOT = UNIT_FOOT
 *     PyUNIT_LAST = UNIT_LAST             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyUNIT_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":100
 *     PyUNIT_LAST = UNIT_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return unit2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_6PyUNIT_1__str__, 0, __pyx_n_s_PyUNIT___str, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":103
 *         return unit2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return unit2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_6PyUNIT_3__repr__, 0, __pyx_n_s_PyUNIT___repr, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":92
 * 
 * 
 * class PyUNIT(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyUNIT_MILLIMETER = UNIT_MILLIMETER
 *     PyUNIT_CENTIMETER = UNIT_CENTIMETER
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyUNIT, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyUNIT, __pyx_t_4) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":107
 * 
 * 
 * class PyCOORDINATE_SYSTEM(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyCOORDINATE_SYSTEM_IMAGE = COORDINATE_SYSTEM_IMAGE
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Y_UP = COORDINATE_SYSTEM_LEFT_HANDED_Y_UP
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyCOORDINATE_SYSTEM, __pyx_n_s_PyCOORDINATE_SYSTEM, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":108
 * 
 * class PyCOORDINATE_SYSTEM(enum.Enum):
 *     PyCOORDINATE_SYSTEM_IMAGE = COORDINATE_SYSTEM_IMAGE             # <<<<<<<<<<<<<<
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Y_UP = COORDINATE_SYSTEM_LEFT_HANDED_Y_UP
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Y_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Y_UP
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM_IMAGE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOORDINATE_SYSTEM_IMAGE, __pyx_t_4) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":109
 * class PyCOORDINATE_SYSTEM(enum.Enum):
 *     PyCOORDINATE_SYSTEM_IMAGE = COORDINATE_SYSTEM_IMAGE
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Y_UP = COORDINATE_SYSTEM_LEFT_HANDED_Y_UP             # <<<<<<<<<<<<<<
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Y_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Y_UP
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Z_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Z_UP
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM_LEFT_HANDED_Y_UP); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOORDINATE_SYSTEM_LEFT_HANDED, __pyx_t_4) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":110
 *     PyCOORDINATE_SYSTEM_IMAGE = COORDINATE_SYSTEM_IMAGE
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Y_UP = COORDINATE_SYSTEM_LEFT_HANDED_Y_UP
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Y_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Y_UP             # <<<<<<<<<<<<<<
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Z_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Z_UP
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Z_UP = COORDINATE_SYSTEM_LEFT_HANDED_Z_UP
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM_RIGHT_HANDED_Y_UP); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOORDINATE_SYSTEM_RIGHT_HANDED, __pyx_t_4) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":111
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Y_UP = COORDINATE_SYSTEM_LEFT_HANDED_Y_UP
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Y_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Y_UP
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Z_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Z_UP             # <<<<<<<<<<<<<<
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Z_UP = COORDINATE_SYSTEM_LEFT_HANDED_Z_UP
 *     PyCOORDINATE_SYSTEM_LAST = COORDINATE_SYSTEM_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM_RIGHT_HANDED_Z_UP); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOORDINATE_SYSTEM_RIGHT_HANDED_2, __pyx_t_4) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":112
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Y_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Y_UP
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Z_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Z_UP
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Z_UP = COORDINATE_SYSTEM_LEFT_HANDED_Z_UP             # <<<<<<<<<<<<<<
 *     PyCOORDINATE_SYSTEM_LAST = COORDINATE_SYSTEM_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM_LEFT_HANDED_Z_UP); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOORDINATE_SYSTEM_LEFT_HANDED_2, __pyx_t_4) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":113
 *     PyCOORDINATE_SYSTEM_RIGHT_HANDED_Z_UP = COORDINATE_SYSTEM_RIGHT_HANDED_Z_UP
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Z_UP = COORDINATE_SYSTEM_LEFT_HANDED_Z_UP
 *     PyCOORDINATE_SYSTEM_LAST = COORDINATE_SYSTEM_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyCOORDINATE_SYSTEM_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":107
 * 
 * 
 * class PyCOORDINATE_SYSTEM(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyCOORDINATE_SYSTEM_IMAGE = COORDINATE_SYSTEM_IMAGE
 *     PyCOORDINATE_SYSTEM_LEFT_HANDED_Y_UP = COORDINATE_SYSTEM_LEFT_HANDED_Y_UP
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyCOORDINATE_SYSTEM, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyCOORDINATE_SYSTEM, __pyx_t_4) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":116
 * 
 * 
 * class PyMEASURE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyMEASURE_DISPARITY = MEASURE_DISPARITY
 *     PyMEASURE_DEPTH = MEASURE_DEPTH
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyMEASURE, __pyx_n_s_PyMEASURE, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":117
 * 
 * class PyMEASURE(enum.Enum):
 *     PyMEASURE_DISPARITY = MEASURE_DISPARITY             # <<<<<<<<<<<<<<
 *     PyMEASURE_DEPTH = MEASURE_DEPTH
 *     PyMEASURE_CONFIDENCE = MEASURE_CONFIDENCE
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_DISPARITY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_DISPARITY, __pyx_t_4) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":118
 * class PyMEASURE(enum.Enum):
 *     PyMEASURE_DISPARITY = MEASURE_DISPARITY
 *     PyMEASURE_DEPTH = MEASURE_DEPTH             # <<<<<<<<<<<<<<
 *     PyMEASURE_CONFIDENCE = MEASURE_CONFIDENCE
 *     PyMEASURE_XYZ = MEASURE_XYZ
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_DEPTH); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_DEPTH, __pyx_t_4) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":119
 *     PyMEASURE_DISPARITY = MEASURE_DISPARITY
 *     PyMEASURE_DEPTH = MEASURE_DEPTH
 *     PyMEASURE_CONFIDENCE = MEASURE_CONFIDENCE             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZ = MEASURE_XYZ
 *     PyMEASURE_XYZRGBA = MEASURE_XYZRGBA
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_CONFIDENCE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_CONFIDENCE, __pyx_t_4) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":120
 *     PyMEASURE_DEPTH = MEASURE_DEPTH
 *     PyMEASURE_CONFIDENCE = MEASURE_CONFIDENCE
 *     PyMEASURE_XYZ = MEASURE_XYZ             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZRGBA = MEASURE_XYZRGBA
 *     PyMEASURE_XYZBGRA = MEASURE_XYZBGRA
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZ, __pyx_t_4) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":121
 *     PyMEASURE_CONFIDENCE = MEASURE_CONFIDENCE
 *     PyMEASURE_XYZ = MEASURE_XYZ
 *     PyMEASURE_XYZRGBA = MEASURE_XYZRGBA             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZBGRA = MEASURE_XYZBGRA
 *     PyMEASURE_XYZARGB = MEASURE_XYZARGB
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZRGBA); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZRGBA, __pyx_t_4) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":122
 *     PyMEASURE_XYZ = MEASURE_XYZ
 *     PyMEASURE_XYZRGBA = MEASURE_XYZRGBA
 *     PyMEASURE_XYZBGRA = MEASURE_XYZBGRA             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZARGB = MEASURE_XYZARGB
 *     PyMEASURE_XYZABGR = MEASURE_XYZABGR
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZBGRA); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZBGRA, __pyx_t_4) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":123
 *     PyMEASURE_XYZRGBA = MEASURE_XYZRGBA
 *     PyMEASURE_XYZBGRA = MEASURE_XYZBGRA
 *     PyMEASURE_XYZARGB = MEASURE_XYZARGB             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZABGR = MEASURE_XYZABGR
 *     PyMEASURE_NORMALS = MEASURE_NORMALS
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZARGB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZARGB, __pyx_t_4) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":124
 *     PyMEASURE_XYZBGRA = MEASURE_XYZBGRA
 *     PyMEASURE_XYZARGB = MEASURE_XYZARGB
 *     PyMEASURE_XYZABGR = MEASURE_XYZABGR             # <<<<<<<<<<<<<<
 *     PyMEASURE_NORMALS = MEASURE_NORMALS
 *     PyMEASURE_DISPARITY_RIGHT = MEASURE_DISPARITY_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZABGR); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZABGR, __pyx_t_4) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":125
 *     PyMEASURE_XYZARGB = MEASURE_XYZARGB
 *     PyMEASURE_XYZABGR = MEASURE_XYZABGR
 *     PyMEASURE_NORMALS = MEASURE_NORMALS             # <<<<<<<<<<<<<<
 *     PyMEASURE_DISPARITY_RIGHT = MEASURE_DISPARITY_RIGHT
 *     PyMEASURE_DEPTH_RIGHT = MEASURE_DEPTH_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_NORMALS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_NORMALS, __pyx_t_4) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":126
 *     PyMEASURE_XYZABGR = MEASURE_XYZABGR
 *     PyMEASURE_NORMALS = MEASURE_NORMALS
 *     PyMEASURE_DISPARITY_RIGHT = MEASURE_DISPARITY_RIGHT             # <<<<<<<<<<<<<<
 *     PyMEASURE_DEPTH_RIGHT = MEASURE_DEPTH_RIGHT
 *     PyMEASURE_XYZ_RIGHT = MEASURE_XYZ_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_DISPARITY_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_DISPARITY_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":127
 *     PyMEASURE_NORMALS = MEASURE_NORMALS
 *     PyMEASURE_DISPARITY_RIGHT = MEASURE_DISPARITY_RIGHT
 *     PyMEASURE_DEPTH_RIGHT = MEASURE_DEPTH_RIGHT             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZ_RIGHT = MEASURE_XYZ_RIGHT
 *     PyMEASURE_XYZRGBA_RIGHT = MEASURE_XYZRGBA_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_DEPTH_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_DEPTH_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":128
 *     PyMEASURE_DISPARITY_RIGHT = MEASURE_DISPARITY_RIGHT
 *     PyMEASURE_DEPTH_RIGHT = MEASURE_DEPTH_RIGHT
 *     PyMEASURE_XYZ_RIGHT = MEASURE_XYZ_RIGHT             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZRGBA_RIGHT = MEASURE_XYZRGBA_RIGHT
 *     PyMEASURE_XYZBGRA_RIGHT = MEASURE_XYZBGRA_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZ_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZ_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":129
 *     PyMEASURE_DEPTH_RIGHT = MEASURE_DEPTH_RIGHT
 *     PyMEASURE_XYZ_RIGHT = MEASURE_XYZ_RIGHT
 *     PyMEASURE_XYZRGBA_RIGHT = MEASURE_XYZRGBA_RIGHT             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZBGRA_RIGHT = MEASURE_XYZBGRA_RIGHT
 *     PyMEASURE_XYZARGB_RIGHT = MEASURE_XYZARGB_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZRGBA_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZRGBA_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":130
 *     PyMEASURE_XYZ_RIGHT = MEASURE_XYZ_RIGHT
 *     PyMEASURE_XYZRGBA_RIGHT = MEASURE_XYZRGBA_RIGHT
 *     PyMEASURE_XYZBGRA_RIGHT = MEASURE_XYZBGRA_RIGHT             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZARGB_RIGHT = MEASURE_XYZARGB_RIGHT
 *     PyMEASURE_XYZABGR_RIGHT = MEASURE_XYZABGR_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZBGRA_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZBGRA_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":131
 *     PyMEASURE_XYZRGBA_RIGHT = MEASURE_XYZRGBA_RIGHT
 *     PyMEASURE_XYZBGRA_RIGHT = MEASURE_XYZBGRA_RIGHT
 *     PyMEASURE_XYZARGB_RIGHT = MEASURE_XYZARGB_RIGHT             # <<<<<<<<<<<<<<
 *     PyMEASURE_XYZABGR_RIGHT = MEASURE_XYZABGR_RIGHT
 *     PyMEASURE_NORMALS_RIGHT = MEASURE_NORMALS_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZARGB_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZARGB_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":132
 *     PyMEASURE_XYZBGRA_RIGHT = MEASURE_XYZBGRA_RIGHT
 *     PyMEASURE_XYZARGB_RIGHT = MEASURE_XYZARGB_RIGHT
 *     PyMEASURE_XYZABGR_RIGHT = MEASURE_XYZABGR_RIGHT             # <<<<<<<<<<<<<<
 *     PyMEASURE_NORMALS_RIGHT = MEASURE_NORMALS_RIGHT
 *     PyMEASURE_LAST = MEASURE_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_XYZABGR_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_XYZABGR_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":133
 *     PyMEASURE_XYZARGB_RIGHT = MEASURE_XYZARGB_RIGHT
 *     PyMEASURE_XYZABGR_RIGHT = MEASURE_XYZABGR_RIGHT
 *     PyMEASURE_NORMALS_RIGHT = MEASURE_NORMALS_RIGHT             # <<<<<<<<<<<<<<
 *     PyMEASURE_LAST = MEASURE_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_NORMALS_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_NORMALS_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":134
 *     PyMEASURE_XYZABGR_RIGHT = MEASURE_XYZABGR_RIGHT
 *     PyMEASURE_NORMALS_RIGHT = MEASURE_NORMALS_RIGHT
 *     PyMEASURE_LAST = MEASURE_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyMEASURE_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":116
 * 
 * 
 * class PyMEASURE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyMEASURE_DISPARITY = MEASURE_DISPARITY
 *     PyMEASURE_DEPTH = MEASURE_DEPTH
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyMEASURE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyMEASURE, __pyx_t_4) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":137
 * 
 * 
 * class PyVIEW(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyVIEW_LEFT = VIEW_LEFT
 *     PyVIEW_RIGHT = VIEW_RIGHT
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyVIEW, __pyx_n_s_PyVIEW, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":138
 * 
 * class PyVIEW(enum.Enum):
 *     PyVIEW_LEFT = VIEW_LEFT             # <<<<<<<<<<<<<<
 *     PyVIEW_RIGHT = VIEW_RIGHT
 *     PyVIEW_LEFT_GRAY = VIEW_LEFT_GRAY
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_LEFT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_LEFT, __pyx_t_4) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":139
 * class PyVIEW(enum.Enum):
 *     PyVIEW_LEFT = VIEW_LEFT
 *     PyVIEW_RIGHT = VIEW_RIGHT             # <<<<<<<<<<<<<<
 *     PyVIEW_LEFT_GRAY = VIEW_LEFT_GRAY
 *     PyVIEW_RIGHT_GRAY = VIEW_RIGHT_GRAY
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":140
 *     PyVIEW_LEFT = VIEW_LEFT
 *     PyVIEW_RIGHT = VIEW_RIGHT
 *     PyVIEW_LEFT_GRAY = VIEW_LEFT_GRAY             # <<<<<<<<<<<<<<
 *     PyVIEW_RIGHT_GRAY = VIEW_RIGHT_GRAY
 *     PyVIEW_LEFT_UNRECTIFIED = VIEW_LEFT_UNRECTIFIED
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_LEFT_GRAY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_LEFT_GRAY, __pyx_t_4) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":141
 *     PyVIEW_RIGHT = VIEW_RIGHT
 *     PyVIEW_LEFT_GRAY = VIEW_LEFT_GRAY
 *     PyVIEW_RIGHT_GRAY = VIEW_RIGHT_GRAY             # <<<<<<<<<<<<<<
 *     PyVIEW_LEFT_UNRECTIFIED = VIEW_LEFT_UNRECTIFIED
 *     PyVIEW_RIGHT_UNRECTIFIED = VIEW_RIGHT_UNRECTIFIED
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_RIGHT_GRAY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_RIGHT_GRAY, __pyx_t_4) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":142
 *     PyVIEW_LEFT_GRAY = VIEW_LEFT_GRAY
 *     PyVIEW_RIGHT_GRAY = VIEW_RIGHT_GRAY
 *     PyVIEW_LEFT_UNRECTIFIED = VIEW_LEFT_UNRECTIFIED             # <<<<<<<<<<<<<<
 *     PyVIEW_RIGHT_UNRECTIFIED = VIEW_RIGHT_UNRECTIFIED
 *     PyVIEW_LEFT_UNRECTIFIED_GRAY = VIEW_LEFT_UNRECTIFIED_GRAY
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_LEFT_UNRECTIFIED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_LEFT_UNRECTIFIED, __pyx_t_4) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":143
 *     PyVIEW_RIGHT_GRAY = VIEW_RIGHT_GRAY
 *     PyVIEW_LEFT_UNRECTIFIED = VIEW_LEFT_UNRECTIFIED
 *     PyVIEW_RIGHT_UNRECTIFIED = VIEW_RIGHT_UNRECTIFIED             # <<<<<<<<<<<<<<
 *     PyVIEW_LEFT_UNRECTIFIED_GRAY = VIEW_LEFT_UNRECTIFIED_GRAY
 *     PyVIEW_RIGHT_UNRECTIFIED_GRAY = VIEW_RIGHT_UNRECTIFIED_GRAY
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_RIGHT_UNRECTIFIED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_RIGHT_UNRECTIFIED, __pyx_t_4) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":144
 *     PyVIEW_LEFT_UNRECTIFIED = VIEW_LEFT_UNRECTIFIED
 *     PyVIEW_RIGHT_UNRECTIFIED = VIEW_RIGHT_UNRECTIFIED
 *     PyVIEW_LEFT_UNRECTIFIED_GRAY = VIEW_LEFT_UNRECTIFIED_GRAY             # <<<<<<<<<<<<<<
 *     PyVIEW_RIGHT_UNRECTIFIED_GRAY = VIEW_RIGHT_UNRECTIFIED_GRAY
 *     PyVIEW_SIDE_BY_SIDE = VIEW_SIDE_BY_SIDE
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_LEFT_UNRECTIFIED_GRAY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_LEFT_UNRECTIFIED_GRAY, __pyx_t_4) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":145
 *     PyVIEW_RIGHT_UNRECTIFIED = VIEW_RIGHT_UNRECTIFIED
 *     PyVIEW_LEFT_UNRECTIFIED_GRAY = VIEW_LEFT_UNRECTIFIED_GRAY
 *     PyVIEW_RIGHT_UNRECTIFIED_GRAY = VIEW_RIGHT_UNRECTIFIED_GRAY             # <<<<<<<<<<<<<<
 *     PyVIEW_SIDE_BY_SIDE = VIEW_SIDE_BY_SIDE
 *     PyVIEW_DEPTH = VIEW_DEPTH
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_RIGHT_UNRECTIFIED_GRAY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_RIGHT_UNRECTIFIED_GRAY, __pyx_t_4) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":146
 *     PyVIEW_LEFT_UNRECTIFIED_GRAY = VIEW_LEFT_UNRECTIFIED_GRAY
 *     PyVIEW_RIGHT_UNRECTIFIED_GRAY = VIEW_RIGHT_UNRECTIFIED_GRAY
 *     PyVIEW_SIDE_BY_SIDE = VIEW_SIDE_BY_SIDE             # <<<<<<<<<<<<<<
 *     PyVIEW_DEPTH = VIEW_DEPTH
 *     PyVIEW_CONFIDENCE = VIEW_CONFIDENCE
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_SIDE_BY_SIDE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_SIDE_BY_SIDE, __pyx_t_4) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":147
 *     PyVIEW_RIGHT_UNRECTIFIED_GRAY = VIEW_RIGHT_UNRECTIFIED_GRAY
 *     PyVIEW_SIDE_BY_SIDE = VIEW_SIDE_BY_SIDE
 *     PyVIEW_DEPTH = VIEW_DEPTH             # <<<<<<<<<<<<<<
 *     PyVIEW_CONFIDENCE = VIEW_CONFIDENCE
 *     PyVIEW_NORMALS = VIEW_NORMALS
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_DEPTH); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_DEPTH, __pyx_t_4) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":148
 *     PyVIEW_SIDE_BY_SIDE = VIEW_SIDE_BY_SIDE
 *     PyVIEW_DEPTH = VIEW_DEPTH
 *     PyVIEW_CONFIDENCE = VIEW_CONFIDENCE             # <<<<<<<<<<<<<<
 *     PyVIEW_NORMALS = VIEW_NORMALS
 *     PyVIEW_DEPTH_RIGHT = VIEW_DEPTH_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_CONFIDENCE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_CONFIDENCE, __pyx_t_4) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":149
 *     PyVIEW_DEPTH = VIEW_DEPTH
 *     PyVIEW_CONFIDENCE = VIEW_CONFIDENCE
 *     PyVIEW_NORMALS = VIEW_NORMALS             # <<<<<<<<<<<<<<
 *     PyVIEW_DEPTH_RIGHT = VIEW_DEPTH_RIGHT
 *     PyVIEW_NORMALS_RIGHT = VIEW_NORMALS_RIGHT
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_NORMALS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_NORMALS, __pyx_t_4) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":150
 *     PyVIEW_CONFIDENCE = VIEW_CONFIDENCE
 *     PyVIEW_NORMALS = VIEW_NORMALS
 *     PyVIEW_DEPTH_RIGHT = VIEW_DEPTH_RIGHT             # <<<<<<<<<<<<<<
 *     PyVIEW_NORMALS_RIGHT = VIEW_NORMALS_RIGHT
 *     PyVIEW_LAST = VIEW_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_DEPTH_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_DEPTH_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":151
 *     PyVIEW_NORMALS = VIEW_NORMALS
 *     PyVIEW_DEPTH_RIGHT = VIEW_DEPTH_RIGHT
 *     PyVIEW_NORMALS_RIGHT = VIEW_NORMALS_RIGHT             # <<<<<<<<<<<<<<
 *     PyVIEW_LAST = VIEW_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_NORMALS_RIGHT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_NORMALS_RIGHT, __pyx_t_4) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":152
 *     PyVIEW_DEPTH_RIGHT = VIEW_DEPTH_RIGHT
 *     PyVIEW_NORMALS_RIGHT = VIEW_NORMALS_RIGHT
 *     PyVIEW_LAST = VIEW_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyVIEW_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":137
 * 
 * 
 * class PyVIEW(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyVIEW_LEFT = VIEW_LEFT
 *     PyVIEW_RIGHT = VIEW_RIGHT
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyVIEW, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyVIEW, __pyx_t_4) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":155
 * 
 * 
 * class PyDEPTH_FORMAT(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyDEPTH_FORMAT_PNG = DEPTH_FORMAT_PNG
 *     PyDEPTH_FORMAT_PFM = DEPTH_FORMAT_PFM
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyDEPTH_FORMAT, __pyx_n_s_PyDEPTH_FORMAT, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":156
 * 
 * class PyDEPTH_FORMAT(enum.Enum):
 *     PyDEPTH_FORMAT_PNG = DEPTH_FORMAT_PNG             # <<<<<<<<<<<<<<
 *     PyDEPTH_FORMAT_PFM = DEPTH_FORMAT_PFM
 *     PyDEPTH_FORMAT_PGM = DEPTH_FORMAT_PGM
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_FORMAT(sl::DEPTH_FORMAT_PNG); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_FORMAT_PNG, __pyx_t_4) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":157
 * class PyDEPTH_FORMAT(enum.Enum):
 *     PyDEPTH_FORMAT_PNG = DEPTH_FORMAT_PNG
 *     PyDEPTH_FORMAT_PFM = DEPTH_FORMAT_PFM             # <<<<<<<<<<<<<<
 *     PyDEPTH_FORMAT_PGM = DEPTH_FORMAT_PGM
 *     PyDEPTH_FORMAT_LAST = DEPTH_FORMAT_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_FORMAT(sl::DEPTH_FORMAT_PFM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_FORMAT_PFM, __pyx_t_4) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":158
 *     PyDEPTH_FORMAT_PNG = DEPTH_FORMAT_PNG
 *     PyDEPTH_FORMAT_PFM = DEPTH_FORMAT_PFM
 *     PyDEPTH_FORMAT_PGM = DEPTH_FORMAT_PGM             # <<<<<<<<<<<<<<
 *     PyDEPTH_FORMAT_LAST = DEPTH_FORMAT_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_FORMAT(sl::DEPTH_FORMAT_PGM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_FORMAT_PGM, __pyx_t_4) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":159
 *     PyDEPTH_FORMAT_PFM = DEPTH_FORMAT_PFM
 *     PyDEPTH_FORMAT_PGM = DEPTH_FORMAT_PGM
 *     PyDEPTH_FORMAT_LAST = DEPTH_FORMAT_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_DEPTH_FORMAT(sl::DEPTH_FORMAT_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyDEPTH_FORMAT_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":155
 * 
 * 
 * class PyDEPTH_FORMAT(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyDEPTH_FORMAT_PNG = DEPTH_FORMAT_PNG
 *     PyDEPTH_FORMAT_PFM = DEPTH_FORMAT_PFM
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyDEPTH_FORMAT, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyDEPTH_FORMAT, __pyx_t_4) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":162
 * 
 * 
 * class PyPOINT_CLOUD_FORMAT(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyPOINT_CLOUD_FORMAT_XYZ_ASCII = POINT_CLOUD_FORMAT_XYZ_ASCII
 *     PyPOINT_CLOUD_FORMAT_PCD_ASCII = POINT_CLOUD_FORMAT_PCD_ASCII
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyPOINT_CLOUD_FORMAT, __pyx_n_s_PyPOINT_CLOUD_FORMAT, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":163
 * 
 * class PyPOINT_CLOUD_FORMAT(enum.Enum):
 *     PyPOINT_CLOUD_FORMAT_XYZ_ASCII = POINT_CLOUD_FORMAT_XYZ_ASCII             # <<<<<<<<<<<<<<
 *     PyPOINT_CLOUD_FORMAT_PCD_ASCII = POINT_CLOUD_FORMAT_PCD_ASCII
 *     PyPOINT_CLOUD_FORMAT_PLY_ASCII = POINT_CLOUD_FORMAT_PLY_ASCII
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_POINT_CLOUD_FORMAT(sl::POINT_CLOUD_FORMAT_XYZ_ASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyPOINT_CLOUD_FORMAT_XYZ_ASCII, __pyx_t_4) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":164
 * class PyPOINT_CLOUD_FORMAT(enum.Enum):
 *     PyPOINT_CLOUD_FORMAT_XYZ_ASCII = POINT_CLOUD_FORMAT_XYZ_ASCII
 *     PyPOINT_CLOUD_FORMAT_PCD_ASCII = POINT_CLOUD_FORMAT_PCD_ASCII             # <<<<<<<<<<<<<<
 *     PyPOINT_CLOUD_FORMAT_PLY_ASCII = POINT_CLOUD_FORMAT_PLY_ASCII
 *     PyPOINT_CLOUD_FORMAT_VTK_ASCII = POINT_CLOUD_FORMAT_VTK_ASCII
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_POINT_CLOUD_FORMAT(sl::POINT_CLOUD_FORMAT_PCD_ASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyPOINT_CLOUD_FORMAT_PCD_ASCII, __pyx_t_4) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":165
 *     PyPOINT_CLOUD_FORMAT_XYZ_ASCII = POINT_CLOUD_FORMAT_XYZ_ASCII
 *     PyPOINT_CLOUD_FORMAT_PCD_ASCII = POINT_CLOUD_FORMAT_PCD_ASCII
 *     PyPOINT_CLOUD_FORMAT_PLY_ASCII = POINT_CLOUD_FORMAT_PLY_ASCII             # <<<<<<<<<<<<<<
 *     PyPOINT_CLOUD_FORMAT_VTK_ASCII = POINT_CLOUD_FORMAT_VTK_ASCII
 *     PyPOINT_CLOUD_FORMAT_LAST = POINT_CLOUD_FORMAT_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_POINT_CLOUD_FORMAT(sl::POINT_CLOUD_FORMAT_PLY_ASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyPOINT_CLOUD_FORMAT_PLY_ASCII, __pyx_t_4) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":166
 *     PyPOINT_CLOUD_FORMAT_PCD_ASCII = POINT_CLOUD_FORMAT_PCD_ASCII
 *     PyPOINT_CLOUD_FORMAT_PLY_ASCII = POINT_CLOUD_FORMAT_PLY_ASCII
 *     PyPOINT_CLOUD_FORMAT_VTK_ASCII = POINT_CLOUD_FORMAT_VTK_ASCII             # <<<<<<<<<<<<<<
 *     PyPOINT_CLOUD_FORMAT_LAST = POINT_CLOUD_FORMAT_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_POINT_CLOUD_FORMAT(sl::POINT_CLOUD_FORMAT_VTK_ASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyPOINT_CLOUD_FORMAT_VTK_ASCII, __pyx_t_4) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":167
 *     PyPOINT_CLOUD_FORMAT_PLY_ASCII = POINT_CLOUD_FORMAT_PLY_ASCII
 *     PyPOINT_CLOUD_FORMAT_VTK_ASCII = POINT_CLOUD_FORMAT_VTK_ASCII
 *     PyPOINT_CLOUD_FORMAT_LAST = POINT_CLOUD_FORMAT_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_POINT_CLOUD_FORMAT(sl::POINT_CLOUD_FORMAT_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyPOINT_CLOUD_FORMAT_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":162
 * 
 * 
 * class PyPOINT_CLOUD_FORMAT(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyPOINT_CLOUD_FORMAT_XYZ_ASCII = POINT_CLOUD_FORMAT_XYZ_ASCII
 *     PyPOINT_CLOUD_FORMAT_PCD_ASCII = POINT_CLOUD_FORMAT_PCD_ASCII
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyPOINT_CLOUD_FORMAT, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyPOINT_CLOUD_FORMAT, __pyx_t_4) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":170
 * 
 * 
 * class PyTRACKING_STATE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyTRACKING_STATE_SEARCHING = TRACKING_STATE_SEARCHING
 *     PyTRACKING_STATE_OK = TRACKING_STATE_OK
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyTRACKING_STATE, __pyx_n_s_PyTRACKING_STATE, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":171
 * 
 * class PyTRACKING_STATE(enum.Enum):
 *     PyTRACKING_STATE_SEARCHING = TRACKING_STATE_SEARCHING             # <<<<<<<<<<<<<<
 *     PyTRACKING_STATE_OK = TRACKING_STATE_OK
 *     PyTRACKING_STATE_OFF = TRACKING_STATE_OFF
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE_SEARCHING); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyTRACKING_STATE_SEARCHING, __pyx_t_4) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":172
 * class PyTRACKING_STATE(enum.Enum):
 *     PyTRACKING_STATE_SEARCHING = TRACKING_STATE_SEARCHING
 *     PyTRACKING_STATE_OK = TRACKING_STATE_OK             # <<<<<<<<<<<<<<
 *     PyTRACKING_STATE_OFF = TRACKING_STATE_OFF
 *     PyTRACKING_STATE_FPS_TOO_LOW = TRACKING_STATE_FPS_TOO_LOW
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE_OK); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyTRACKING_STATE_OK, __pyx_t_4) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":173
 *     PyTRACKING_STATE_SEARCHING = TRACKING_STATE_SEARCHING
 *     PyTRACKING_STATE_OK = TRACKING_STATE_OK
 *     PyTRACKING_STATE_OFF = TRACKING_STATE_OFF             # <<<<<<<<<<<<<<
 *     PyTRACKING_STATE_FPS_TOO_LOW = TRACKING_STATE_FPS_TOO_LOW
 *     PyTRACKING_STATE_LAST = TRACKING_STATE_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE_OFF); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyTRACKING_STATE_OFF, __pyx_t_4) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":174
 *     PyTRACKING_STATE_OK = TRACKING_STATE_OK
 *     PyTRACKING_STATE_OFF = TRACKING_STATE_OFF
 *     PyTRACKING_STATE_FPS_TOO_LOW = TRACKING_STATE_FPS_TOO_LOW             # <<<<<<<<<<<<<<
 *     PyTRACKING_STATE_LAST = TRACKING_STATE_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE_FPS_TOO_LOW); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyTRACKING_STATE_FPS_TOO_LOW, __pyx_t_4) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":175
 *     PyTRACKING_STATE_OFF = TRACKING_STATE_OFF
 *     PyTRACKING_STATE_FPS_TOO_LOW = TRACKING_STATE_FPS_TOO_LOW
 *     PyTRACKING_STATE_LAST = TRACKING_STATE_LAST             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyTRACKING_STATE_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":177
 *     PyTRACKING_STATE_LAST = TRACKING_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return trackingState2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_16PyTRACKING_STATE_1__str__, 0, __pyx_n_s_PyTRACKING_STATE___str, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":180
 *         return trackingState2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return trackingState2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_16PyTRACKING_STATE_3__repr__, 0, __pyx_n_s_PyTRACKING_STATE___repr, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":170
 * 
 * 
 * class PyTRACKING_STATE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyTRACKING_STATE_SEARCHING = TRACKING_STATE_SEARCHING
 *     PyTRACKING_STATE_OK = TRACKING_STATE_OK
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyTRACKING_STATE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyTRACKING_STATE, __pyx_t_4) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":184
 * 
 * 
 * class PyAREA_EXPORT_STATE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyAREA_EXPORT_STATE_SUCCESS = AREA_EXPORT_STATE_SUCCESS
 *     PyAREA_EXPORT_STATE_RUNNING = AREA_EXPORT_STATE_RUNNING
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyAREA_EXPORT_STATE, __pyx_n_s_PyAREA_EXPORT_STATE, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":185
 * 
 * class PyAREA_EXPORT_STATE(enum.Enum):
 *     PyAREA_EXPORT_STATE_SUCCESS = AREA_EXPORT_STATE_SUCCESS             # <<<<<<<<<<<<<<
 *     PyAREA_EXPORT_STATE_RUNNING = AREA_EXPORT_STATE_RUNNING
 *     PyAREA_EXPORT_STATE_NOT_STARTED = AREA_EXPORT_STATE_NOT_STARTED
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE_SUCCESS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyAREA_EXPORT_STATE_SUCCESS, __pyx_t_4) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":186
 * class PyAREA_EXPORT_STATE(enum.Enum):
 *     PyAREA_EXPORT_STATE_SUCCESS = AREA_EXPORT_STATE_SUCCESS
 *     PyAREA_EXPORT_STATE_RUNNING = AREA_EXPORT_STATE_RUNNING             # <<<<<<<<<<<<<<
 *     PyAREA_EXPORT_STATE_NOT_STARTED = AREA_EXPORT_STATE_NOT_STARTED
 *     PyAREA_EXPORT_STATE_FILE_EMPTY = AREA_EXPORT_STATE_FILE_EMPTY
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE_RUNNING); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyAREA_EXPORT_STATE_RUNNING, __pyx_t_4) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":187
 *     PyAREA_EXPORT_STATE_SUCCESS = AREA_EXPORT_STATE_SUCCESS
 *     PyAREA_EXPORT_STATE_RUNNING = AREA_EXPORT_STATE_RUNNING
 *     PyAREA_EXPORT_STATE_NOT_STARTED = AREA_EXPORT_STATE_NOT_STARTED             # <<<<<<<<<<<<<<
 *     PyAREA_EXPORT_STATE_FILE_EMPTY = AREA_EXPORT_STATE_FILE_EMPTY
 *     PyAREA_EXPORT_STATE_FILE_ERROR = AREA_EXPORT_STATE_FILE_ERROR
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE_NOT_STARTED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyAREA_EXPORT_STATE_NOT_STARTED, __pyx_t_4) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":188
 *     PyAREA_EXPORT_STATE_RUNNING = AREA_EXPORT_STATE_RUNNING
 *     PyAREA_EXPORT_STATE_NOT_STARTED = AREA_EXPORT_STATE_NOT_STARTED
 *     PyAREA_EXPORT_STATE_FILE_EMPTY = AREA_EXPORT_STATE_FILE_EMPTY             # <<<<<<<<<<<<<<
 *     PyAREA_EXPORT_STATE_FILE_ERROR = AREA_EXPORT_STATE_FILE_ERROR
 *     PyAREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED = AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE_FILE_EMPTY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyAREA_EXPORT_STATE_FILE_EMPTY, __pyx_t_4) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":189
 *     PyAREA_EXPORT_STATE_NOT_STARTED = AREA_EXPORT_STATE_NOT_STARTED
 *     PyAREA_EXPORT_STATE_FILE_EMPTY = AREA_EXPORT_STATE_FILE_EMPTY
 *     PyAREA_EXPORT_STATE_FILE_ERROR = AREA_EXPORT_STATE_FILE_ERROR             # <<<<<<<<<<<<<<
 *     PyAREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED = AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
 *     PyAREA_EXPORT_STATE_LAST = AREA_EXPORT_STATE_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE_FILE_ERROR); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyAREA_EXPORT_STATE_FILE_ERROR, __pyx_t_4) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":190
 *     PyAREA_EXPORT_STATE_FILE_EMPTY = AREA_EXPORT_STATE_FILE_EMPTY
 *     PyAREA_EXPORT_STATE_FILE_ERROR = AREA_EXPORT_STATE_FILE_ERROR
 *     PyAREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED = AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED             # <<<<<<<<<<<<<<
 *     PyAREA_EXPORT_STATE_LAST = AREA_EXPORT_STATE_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyAREA_EXPORT_STATE_SPATIAL_MEMO, __pyx_t_4) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":191
 *     PyAREA_EXPORT_STATE_FILE_ERROR = AREA_EXPORT_STATE_FILE_ERROR
 *     PyAREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED = AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
 *     PyAREA_EXPORT_STATE_LAST = AREA_EXPORT_STATE_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyAREA_EXPORT_STATE_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":184
 * 
 * 
 * class PyAREA_EXPORT_STATE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyAREA_EXPORT_STATE_SUCCESS = AREA_EXPORT_STATE_SUCCESS
 *     PyAREA_EXPORT_STATE_RUNNING = AREA_EXPORT_STATE_RUNNING
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyAREA_EXPORT_STATE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyAREA_EXPORT_STATE, __pyx_t_4) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":194
 * 
 * 
 * class PyREFERENCE_FRAME(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyREFERENCE_FRAME_WORLD = REFERENCE_FRAME_WORLD
 *     PyREFERENCE_FRAME_CAMERA = REFERENCE_FRAME_CAMERA
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyREFERENCE_FRAME, __pyx_n_s_PyREFERENCE_FRAME, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":195
 * 
 * class PyREFERENCE_FRAME(enum.Enum):
 *     PyREFERENCE_FRAME_WORLD = REFERENCE_FRAME_WORLD             # <<<<<<<<<<<<<<
 *     PyREFERENCE_FRAME_CAMERA = REFERENCE_FRAME_CAMERA
 *     PyREFERENCE_FRAME_LAST = REFERENCE_FRAME_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_REFERENCE_FRAME(sl::REFERENCE_FRAME_WORLD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyREFERENCE_FRAME_WORLD, __pyx_t_4) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":196
 * class PyREFERENCE_FRAME(enum.Enum):
 *     PyREFERENCE_FRAME_WORLD = REFERENCE_FRAME_WORLD
 *     PyREFERENCE_FRAME_CAMERA = REFERENCE_FRAME_CAMERA             # <<<<<<<<<<<<<<
 *     PyREFERENCE_FRAME_LAST = REFERENCE_FRAME_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_REFERENCE_FRAME(sl::REFERENCE_FRAME_CAMERA); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyREFERENCE_FRAME_CAMERA, __pyx_t_4) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":197
 *     PyREFERENCE_FRAME_WORLD = REFERENCE_FRAME_WORLD
 *     PyREFERENCE_FRAME_CAMERA = REFERENCE_FRAME_CAMERA
 *     PyREFERENCE_FRAME_LAST = REFERENCE_FRAME_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_REFERENCE_FRAME(sl::REFERENCE_FRAME_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PyREFERENCE_FRAME_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":194
 * 
 * 
 * class PyREFERENCE_FRAME(enum.Enum):             # <<<<<<<<<<<<<<
 *     PyREFERENCE_FRAME_WORLD = REFERENCE_FRAME_WORLD
 *     PyREFERENCE_FRAME_CAMERA = REFERENCE_FRAME_CAMERA
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyREFERENCE_FRAME, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyREFERENCE_FRAME, __pyx_t_4) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":200
 * 
 * 
 * class PySPATIAL_MAPPING_STATE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PySPATIAL_MAPPING_STATE_INITIALIZING = SPATIAL_MAPPING_STATE_INITIALIZING
 *     PySPATIAL_MAPPING_STATE_OK = SPATIAL_MAPPING_STATE_OK
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PySPATIAL_MAPPING_STATE, __pyx_n_s_PySPATIAL_MAPPING_STATE, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":201
 * 
 * class PySPATIAL_MAPPING_STATE(enum.Enum):
 *     PySPATIAL_MAPPING_STATE_INITIALIZING = SPATIAL_MAPPING_STATE_INITIALIZING             # <<<<<<<<<<<<<<
 *     PySPATIAL_MAPPING_STATE_OK = SPATIAL_MAPPING_STATE_OK
 *     PySPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY = SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE_INITIALIZING); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySPATIAL_MAPPING_STATE_INITIALI, __pyx_t_4) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":202
 * class PySPATIAL_MAPPING_STATE(enum.Enum):
 *     PySPATIAL_MAPPING_STATE_INITIALIZING = SPATIAL_MAPPING_STATE_INITIALIZING
 *     PySPATIAL_MAPPING_STATE_OK = SPATIAL_MAPPING_STATE_OK             # <<<<<<<<<<<<<<
 *     PySPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY = SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
 *     PySPATIAL_MAPPING_STATE_NOT_ENABLED = SPATIAL_MAPPING_STATE_NOT_ENABLED
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE_OK); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySPATIAL_MAPPING_STATE_OK, __pyx_t_4) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":203
 *     PySPATIAL_MAPPING_STATE_INITIALIZING = SPATIAL_MAPPING_STATE_INITIALIZING
 *     PySPATIAL_MAPPING_STATE_OK = SPATIAL_MAPPING_STATE_OK
 *     PySPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY = SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY             # <<<<<<<<<<<<<<
 *     PySPATIAL_MAPPING_STATE_NOT_ENABLED = SPATIAL_MAPPING_STATE_NOT_ENABLED
 *     PySPATIAL_MAPPING_STATE_FPS_TOO_LOW = SPATIAL_MAPPING_STATE_FPS_TOO_LOW
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySPATIAL_MAPPING_STATE_NOT_ENOU, __pyx_t_4) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":204
 *     PySPATIAL_MAPPING_STATE_OK = SPATIAL_MAPPING_STATE_OK
 *     PySPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY = SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
 *     PySPATIAL_MAPPING_STATE_NOT_ENABLED = SPATIAL_MAPPING_STATE_NOT_ENABLED             # <<<<<<<<<<<<<<
 *     PySPATIAL_MAPPING_STATE_FPS_TOO_LOW = SPATIAL_MAPPING_STATE_FPS_TOO_LOW
 *     PySPATIAL_MAPPING_STATE_LAST = SPATIAL_MAPPING_STATE_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE_NOT_ENABLED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySPATIAL_MAPPING_STATE_NOT_ENAB, __pyx_t_4) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":205
 *     PySPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY = SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
 *     PySPATIAL_MAPPING_STATE_NOT_ENABLED = SPATIAL_MAPPING_STATE_NOT_ENABLED
 *     PySPATIAL_MAPPING_STATE_FPS_TOO_LOW = SPATIAL_MAPPING_STATE_FPS_TOO_LOW             # <<<<<<<<<<<<<<
 *     PySPATIAL_MAPPING_STATE_LAST = SPATIAL_MAPPING_STATE_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE_FPS_TOO_LOW); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySPATIAL_MAPPING_STATE_FPS_TOO, __pyx_t_4) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":206
 *     PySPATIAL_MAPPING_STATE_NOT_ENABLED = SPATIAL_MAPPING_STATE_NOT_ENABLED
 *     PySPATIAL_MAPPING_STATE_FPS_TOO_LOW = SPATIAL_MAPPING_STATE_FPS_TOO_LOW
 *     PySPATIAL_MAPPING_STATE_LAST = SPATIAL_MAPPING_STATE_LAST             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySPATIAL_MAPPING_STATE_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":208
 *     PySPATIAL_MAPPING_STATE_LAST = SPATIAL_MAPPING_STATE_LAST
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return spatialMappingState2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_1__str__, 0, __pyx_n_s_PySPATIAL_MAPPING_STATE___str, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":211
 *         return spatialMappingState2str(self.value).decode()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return spatialMappingState2str(self.value).decode()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pyzed_7defines_23PySPATIAL_MAPPING_STATE_3__repr__, 0, __pyx_n_s_PySPATIAL_MAPPING_STATE___repr, NULL, __pyx_n_s_pyzed_defines, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":200
 * 
 * 
 * class PySPATIAL_MAPPING_STATE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PySPATIAL_MAPPING_STATE_INITIALIZING = SPATIAL_MAPPING_STATE_INITIALIZING
 *     PySPATIAL_MAPPING_STATE_OK = SPATIAL_MAPPING_STATE_OK
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PySPATIAL_MAPPING_STATE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PySPATIAL_MAPPING_STATE, __pyx_t_4) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":215
 * 
 * 
 * class PySVO_COMPRESSION_MODE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PySVO_COMPRESSION_MODE_RAW = SVO_COMPRESSION_MODE_RAW
 *     PySVO_COMPRESSION_MODE_LOSSLESS = SVO_COMPRESSION_MODE_LOSSLESS
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PySVO_COMPRESSION_MODE, __pyx_n_s_PySVO_COMPRESSION_MODE, (PyObject *) NULL, __pyx_n_s_pyzed_defines, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyzed/defines.pyx":216
 * 
 * class PySVO_COMPRESSION_MODE(enum.Enum):
 *     PySVO_COMPRESSION_MODE_RAW = SVO_COMPRESSION_MODE_RAW             # <<<<<<<<<<<<<<
 *     PySVO_COMPRESSION_MODE_LOSSLESS = SVO_COMPRESSION_MODE_LOSSLESS
 *     PySVO_COMPRESSION_MODE_LOSSY = SVO_COMPRESSION_MODE_LOSSY
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SVO_COMPRESSION_MODE(sl::SVO_COMPRESSION_MODE_RAW); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySVO_COMPRESSION_MODE_RAW, __pyx_t_4) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":217
 * class PySVO_COMPRESSION_MODE(enum.Enum):
 *     PySVO_COMPRESSION_MODE_RAW = SVO_COMPRESSION_MODE_RAW
 *     PySVO_COMPRESSION_MODE_LOSSLESS = SVO_COMPRESSION_MODE_LOSSLESS             # <<<<<<<<<<<<<<
 *     PySVO_COMPRESSION_MODE_LOSSY = SVO_COMPRESSION_MODE_LOSSY
 *     PySVO_COMPRESSION_MODE_LAST = SVO_COMPRESSION_MODE_LAST
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SVO_COMPRESSION_MODE(sl::SVO_COMPRESSION_MODE_LOSSLESS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySVO_COMPRESSION_MODE_LOSSLESS, __pyx_t_4) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":218
 *     PySVO_COMPRESSION_MODE_RAW = SVO_COMPRESSION_MODE_RAW
 *     PySVO_COMPRESSION_MODE_LOSSLESS = SVO_COMPRESSION_MODE_LOSSLESS
 *     PySVO_COMPRESSION_MODE_LOSSY = SVO_COMPRESSION_MODE_LOSSY             # <<<<<<<<<<<<<<
 *     PySVO_COMPRESSION_MODE_LAST = SVO_COMPRESSION_MODE_LAST
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SVO_COMPRESSION_MODE(sl::SVO_COMPRESSION_MODE_LOSSY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySVO_COMPRESSION_MODE_LOSSY, __pyx_t_4) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":219
 *     PySVO_COMPRESSION_MODE_LOSSLESS = SVO_COMPRESSION_MODE_LOSSLESS
 *     PySVO_COMPRESSION_MODE_LOSSY = SVO_COMPRESSION_MODE_LOSSY
 *     PySVO_COMPRESSION_MODE_LAST = SVO_COMPRESSION_MODE_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_sl_3a__3a_SVO_COMPRESSION_MODE(sl::SVO_COMPRESSION_MODE_LAST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_PySVO_COMPRESSION_MODE_LAST, __pyx_t_4) < 0) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyzed/defines.pyx":215
 * 
 * 
 * class PySVO_COMPRESSION_MODE(enum.Enum):             # <<<<<<<<<<<<<<
 *     PySVO_COMPRESSION_MODE_RAW = SVO_COMPRESSION_MODE_RAW
 *     PySVO_COMPRESSION_MODE_LOSSLESS = SVO_COMPRESSION_MODE_LOSSLESS
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PySVO_COMPRESSION_MODE, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PySVO_COMPRESSION_MODE, __pyx_t_4) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":222
 * 
 * 
 * def video_modes():             # <<<<<<<<<<<<<<
 *     return cameraResolution
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_7defines_1video_modes, NULL, __pyx_n_s_pyzed_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_video_modes, __pyx_t_1) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":226
 * 
 * 
 * def str_to_mode(str mode):             # <<<<<<<<<<<<<<
 *     return PyDEPTH_MODE(str2mode(mode.encode()))
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_7defines_3str_to_mode, NULL, __pyx_n_s_pyzed_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_str_to_mode, __pyx_t_1) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":230
 * 
 * 
 * def str_to_unit(str unit):             # <<<<<<<<<<<<<<
 *     return PyUNIT(str2unit(unit.encode()))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzed_7defines_5str_to_unit, NULL, __pyx_n_s_pyzed_defines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_str_to_unit, __pyx_t_1) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzed/defines.pyx":1
 * ########################################################################             # <<<<<<<<<<<<<<
 * #
 * # Copyright (c) 2017, STEREOLABS.
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyzed.defines", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyzed.defines");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CalculateMetaclass */
    static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
    static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
        static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
        static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject *use_cline;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        __Pyx_PyThreadState_Current, /*PyThreadState *tstate,*/
        py_code,                     /*PyCodeObject *code,*/
        __pyx_d,              /*PyObject *globals,*/
        0                            /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_RESOLUTION(sl::RESOLUTION value) {
    const sl::RESOLUTION neg_one = (sl::RESOLUTION) -1, const_zero = (sl::RESOLUTION) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::RESOLUTION) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::RESOLUTION) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::RESOLUTION) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::RESOLUTION) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::RESOLUTION) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::RESOLUTION),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_CAMERA_SETTINGS(sl::CAMERA_SETTINGS value) {
    const sl::CAMERA_SETTINGS neg_one = (sl::CAMERA_SETTINGS) -1, const_zero = (sl::CAMERA_SETTINGS) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::CAMERA_SETTINGS) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::CAMERA_SETTINGS) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::CAMERA_SETTINGS) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::CAMERA_SETTINGS) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::CAMERA_SETTINGS) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::CAMERA_SETTINGS),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SELF_CALIBRATION_STATE(sl::SELF_CALIBRATION_STATE value) {
    const sl::SELF_CALIBRATION_STATE neg_one = (sl::SELF_CALIBRATION_STATE) -1, const_zero = (sl::SELF_CALIBRATION_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SELF_CALIBRATION_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SELF_CALIBRATION_STATE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_DEPTH_MODE(sl::DEPTH_MODE value) {
    const sl::DEPTH_MODE neg_one = (sl::DEPTH_MODE) -1, const_zero = (sl::DEPTH_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::DEPTH_MODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::DEPTH_MODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::DEPTH_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::DEPTH_MODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::DEPTH_MODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::DEPTH_MODE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SENSING_MODE(sl::SENSING_MODE value) {
    const sl::SENSING_MODE neg_one = (sl::SENSING_MODE) -1, const_zero = (sl::SENSING_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SENSING_MODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SENSING_MODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SENSING_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SENSING_MODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SENSING_MODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SENSING_MODE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_UNIT(sl::UNIT value) {
    const sl::UNIT neg_one = (sl::UNIT) -1, const_zero = (sl::UNIT) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::UNIT) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::UNIT) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::UNIT) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::UNIT) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::UNIT) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::UNIT),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_COORDINATE_SYSTEM(sl::COORDINATE_SYSTEM value) {
    const sl::COORDINATE_SYSTEM neg_one = (sl::COORDINATE_SYSTEM) -1, const_zero = (sl::COORDINATE_SYSTEM) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::COORDINATE_SYSTEM) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::COORDINATE_SYSTEM) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::COORDINATE_SYSTEM),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_MEASURE(sl::MEASURE value) {
    const sl::MEASURE neg_one = (sl::MEASURE) -1, const_zero = (sl::MEASURE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::MEASURE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::MEASURE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::MEASURE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::MEASURE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::MEASURE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::MEASURE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_VIEW(sl::VIEW value) {
    const sl::VIEW neg_one = (sl::VIEW) -1, const_zero = (sl::VIEW) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::VIEW) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::VIEW) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::VIEW) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::VIEW) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::VIEW) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::VIEW),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_DEPTH_FORMAT(sl::DEPTH_FORMAT value) {
    const sl::DEPTH_FORMAT neg_one = (sl::DEPTH_FORMAT) -1, const_zero = (sl::DEPTH_FORMAT) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::DEPTH_FORMAT) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::DEPTH_FORMAT) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::DEPTH_FORMAT) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::DEPTH_FORMAT) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::DEPTH_FORMAT) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::DEPTH_FORMAT),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_POINT_CLOUD_FORMAT(sl::POINT_CLOUD_FORMAT value) {
    const sl::POINT_CLOUD_FORMAT neg_one = (sl::POINT_CLOUD_FORMAT) -1, const_zero = (sl::POINT_CLOUD_FORMAT) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::POINT_CLOUD_FORMAT) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::POINT_CLOUD_FORMAT) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::POINT_CLOUD_FORMAT) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::POINT_CLOUD_FORMAT) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::POINT_CLOUD_FORMAT) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::POINT_CLOUD_FORMAT),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_TRACKING_STATE(sl::TRACKING_STATE value) {
    const sl::TRACKING_STATE neg_one = (sl::TRACKING_STATE) -1, const_zero = (sl::TRACKING_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::TRACKING_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::TRACKING_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::TRACKING_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::TRACKING_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::TRACKING_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::TRACKING_STATE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_AREA_EXPORT_STATE(sl::AREA_EXPORT_STATE value) {
    const sl::AREA_EXPORT_STATE neg_one = (sl::AREA_EXPORT_STATE) -1, const_zero = (sl::AREA_EXPORT_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::AREA_EXPORT_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::AREA_EXPORT_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::AREA_EXPORT_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::AREA_EXPORT_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::AREA_EXPORT_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::AREA_EXPORT_STATE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_REFERENCE_FRAME(sl::REFERENCE_FRAME value) {
    const sl::REFERENCE_FRAME neg_one = (sl::REFERENCE_FRAME) -1, const_zero = (sl::REFERENCE_FRAME) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::REFERENCE_FRAME) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::REFERENCE_FRAME) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::REFERENCE_FRAME) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::REFERENCE_FRAME) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::REFERENCE_FRAME) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::REFERENCE_FRAME),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SPATIAL_MAPPING_STATE(sl::SPATIAL_MAPPING_STATE value) {
    const sl::SPATIAL_MAPPING_STATE neg_one = (sl::SPATIAL_MAPPING_STATE) -1, const_zero = (sl::SPATIAL_MAPPING_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SPATIAL_MAPPING_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SPATIAL_MAPPING_STATE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_sl_3a__3a_SVO_COMPRESSION_MODE(sl::SVO_COMPRESSION_MODE value) {
    const sl::SVO_COMPRESSION_MODE neg_one = (sl::SVO_COMPRESSION_MODE) -1, const_zero = (sl::SVO_COMPRESSION_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(sl::SVO_COMPRESSION_MODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(sl::SVO_COMPRESSION_MODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SVO_COMPRESSION_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(sl::SVO_COMPRESSION_MODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(sl::SVO_COMPRESSION_MODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(sl::SVO_COMPRESSION_MODE),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE sl::RESOLUTION __Pyx_PyInt_As_sl_3a__3a_RESOLUTION(PyObject *x) {
    const sl::RESOLUTION neg_one = (sl::RESOLUTION) -1, const_zero = (sl::RESOLUTION) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::RESOLUTION) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::RESOLUTION) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::RESOLUTION) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::RESOLUTION) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) >= 2 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((((sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::RESOLUTION) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) >= 3 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((((((sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::RESOLUTION) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) >= 4 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((((((((sl::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::RESOLUTION) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::RESOLUTION) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::RESOLUTION, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::RESOLUTION) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::RESOLUTION, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::RESOLUTION) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::RESOLUTION,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::RESOLUTION) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((sl::RESOLUTION)-1)*(((((sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::RESOLUTION) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) ((((((sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::RESOLUTION) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((sl::RESOLUTION)-1)*(((((((sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::RESOLUTION) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) ((((((((sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::RESOLUTION) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) (((sl::RESOLUTION)-1)*(((((((((sl::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::RESOLUTION) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::RESOLUTION, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::RESOLUTION) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::RESOLUTION) ((((((((((sl::RESOLUTION)digits[3]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[2]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[1]) << PyLong_SHIFT) | (sl::RESOLUTION)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::RESOLUTION) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::RESOLUTION, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::RESOLUTION) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::RESOLUTION, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::RESOLUTION val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::RESOLUTION) -1;
        }
    } else {
        sl::RESOLUTION val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::RESOLUTION) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_RESOLUTION(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::RESOLUTION");
    return (sl::RESOLUTION) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::RESOLUTION");
    return (sl::RESOLUTION) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::SELF_CALIBRATION_STATE __Pyx_PyInt_As_sl_3a__3a_SELF_CALIBRATION_STATE(PyObject *x) {
    const sl::SELF_CALIBRATION_STATE neg_one = (sl::SELF_CALIBRATION_STATE) -1, const_zero = (sl::SELF_CALIBRATION_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::SELF_CALIBRATION_STATE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::SELF_CALIBRATION_STATE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SELF_CALIBRATION_STATE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) >= 2 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) (((((sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) >= 3 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) (((((((sl::SELF_CALIBRATION_STATE)digits[2]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) >= 4 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) (((((((((sl::SELF_CALIBRATION_STATE)digits[3]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[2]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::SELF_CALIBRATION_STATE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SELF_CALIBRATION_STATE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SELF_CALIBRATION_STATE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SELF_CALIBRATION_STATE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) (((sl::SELF_CALIBRATION_STATE)-1)*(((((sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) ((((((sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) (((sl::SELF_CALIBRATION_STATE)-1)*(((((((sl::SELF_CALIBRATION_STATE)digits[2]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) ((((((((sl::SELF_CALIBRATION_STATE)digits[2]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) (((sl::SELF_CALIBRATION_STATE)-1)*(((((((((sl::SELF_CALIBRATION_STATE)digits[3]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[2]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SELF_CALIBRATION_STATE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SELF_CALIBRATION_STATE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SELF_CALIBRATION_STATE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SELF_CALIBRATION_STATE) ((((((((((sl::SELF_CALIBRATION_STATE)digits[3]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[2]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[1]) << PyLong_SHIFT) | (sl::SELF_CALIBRATION_STATE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SELF_CALIBRATION_STATE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SELF_CALIBRATION_STATE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SELF_CALIBRATION_STATE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::SELF_CALIBRATION_STATE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::SELF_CALIBRATION_STATE) -1;
        }
    } else {
        sl::SELF_CALIBRATION_STATE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::SELF_CALIBRATION_STATE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_SELF_CALIBRATION_STATE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::SELF_CALIBRATION_STATE");
    return (sl::SELF_CALIBRATION_STATE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::SELF_CALIBRATION_STATE");
    return (sl::SELF_CALIBRATION_STATE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::DEPTH_MODE __Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(PyObject *x) {
    const sl::DEPTH_MODE neg_one = (sl::DEPTH_MODE) -1, const_zero = (sl::DEPTH_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::DEPTH_MODE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::DEPTH_MODE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::DEPTH_MODE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::DEPTH_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) >= 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((((sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::DEPTH_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) >= 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((((((sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::DEPTH_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) >= 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((((((((sl::DEPTH_MODE)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::DEPTH_MODE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::DEPTH_MODE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_MODE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::DEPTH_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_MODE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::DEPTH_MODE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::DEPTH_MODE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((sl::DEPTH_MODE)-1)*(((((sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::DEPTH_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) ((((((sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::DEPTH_MODE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((sl::DEPTH_MODE)-1)*(((((((sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::DEPTH_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) ((((((((sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::DEPTH_MODE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) (((sl::DEPTH_MODE)-1)*(((((((((sl::DEPTH_MODE)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::DEPTH_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::DEPTH_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::DEPTH_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::DEPTH_MODE) ((((((((((sl::DEPTH_MODE)digits[3]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[2]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[1]) << PyLong_SHIFT) | (sl::DEPTH_MODE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::DEPTH_MODE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_MODE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::DEPTH_MODE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::DEPTH_MODE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::DEPTH_MODE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::DEPTH_MODE) -1;
        }
    } else {
        sl::DEPTH_MODE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::DEPTH_MODE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_DEPTH_MODE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::DEPTH_MODE");
    return (sl::DEPTH_MODE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::DEPTH_MODE");
    return (sl::DEPTH_MODE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::SENSING_MODE __Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(PyObject *x) {
    const sl::SENSING_MODE neg_one = (sl::SENSING_MODE) -1, const_zero = (sl::SENSING_MODE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::SENSING_MODE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::SENSING_MODE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SENSING_MODE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::SENSING_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) >= 2 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((((sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SENSING_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) >= 3 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((((((sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SENSING_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) >= 4 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((((((((sl::SENSING_MODE)digits[3]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::SENSING_MODE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::SENSING_MODE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SENSING_MODE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SENSING_MODE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SENSING_MODE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SENSING_MODE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::SENSING_MODE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((sl::SENSING_MODE)-1)*(((((sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::SENSING_MODE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) ((((((sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::SENSING_MODE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((sl::SENSING_MODE)-1)*(((((((sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SENSING_MODE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) ((((((((sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::SENSING_MODE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) (((sl::SENSING_MODE)-1)*(((((((((sl::SENSING_MODE)digits[3]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SENSING_MODE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SENSING_MODE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SENSING_MODE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SENSING_MODE) ((((((((((sl::SENSING_MODE)digits[3]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[2]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[1]) << PyLong_SHIFT) | (sl::SENSING_MODE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::SENSING_MODE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SENSING_MODE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SENSING_MODE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SENSING_MODE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::SENSING_MODE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::SENSING_MODE) -1;
        }
    } else {
        sl::SENSING_MODE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::SENSING_MODE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_SENSING_MODE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::SENSING_MODE");
    return (sl::SENSING_MODE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::SENSING_MODE");
    return (sl::SENSING_MODE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::UNIT __Pyx_PyInt_As_sl_3a__3a_UNIT(PyObject *x) {
    const sl::UNIT neg_one = (sl::UNIT) -1, const_zero = (sl::UNIT) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::UNIT) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::UNIT, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::UNIT) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::UNIT) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::UNIT, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::UNIT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) >= 2 * PyLong_SHIFT) {
                            return (sl::UNIT) (((((sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::UNIT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) >= 3 * PyLong_SHIFT) {
                            return (sl::UNIT) (((((((sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::UNIT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) >= 4 * PyLong_SHIFT) {
                            return (sl::UNIT) (((((((((sl::UNIT)digits[3]) << PyLong_SHIFT) | (sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::UNIT) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::UNIT) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::UNIT, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::UNIT) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::UNIT, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::UNIT) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::UNIT, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::UNIT,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::UNIT) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::UNIT) (((sl::UNIT)-1)*(((((sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::UNIT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::UNIT) ((((((sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::UNIT) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::UNIT) (((sl::UNIT)-1)*(((((((sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::UNIT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::UNIT) ((((((((sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::UNIT) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::UNIT) (((sl::UNIT)-1)*(((((((((sl::UNIT)digits[3]) << PyLong_SHIFT) | (sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::UNIT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::UNIT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::UNIT) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::UNIT) ((((((((((sl::UNIT)digits[3]) << PyLong_SHIFT) | (sl::UNIT)digits[2]) << PyLong_SHIFT) | (sl::UNIT)digits[1]) << PyLong_SHIFT) | (sl::UNIT)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::UNIT) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::UNIT, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::UNIT) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::UNIT, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::UNIT val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::UNIT) -1;
        }
    } else {
        sl::UNIT val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::UNIT) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_UNIT(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::UNIT");
    return (sl::UNIT) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::UNIT");
    return (sl::UNIT) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::TRACKING_STATE __Pyx_PyInt_As_sl_3a__3a_TRACKING_STATE(PyObject *x) {
    const sl::TRACKING_STATE neg_one = (sl::TRACKING_STATE) -1, const_zero = (sl::TRACKING_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::TRACKING_STATE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::TRACKING_STATE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::TRACKING_STATE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::TRACKING_STATE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) >= 2 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) (((((sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::TRACKING_STATE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) >= 3 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) (((((((sl::TRACKING_STATE)digits[2]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::TRACKING_STATE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) >= 4 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) (((((((((sl::TRACKING_STATE)digits[3]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[2]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::TRACKING_STATE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::TRACKING_STATE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::TRACKING_STATE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::TRACKING_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::TRACKING_STATE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::TRACKING_STATE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::TRACKING_STATE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) (((sl::TRACKING_STATE)-1)*(((((sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::TRACKING_STATE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) ((((((sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::TRACKING_STATE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) (((sl::TRACKING_STATE)-1)*(((((((sl::TRACKING_STATE)digits[2]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::TRACKING_STATE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) ((((((((sl::TRACKING_STATE)digits[2]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::TRACKING_STATE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) (((sl::TRACKING_STATE)-1)*(((((((((sl::TRACKING_STATE)digits[3]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[2]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::TRACKING_STATE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::TRACKING_STATE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::TRACKING_STATE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::TRACKING_STATE) ((((((((((sl::TRACKING_STATE)digits[3]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[2]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[1]) << PyLong_SHIFT) | (sl::TRACKING_STATE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::TRACKING_STATE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::TRACKING_STATE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::TRACKING_STATE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::TRACKING_STATE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::TRACKING_STATE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::TRACKING_STATE) -1;
        }
    } else {
        sl::TRACKING_STATE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::TRACKING_STATE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_TRACKING_STATE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::TRACKING_STATE");
    return (sl::TRACKING_STATE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::TRACKING_STATE");
    return (sl::TRACKING_STATE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE sl::SPATIAL_MAPPING_STATE __Pyx_PyInt_As_sl_3a__3a_SPATIAL_MAPPING_STATE(PyObject *x) {
    const sl::SPATIAL_MAPPING_STATE neg_one = (sl::SPATIAL_MAPPING_STATE) -1, const_zero = (sl::SPATIAL_MAPPING_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(sl::SPATIAL_MAPPING_STATE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (sl::SPATIAL_MAPPING_STATE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SPATIAL_MAPPING_STATE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, digit, digits[0])
                case 2:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) >= 2 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) (((((sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) >= 3 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) (((((((sl::SPATIAL_MAPPING_STATE)digits[2]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) >= 4 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) (((((((((sl::SPATIAL_MAPPING_STATE)digits[3]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[2]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (sl::SPATIAL_MAPPING_STATE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SPATIAL_MAPPING_STATE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SPATIAL_MAPPING_STATE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (sl::SPATIAL_MAPPING_STATE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) (((sl::SPATIAL_MAPPING_STATE)-1)*(((((sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 2 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) ((((((sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) (((sl::SPATIAL_MAPPING_STATE)-1)*(((((((sl::SPATIAL_MAPPING_STATE)digits[2]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 3 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) ((((((((sl::SPATIAL_MAPPING_STATE)digits[2]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) (((sl::SPATIAL_MAPPING_STATE)-1)*(((((((((sl::SPATIAL_MAPPING_STATE)digits[3]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[2]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(sl::SPATIAL_MAPPING_STATE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(sl::SPATIAL_MAPPING_STATE) - 1 > 4 * PyLong_SHIFT) {
                            return (sl::SPATIAL_MAPPING_STATE) ((((((((((sl::SPATIAL_MAPPING_STATE)digits[3]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[2]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[1]) << PyLong_SHIFT) | (sl::SPATIAL_MAPPING_STATE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SPATIAL_MAPPING_STATE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(sl::SPATIAL_MAPPING_STATE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(sl::SPATIAL_MAPPING_STATE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            sl::SPATIAL_MAPPING_STATE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (sl::SPATIAL_MAPPING_STATE) -1;
        }
    } else {
        sl::SPATIAL_MAPPING_STATE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (sl::SPATIAL_MAPPING_STATE) -1;
        val = __Pyx_PyInt_As_sl_3a__3a_SPATIAL_MAPPING_STATE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to sl::SPATIAL_MAPPING_STATE");
    return (sl::SPATIAL_MAPPING_STATE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to sl::SPATIAL_MAPPING_STATE");
    return (sl::SPATIAL_MAPPING_STATE) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PyErrFetchRestore */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* FastTypeChecks */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
